"use strict";
var net = require('net');
var path = require('path');
var os = require('os');
var fs = require('fs');
var q = require('q');
var ec = require('errno-codes');
var mkdirp = require('mkdir-parents');
var osLocale = require('os-locale');
var rmdirRecursive = require('rmdir-recursive');
var config_1 = require('./config');
var randomHexString_1 = require('./randomHexString');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
var report_errors_1 = require('report-errors');
var tmp = require('tmp');
// Enable long stack support for Q promises
// TODO: revisit. Long stack support in Q may impose some perf costs if there are many promises or many users.
q.longStackSupport = true;
/**
 * Sets OS locale to Hub host.
 */
function setOsLocale(localeConfigs) {
    var locale = osLocale.sync();
    localeConfigs.forEach(function (config) {
        config(locale, /* cache */ true);
    });
}
exports.setOsLocale = setOsLocale;
;
var WatsonReporter;
function registerForCrashReporting(crashFileLogPrefix) {
    var errorHandler = new report_errors_1.ErrorHandlerNode({ appRoot: __dirname, packageInfo: require(path.join(__dirname, 'package.json')) });
    if (process.platform === 'win32') {
        // Report failures to Watson
        if (!WatsonReporter) {
            try {
                WatsonReporter = require('wer-reporter').WatsonReporter;
            }
            catch (e) {
                WatsonReporter = null;
            }
        }
        if (WatsonReporter) {
            errorHandler.addReportingChannel(new WatsonReporter({ nonCritical: true /* set nonCritical to true so that WER dialog is hidden */ }));
        }
    }
    // Write failures to a log file
    var crashLogFilePrefix = tmp.tmpNameSync({ template: crashFileLogPrefix + "-" + process.pid + "-XXXXXX", postfix: '.log' });
    errorHandler.addReportingChannel(new report_errors_1.FileReporter(getLogFilesDir(), crashLogFilePrefix + ".log", /* stripStack */ true));
}
exports.registerForCrashReporting = registerForCrashReporting;
/* ServiceHub error classes */
(function (ErrorKind) {
    ErrorKind[ErrorKind["Error"] = 0] = "Error";
    ErrorKind[ErrorKind["InvalidArgument"] = 1] = "InvalidArgument";
    ErrorKind[ErrorKind["InvalidOperation"] = 2] = "InvalidOperation";
    ErrorKind[ErrorKind["ConfigurationError"] = 3] = "ConfigurationError";
    ErrorKind[ErrorKind["ServiceModuleInfoNotFound"] = 4] = "ServiceModuleInfoNotFound";
    ErrorKind[ErrorKind["ServiceModuleInfoLoadError"] = 5] = "ServiceModuleInfoLoadError";
    ErrorKind[ErrorKind["ServiceModuleInfoInvalidPropertyError"] = 6] = "ServiceModuleInfoInvalidPropertyError";
    ErrorKind[ErrorKind["HubHostInfoLoadError"] = 7] = "HubHostInfoLoadError";
    ErrorKind[ErrorKind["JsonParseError"] = 8] = "JsonParseError";
    ErrorKind[ErrorKind["HostGroupsNotSupported"] = 9] = "HostGroupsNotSupported";
    ErrorKind[ErrorKind["ObjectDisposed"] = 10] = "ObjectDisposed";
})(exports.ErrorKind || (exports.ErrorKind = {}));
var ErrorKind = exports.ErrorKind;
// Default error messages for the cases where caller can pass only error kind to ServiceHubError ctor.
var defaultErrorMessages = {};
var ServiceHubError = (function () {
    function ServiceHubError(kind, message) {
        this.name = 'ServiceHubError';
        this.kind = kind || ErrorKind.Error;
        this.message = message;
        if (!this.message) {
            ServiceHubError.initDefaultErrorMessages();
            this.message = defaultErrorMessages[this.kind] || ErrorKind[this.kind];
        }
        this.stack = (new Error).stack;
    }
    ServiceHubError.initDefaultErrorMessages = function () {
        if (!ServiceHubError.areDefaultErrorMessagesInitialized) {
            defaultErrorMessages[ErrorKind.ObjectDisposed] = libraryResourceStrings_1.LibraryResourceStrings.objectDisposed;
            ServiceHubError.areDefaultErrorMessagesInitialized = true;
        }
    };
    return ServiceHubError;
}());
exports.ServiceHubError = ServiceHubError;
var Constants = (function () {
    function Constants() {
    }
    Constants.HostInfoFolderName = 'host';
    Constants.HubHostScript = 'HubHost.js';
    Constants.PipeScheme = 'net.pipe://';
    return Constants;
}());
exports.Constants = Constants;
var ServerManager = (function () {
    function ServerManager() {
        this.activeStreams = [];
        this.activeServers = [];
    }
    // Returns the endpoint that people connect to in order to have an instance of 'name' created and hooked up to the proper callback stream
    ServerManager.prototype.startService = function (options, connectionCallback) {
        var _this = this;
        if (!options) {
            throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variablesAreNotDefined('options'));
        }
        if (!options.logger) {
            throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('options.logger'));
        }
        var serverOnConnectionCallback = null;
        var url;
        serverOnConnectionCallback = function (stream) {
            _this.activeStreams.push(stream);
            connectionCallback(stream, options.logger);
        };
        var server = net.createServer(serverOnConnectionCallback);
        this.activeServers.push(server);
        // Start the pipe listener
        return q.resolve(options.pipeName || randomHexString_1.default())
            .then(function (pipeName) {
            pipeName = formatPipeName(pipeName);
            return getServerPipePath(pipeName)
                .then(function (serverPath) {
                var url = Constants.PipeScheme + pipeName;
                options.logger.info(libraryResourceStrings_1.LibraryResourceStrings.startingServer(options.name, url, serverPath));
                if (options.onErrorCb) {
                    server.on('error', options.onErrorCb);
                }
                q.ninvoke(server, 'once', 'close').done(function () {
                    options.logger.info(libraryResourceStrings_1.LibraryResourceStrings.stoppedServer(options.name, url));
                    _this.activeServers.splice(_this.activeServers.indexOf(server), 1);
                });
                server.listen(serverPath);
                return url;
            });
        });
    };
    ServerManager.prototype.stop = function () {
        var promises = [];
        this.activeServers.forEach(function (server) { return promises.push(q.ninvoke(server, 'close')); });
        return q.all(promises);
    };
    return ServerManager;
}());
exports.serverManager = new ServerManager();
function getPipeName(url) {
    if (!url) {
        throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('url'));
    }
    if (url.indexOf(Constants.PipeScheme) !== 0) {
        throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.urlShouldStartWith(Constants.PipeScheme));
    }
    var pipeName = url.slice(Constants.PipeScheme.length).trim();
    if (!pipeName) {
        throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.urlHasNoPipeName(Constants.PipeScheme));
    }
    return pipeName;
}
exports.getPipeName = getPipeName;
var unixSocketDir = null;
// For *nix platforms we create a socket dir that looks like this: '~/.ServiceHub/<controllerPipeName>'
// ~ avoids pipe name collisions between different users who are running apps with the same ServiceHub config file.
// <controllerPipeName> sub dir ensures each ServiceHub session gets its own dir for socket files.
function getUnixSocketDir() {
    if (unixSocketDir) {
        return q.resolve(unixSocketDir);
    }
    var controllerPipeNamePromise = null;
    // see if we can get the controller pipe name from env var
    var controllerPipeName = getLocationServicePipeName();
    if (controllerPipeName) {
        controllerPipeNamePromise = q.resolve(controllerPipeName);
    }
    else {
        controllerPipeNamePromise = config_1.getConfig()
            .then(function (config) {
            return config.controller.pipeName;
        });
    }
    return controllerPipeNamePromise
        .then(function (controllerPipeName) { return path.join(getServiceHubBaseDirForUnix(), controllerPipeName); });
}
exports.getUnixSocketDir = getUnixSocketDir;
var unixSocketDirCreated = false;
exports.unixOwnerOnlyAccessMode = parseInt('0700', 8); // 'rwx------'
function getServerPipePath(pipeNameOrUrl) {
    if (!pipeNameOrUrl) {
        throw new Error(libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('pipeName'));
    }
    if (pipeNameOrUrl.indexOf(Constants.PipeScheme) === 0) {
        pipeNameOrUrl = pipeNameOrUrl.slice(Constants.PipeScheme.length).trim();
        if (!pipeNameOrUrl) {
            throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.noPipeName(Constants.PipeScheme));
        }
    }
    if (os.platform() === 'win32') {
        return q.resolve(path.join('\\\\?\\pipe', pipeNameOrUrl));
    }
    return getUnixSocketDir()
        .then(function (socketDir) {
        var serverPipePath = path.join(socketDir, pipeNameOrUrl);
        if (unixSocketDirCreated) {
            return q.resolve(serverPipePath);
        }
        var dirCheck = q.defer();
        fs.exists(socketDir, function (exists) { return dirCheck.resolve(exists); });
        return dirCheck.promise
            .then(function (exists) {
            if (exists) {
                unixSocketDirCreated = true;
                return serverPipePath;
            }
            else {
                return q.nfcall(mkdirp, socketDir, exports.unixOwnerOnlyAccessMode)
                    .then(function () {
                    unixSocketDirCreated = true;
                    return serverPipePath;
                })
                    .catch(function (e) {
                    if (e.code !== ec.EEXIST.code) {
                        throw e;
                    }
                    unixSocketDirCreated = true;
                    return serverPipePath;
                });
            }
        });
    });
}
exports.getServerPipePath = getServerPipePath;
function deleteUnixSocketDir() {
    if (process.platform === 'win32') {
        return q.resolve({});
    }
    return getUnixSocketDir()
        .then(function (socketDir) {
        var dirCheck = q.defer();
        fs.access(socketDir, function (err) { return dirCheck.resolve(err ? false : true); });
        return dirCheck.promise
            .then(function (exists) {
            if (exists) {
                // delete socket dir
                unixSocketDirCreated = false;
                return q.nfcall(rmdirRecursive, socketDir);
            }
        });
    });
}
exports.deleteUnixSocketDir = deleteUnixSocketDir;
function getPropertyNoCase(obj, propertyName) {
    if (!obj || !propertyName) {
        return null;
    }
    if (obj.hasOwnProperty(propertyName)) {
        return obj[propertyName];
    }
    propertyName = propertyName.toLowerCase();
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && prop.toLowerCase() === propertyName) {
            return obj[prop];
        }
    }
}
exports.getPropertyNoCase = getPropertyNoCase;
function getPropertiesArray(obj) {
    var result = [];
    if (obj !== null && typeof obj === 'object') {
        for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                result.push(obj[prop]);
            }
        }
    }
    return result;
}
exports.getPropertiesArray = getPropertiesArray;
function getLogFilesDir() {
    if (process.platform == 'win32') {
        return path.join(os.tmpdir(), 'servicehub', 'logs');
    }
    else {
        return path.join(getServiceHubBaseDirForUnix(), 'logs');
    }
}
exports.getLogFilesDir = getLogFilesDir;
var locationServicePipeNameEnvironmentVariable = 'ServiceHubLocationServicePipeName';
function getLocationServicePipeName() {
    return process.env[locationServicePipeNameEnvironmentVariable];
}
exports.getLocationServicePipeName = getLocationServicePipeName;
function setLocationServicePipeName(pipeName) {
    process.env[locationServicePipeNameEnvironmentVariable] = pipeName || ''; // Process environment variables are always strings.
}
exports.setLocationServicePipeName = setLocationServicePipeName;
exports.maxPipeNameLength = 10;
function formatPipeName(pipeName) {
    if (process.platform === 'win32' || pipeName.length <= exports.maxPipeNameLength) {
        return pipeName;
    }
    else {
        return pipeName.substring(0, exports.maxPipeNameLength);
    }
}
exports.formatPipeName = formatPipeName;
function parseFileAsJson(filePath, encoding) {
    if (!filePath) {
        throw new ServiceHubError(ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('filePath'));
    }
    encoding = encoding || 'utf8';
    return q.ninvoke(fs, 'readFile', filePath, encoding)
        .then(function (json) {
        try {
            // BOM is not a valid JSON token, remove it.
            // Node doesn't do that automatically, see https://github.com/nodejs/node-v0.x-archive/issues/1918
            return JSON.parse(json.replace(/^\uFEFF/, ''));
        }
        catch (err) {
            throw new ServiceHubError(ErrorKind.JsonParseError, libraryResourceStrings_1.LibraryResourceStrings.errorParsingJson(filePath, err.message));
        }
    });
}
exports.parseFileAsJson = parseFileAsJson;
// Private (non-exported) helper methods
var serviceHubBaseDirForUnix;
function getServiceHubBaseDirForUnix() {
    if (!serviceHubBaseDirForUnix) {
        serviceHubBaseDirForUnix = path.join(require('user-home'), '.ServiceHub');
    }
    return serviceHubBaseDirForUnix;
}
function transferListeners(eventNames, source, target) {
    for (var _i = 0, eventNames_1 = eventNames; _i < eventNames_1.length; _i++) {
        var event_1 = eventNames_1[_i];
        for (var _a = 0, _b = source.listeners(event_1); _a < _b.length; _a++) {
            var listener = _b[_a];
            target.addListener(event_1, listener);
        }
    }
}
function transferReadableStreamListeners(source, target) {
    var events = ['readable', 'data', 'end', 'close', 'error'];
    transferListeners(events, source, target);
}
function transferWritableStreamListeners(source, target) {
    var events = ['drain', 'finish', 'pipe', 'unpipe', 'error'];
    transferListeners(events, source, target);
}

//# sourceMappingURL=common.js.map
// SIG // Begin signature block
// SIG // MIIhtAYJKoZIhvcNAQcCoIIhpTCCIaECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // Ue31/7ZBWaxv5ENtnJIkHhJmHFKlroKjPlDVSmLVn0Kg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbYwghWyAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggaowGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEICeF+1KVBLX/
// SIG // yCjGtmkVwEwO01dZWNR3z4JBXncDgmvXMD4GCisGAQQB
// SIG // gjcCAQwxMDAuoBSAEgBjAG8AbQBtAG8AbgAuAGoAc6EW
// SIG // gBRodHRwOi8vbWljcm9zb2Z0LmNvbTANBgkqhkiG9w0B
// SIG // AQEFAASCAQB4ne4vozZV2WqDq3bWhgk+88zuPuSVp1Ai
// SIG // rOKjJC6GOwPiT9vA9T5Cwh/Q6NJRFALBHk6xDjV8FZHi
// SIG // q7DGR4XN7Dz8LLTrDE9BEXqd0UA1SHk8Ym4Yvv/Husef
// SIG // jXDwAg1sB0SX8yCLCw4pWGcu2DoMma7c3X/+ulKlN2FS
// SIG // N6ilsh8Qy19+6njBk+QzJYRGAxMX+H4RmiGNUINymDBJ
// SIG // Twt9gIHpBkAVlyJnwcvwx3Pg9KrVbd3W6znKd0Pc1zff
// SIG // eNrxZ7If7PzuPdwBarxVliJKQfesF257qKUPmMxsWzn6
// SIG // FdR/bSc4ckVlhKfjLgy4fxFgK1tH3MtgLdGBX7H4Ujqr
// SIG // oYITRDCCE0AGCisGAQQBgjcDAwExghMwMIITLAYJKoZI
// SIG // hvcNAQcCoIITHTCCExkCAQMxDzANBglghkgBZQMEAgEF
// SIG // ADCCAToGCyqGSIb3DQEJEAEEoIIBKQSCASUwggEhAgEB
// SIG // BgorBgEEAYRZCgMBMDEwDQYJYIZIAWUDBAIBBQAEIF2c
// SIG // BDeI/wZZYG4N1bOWd6WoWi4BUXdQASUJbTmdZK+RAgZa
// SIG // e23cVlcYETIwMTgwMjEzMDUxMjM0LjZaMAcCAQGAAgH0
// SIG // oIG4pIG1MIGyMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYD
// SIG // VQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgRFNFIEVT
// SIG // TjoxMkU3LTMwNjQtNjExMjElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCDsowggZxMIIE
// SIG // WaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUA
// SIG // MIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
// SIG // aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
// SIG // dHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3MDEy
// SIG // MTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qR0NvHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvtfGhL
// SIG // LF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZ
// SIG // sTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1
// SIG // R4HNvyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd
// SIG // 0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd
// SIG // /XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u
// SIG // 5ZrKsajyeioKMfDaTgaRtogINeh4HLDpmc085y9Euqf0
// SIG // 3GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB
// SIG // 5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYE
// SIG // FNVjOlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcU
// SIG // AgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNV
// SIG // HRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJc
// SIG // YmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0
// SIG // dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3By
// SIG // b2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNy
// SIG // bDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNV
// SIG // HSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9Bggr
// SIG // BgEFBQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEF
// SIG // BQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMA
// SIG // eQBfAFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG
// SIG // 9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Pr
// SIG // psz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5
// SIG // vO1rVFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPle
// SIG // FzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCvOA8X
// SIG // 9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2
// SIG // /QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9q
// SIG // Yn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQeKZt
// SIG // 0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXl
// SIG // ZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkea
// SIG // gMXQzafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA3+cx
// SIG // B6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvY
// SIG // grRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3q
// SIG // jeAzLhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8ZQU3g
// SIG // hvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx
// SIG // 16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gF
// SIG // Lu8NoFA12u8JJxzVs341Hgi62jbb01+P3nSISRIwggTZ
// SIG // MIIDwaADAgECAhMzAAAArIohvHrSm3L0AAAAAACsMA0G
// SIG // CSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBD
// SIG // QSAyMDEwMB4XDTE2MDkwNzE3NTY1NFoXDTE4MDkwNzE3
// SIG // NTY1NFowgbIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNV
// SIG // BAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBEU0UgRVNO
// SIG // OjEyRTctMzA2NC02MTEyMSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAocT0PKWOczGhF0Fc
// SIG // q3cIt6nRQ6q739x0+bo1VmqECdipu/tU9xjZxqWzQ+j6
// SIG // JgHMPTX1fgvkTJgq04aVJQVc3rs7DS9i7I/ZjHSvN4sX
// SIG // m2s3p0qwNK1yyIn1gcyh1T+o87EFqPenB7pB2aiPMUad
// SIG // 7WIr4GqbeSy65/UZtiZ/hNIdpSgzsObCLXmYq4jjDx9m
// SIG // e5rYGF5sgfE4YHQeOqen6zRqXF69daWtVZJXZdImOqAQ
// SIG // CkEEsSeQZ+De7ouVo+cA5A2cxgIOp9abTD0zyYS9rqLF
// SIG // vOGI50qf9rLjWqd6joyhGF5qRs72rKuasqj8r36n5LDn
// SIG // zQWiZ7X6QvHSAySq5wIDAQABo4IBGzCCARcwHQYDVR0O
// SIG // BBYEFNhHcKiFNYsTYa+HkOhFFyTgmKcNMB8GA1UdIwQY
// SIG // MBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0YVBDQV8y
// SIG // MDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljVGltU3RhUENBXzIwMTAtMDct
// SIG // MDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYI
// SIG // KwYBBQUHAwgwDQYJKoZIhvcNAQELBQADggEBAEjs6F4n
// SIG // wxsYnF20znZuNwwfXWMcDV2kI9IVtM7QQAnlm1+s8Xnt
// SIG // cO0yXl0MdSH089QViQH1ZWuxwNaMWtC4hf1H+q30bxBJ
// SIG // hph6/cFhG698YhK5ZUxRNlf5nWAUhMHY++JvECwXhWN+
// SIG // wo8eExXvgAfxUJct5L36ySg2mGE010wBWACqYtAHA03B
// SIG // El2XLISfzvFGbPX69AYKzpuYe6nkNQiTZgzFRKhJULf3
// SIG // BTt3caqwCr9xbv57E+RpAAbvryIm4MV+rTZqnHCCFygC
// SIG // 4L+8wyGkQAFrV1fS8J5rLQ1GyKfHR/6ElZt7T5wj5awd
// SIG // /gtvLz57yXW7SYv8jrhE3fqy5/qhggN0MIICXAIBATCB
// SIG // 4qGBuKSBtTCBsjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoG
// SIG // A1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIERTRSBF
// SIG // U046MTJFNy0zMDY0LTYxMTIxJTAjBgNVBAMTHE1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiJQoBATAJBgUr
// SIG // DgMCGgUAAxUAOXAlixTIed1fDF3pi5yzlJn3HLeggcEw
// SIG // gb6kgbswgbgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNV
// SIG // BAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBOVFMgRVNO
// SIG // OjI2NjUtNEMzRi1DNURFMSswKQYDVQQDEyJNaWNyb3Nv
// SIG // ZnQgVGltZSBTb3VyY2UgTWFzdGVyIENsb2NrMA0GCSqG
// SIG // SIb3DQEBBQUAAgUA3iyHFTAiGA8yMDE4MDIxMjIxMzUx
// SIG // N1oYDzIwMTgwMjEzMjEzNTE3WjB0MDoGCisGAQQBhFkK
// SIG // BAExLDAqMAoCBQDeLIcVAgEAMAcCAQACAhIkMAcCAQAC
// SIG // AhkrMAoCBQDeLdiVAgEAMDYGCisGAQQBhFkKBAIxKDAm
// SIG // MAwGCisGAQQBhFkKAwGgCjAIAgEAAgMW42ChCjAIAgEA
// SIG // AgMHoSAwDQYJKoZIhvcNAQEFBQADggEBADnZe6iwkNN/
// SIG // j59PTVwcv1Hc2BDT+VlKXSY9ZYYWVqpU6dWcaQWyygRj
// SIG // a3PQDwy48yNbmCuGV2zETrqm3Zed06bcZs3KmEhkrsfs
// SIG // uWgquTcTKeng1VdCq6EY03CFh6TWSlEFHkbgnc3SU7zi
// SIG // mfm5AFiU/S6plq6ca4A80tpCRqeDfihNcQZVJG4Vm3x7
// SIG // H1cjgxayAcMxaQ4I4TmDzXbdFuosCkYFBaqAiCjMGI3C
// SIG // C0OGVJpG0wKoqKa7JIJ9Jxmlrz2LrCobs336/dtdXGdK
// SIG // nQ+Zn/0GJYSwyBq22lUVPg6koemETxHeYbfhZaCWSx5c
// SIG // GiCSKnKBPTHXJRwJkUU631QxggL1MIIC8QIBATCBkzB8
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAKyK
// SIG // Ibx60pty9AAAAAAArDANBglghkgBZQMEAgEFAKCCATIw
// SIG // GgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqG
// SIG // SIb3DQEJBDEiBCAuVEC1+/oG9ZP2g/Ewr93jBP1WMVux
// SIG // gaKVOHDGGEfOXDCB4gYLKoZIhvcNAQkQAgwxgdIwgc8w
// SIG // gcwwgbEEFDlwJYsUyHndXwxd6Yucs5SZ9xy3MIGYMIGA
// SIG // pH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMA
// SIG // AACsiiG8etKbcvQAAAAAAKwwFgQU1vRG0AOpV0Cn8G3L
// SIG // 8+Ha39EfBnswDQYJKoZIhvcNAQELBQAEggEAbghG8BsO
// SIG // nBWLgSCBzaidCxRHWcReL+UD1EV1eP28sy9svoimRrOn
// SIG // ddDUFEx6QFSOiqjGRNTcymM/yBoho3lxKvUAlAB5koQc
// SIG // sSvkvSnE7XEbWw8o3c31kCCPq2bkM/f31zz68BHbxBXj
// SIG // 3at5cQOonMZQHswRSv7QeJoMtQASLoJsuJpRmdS19vUk
// SIG // 6RufJz2YUTgaT3VUS/Ka3FFWwfjifFgieWWJFHnXKqU2
// SIG // kjN4JCSBG2IT4Z2hj2SLCxVlN5Hf8Yb2gCRuZhUBFBW6
// SIG // b7tHSkiv6QSsKtR0cAsdoQk+Du/eEKIrPzlSbQBMH9mD
// SIG // aXsRBpDQe1s9olEaiqNergcqwA==
// SIG // End signature block
