"use strict";
var path = require('path');
var fs = require('fs');
var q = require('q');
var mkdirp = require('mkdir-parents');
var sha256 = require('js-sha256').sha256;
var isElevated_1 = require('./isElevated');
var findFile_1 = require('./findFile');
var relativePath_1 = require('./relativePath');
var common_1 = require('./common');
var randomHexString_1 = require('./randomHexString');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
exports.serviceHubConfigFileName = 'servicehub.config.json';
var config = null;
var pipeToken = '$PIPE';
/**
 * Directory to search for servicehub.config.json
 * The default is __dirname. HubController sets it to process.cwd().
 */
exports.configDir = __dirname;
function getConfig(logger) {
    if (!config) {
        config = loadConfig(exports.configDir, logger);
    }
    return config;
}
exports.getConfig = getConfig;
function setConfig(cfg) {
    config = q.resolve(cfg);
}
exports.setConfig = setConfig;
function loadConfig(dir, logger, env) {
    return findFile_1.default(exports.serviceHubConfigFileName, { cwd: dir, goUp: true, nodir: true })
        .then(function (serviceHubConfigPath) {
        if (!serviceHubConfigPath) {
            throw new common_1.ServiceHubError(common_1.ErrorKind.ConfigurationError, libraryResourceStrings_1.LibraryResourceStrings.serviceHubConfigJsonNotFound(exports.serviceHubConfigFileName, dir));
        }
        if (logger) {
            logger.info(libraryResourceStrings_1.LibraryResourceStrings.loading(serviceHubConfigPath));
        }
        var result = require(serviceHubConfigPath);
        result.filePath = serviceHubConfigPath;
        if (!result.controller) {
            throw new common_1.ServiceHubError(common_1.ErrorKind.ConfigurationError, libraryResourceStrings_1.LibraryResourceStrings.noValueForProperty(exports.serviceHubConfigFileName, dir, 'controller'));
        }
        if (!result.controller.args) {
            throw new common_1.ServiceHubError(common_1.ErrorKind.ConfigurationError, exports.serviceHubConfigFileName + " in " + dir + " does not have a value for controller.args property");
        }
        result.controller = relativePath_1.expandDotRelativePaths(result.controller, path.dirname(serviceHubConfigPath), ['executable']);
        result.services = relativePath_1.expandDotRelativePaths(result.services, path.dirname(serviceHubConfigPath), ['rootDir']);
        result.hosts = relativePath_1.expandDotRelativePaths(result.hosts, path.dirname(serviceHubConfigPath), ['rootDir']);
        return getPipeName(result, logger, env)
            .then(function (pipeName) {
            pipeName = common_1.formatPipeName(pipeName);
            result.controller.pipeName = pipeName;
            result.controller.args = result.controller.args.map(function (arg) {
                return arg.replace(pipeToken, function () { return result.controller.pipeName; });
            });
            return result;
        });
    });
}
exports.loadConfig = loadConfig;
function getPipeName(config, logger, env) {
    // Use lower case SHA256 hash of a string created by concatenating following strings with pipeNameInputDelimiter
    // 1. config file path
    // 2. config file contents
    // 3. elevation status
    // 4. additional context that is not null or empty
    // 5. salt string on windows platform.
    // Elevation status and Username should be all lowercase to match with other ServiceHub clients like nodejs clients
    // (1) and (2) ensures apps that share ServiceHub config file also share the service hosts.
    // (3) ensures elevated and unelevated clients don't share ServiceHub instances.
    // (5) provides security by preventing windows users from connecting to each other's controller pipes.
    // On %nix platforms this pipename is used as a socket file name and we create this socket files under the current user's home dir.
    // As a result we automatically prevent pipe name collisions between different users as well as prevent users from accessing each other's controller pipes
    // and so don't need to include salt string in pipe name generation for *nix platforms.
    var pipeNameInputDelimiter = '//\\\\';
    var sha256Input = config.filePath;
    return q.ninvoke(fs, 'readFile', config.filePath, 'utf8')
        .then(function (data) {
        sha256Input += pipeNameInputDelimiter + data;
        return isElevated_1.default();
    })
        .then(function (elevated) {
        sha256Input += pipeNameInputDelimiter + (elevated ? 'elevated' : 'unelevated');
        if (config.controller.contextEnvironmentVariables) {
            for (var _i = 0, _a = config.controller.contextEnvironmentVariables; _i < _a.length; _i++) {
                var name_1 = _a[_i];
                var value = (env ? env[name_1] : process.env[name_1]);
                if (value) {
                    sha256Input += pipeNameInputDelimiter + value;
                }
            }
        }
        if (process.platform !== 'win32') {
            return sha256(sha256Input).toLowerCase();
        }
        return getUserSpecificSalt()
            .then(function (salt) {
            sha256Input += pipeNameInputDelimiter + salt;
            return sha256(sha256Input).toLowerCase();
        });
    });
}
var saltMaxRetryCount = 3;
function getUserSpecificSalt() {
    if (process.platform !== 'win32') {
        return q.resolve(null);
    }
    var userSaltFileDir = path.join(process.env['LocalAppData'], 'ServiceHub');
    var userSaltFilePath = path.join(userSaltFileDir, 'salt');
    var result = q.defer();
    var saltCurrentRetryCount = 0;
    function loop(error) {
        if (saltCurrentRetryCount === saltMaxRetryCount) {
            if (error) {
                return result.reject(new Error(libraryResourceStrings_1.LibraryResourceStrings.failedGetSaltString + ' ' + (error.message || error)));
            }
            else {
                return result.reject(new Error(libraryResourceStrings_1.LibraryResourceStrings.failedGetSaltString));
            }
        }
        saltCurrentRetryCount++;
        var checkSaltFileExists = q.defer();
        fs.exists(userSaltFilePath, checkSaltFileExists.resolve);
        checkSaltFileExists.promise.then(function (exists) {
            // return salt file contents if it exists
            if (exists) {
                return q.ninvoke(fs, 'readFile', userSaltFilePath, 'utf8')
                    .then(function (salt) { return result.resolve(salt); });
            }
            // try to create a new salt file
            var fd = null;
            return q.nfcall(mkdirp, userSaltFileDir)
                .then(function () { return q.ninvoke(fs, 'open', userSaltFilePath, 'wx'); })
                .then(function (fd) {
                // useCrypto API here since we use this random string as a salt string for
                // security to prevent windows users from predicting each other's controller pipes.
                return randomHexString_1.default(/* length */ 32, /* useCrypto */ true)
                    .then(function (salt) {
                    return q.ninvoke(fs, 'write', fd, salt, 'utf8')
                        .then(function () { return q.ninvoke(fs, 'close', fd); })
                        .then(function () { return result.resolve(salt); });
                });
            });
        })
            .done(function () { }, function (reason) { return loop(reason); });
    }
    loop();
    return result.promise;
}

//# sourceMappingURL=config.js.map
// SIG // Begin signature block
// SIG // MIIhtQYJKoZIhvcNAQcCoIIhpjCCIaICAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // sLeD2959m17ec5CMc+JB0fd3aISOLtEp+9/HWDEeL7ug
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbcwghWzAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggaowGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEICPN4+9dtNog
// SIG // VErb9nkK6y47jo6MAQG6f58mWpQMgjdJMD4GCisGAQQB
// SIG // gjcCAQwxMDAuoBSAEgBjAG8AbgBmAGkAZwAuAGoAc6EW
// SIG // gBRodHRwOi8vbWljcm9zb2Z0LmNvbTANBgkqhkiG9w0B
// SIG // AQEFAASCAQAT4O/746pSKMc7BsCny1Gv8b+FM7BR/6H3
// SIG // rtT5U4X4DiPmZ50H0JuABWEfYrD9UiLwjTDIU64E5NF8
// SIG // twrUqG5GgF2HODs4AJ3QVLwPGQxTSWSRffvqFqtI6Ogj
// SIG // jOr99Mu4FMbyso+BtUgKQcYS6Rgt2tnj68ZrW3Kzl8kd
// SIG // wyHpCY9MeOV96hDNR16oZzLtt6fiLWk7fm/fYAtZVrHU
// SIG // myzYN/fTIf3EcYKYfwtqpMzQUabjkTJI06kl5/zCkW7L
// SIG // hHlnLWnB8ZTlXQuynoLfJmVQcx8nkyhIaIfV5esc3zH8
// SIG // xo3Sav44l6WucbwIJDvmIRJlX3imdcGpZATBSgfVVfVz
// SIG // oYITRTCCE0EGCisGAQQBgjcDAwExghMxMIITLQYJKoZI
// SIG // hvcNAQcCoIITHjCCExoCAQMxDzANBglghkgBZQMEAgEF
// SIG // ADCCATsGCyqGSIb3DQEJEAEEoIIBKgSCASYwggEiAgEB
// SIG // BgorBgEEAYRZCgMBMDEwDQYJYIZIAWUDBAIBBQAEILvA
// SIG // Kz5n/p/TybmmTMfLx1LkuyqZ9wtaJxMCob2Sj6bCAgZa
// SIG // e2ob+ycYEjIwMTgwMjEzMDUxMjM0Ljg3WjAHAgEBgAIB
// SIG // 9KCBuKSBtTCBsjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoG
// SIG // A1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIERTRSBF
// SIG // U046N0FCNS0yREYyLURBM0YxJTAjBgNVBAMTHE1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wggg7KMIIGcTCC
// SIG // BFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsF
// SIG // ADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMp
// SIG // TWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9y
// SIG // aXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAx
// SIG // MjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
// SIG // AKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77Xxo
// SIG // SyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEw
// SIG // WbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq
// SIG // 9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSm
// SIG // XdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKx
// SIG // Xf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9
// SIG // buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn
// SIG // 9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOC
// SIG // AeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQW
// SIG // BBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3
// SIG // FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
// SIG // VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+ii
// SIG // XGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVo
// SIG // dHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9w
// SIG // cm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5o
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
// SIG // L01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYD
// SIG // VR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYI
// SIG // KwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYB
// SIG // BQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBj
// SIG // AHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZI
// SIG // hvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z
// SIG // 66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj
// SIG // +bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5
// SIG // Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgP
// SIG // F/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8
// SIG // tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/
// SIG // amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHim
// SIG // bdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl
// SIG // 5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5H
// SIG // moDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/n
// SIG // MQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL
// SIG // 2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt
// SIG // 6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN
// SIG // 4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQ
// SIG // cdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9Y
// SIG // BS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkSMIIE
// SIG // 2TCCA8GgAwIBAgITMwAAAKteQJ3uRt8sbAAAAAAAqzAN
// SIG // BgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQ
// SIG // Q0EgMjAxMDAeFw0xNjA5MDcxNzU2NTRaFw0xODA5MDcx
// SIG // NzU2NTRaMIGyMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYD
// SIG // VQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgRFNFIEVT
// SIG // Tjo3QUI1LTJERjItREEzRjElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZI
// SIG // hvcNAQEBBQADggEPADCCAQoCggEBALPmflCYoEYJsGYB
// SIG // Joo00ynJfZg1mgws3TPKA88OAtcL77vhyC5JpNPQ2dxz
// SIG // 07tFhZxd5QH1/CumYpvhgAKn8zcoRUs13ri6bvuGkO3h
// SIG // qxDyOPB3wlvPQBPuOUob0ip6HvyLAfipvJqPeQPD43DR
// SIG // rADzpsDLId101NSHhCiBrRpZUmLe7P3MxQOJTE0Hs6DU
// SIG // Hp57AcI6zWNpCZCIE5PDLZShLAQpuDfVSrUxiuS+bpEz
// SIG // 23zuzDJ8XMEt4biw1iKJISokeeLko88uGdZVyUgRJKSo
// SIG // yfVIyFLCMZKQ+mY2APmhMBpoD61pZEta8etpn3OGerZg
// SIG // H5SRXo4gvdTfDiqQyEsCAwEAAaOCARswggEXMB0GA1Ud
// SIG // DgQWBBQNx0fQHGDL6cBrlMxfBg5iuNhqpzAfBgNVHSME
// SIG // GDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNVHR8E
// SIG // TzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNUaW1TdGFQQ0Ff
// SIG // MjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEETjBMMEoG
// SIG // CCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NlcnRzL01pY1RpbVN0YVBDQV8yMDEwLTA3
// SIG // LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoG
// SIG // CCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQA/n/66
// SIG // LmHxciqtqhVmlaAES32zwkbd0OtbQDz0jHUFraGBbyR7
// SIG // DS7So4m68DYr+cjFdw56uHzeVOL9DyZfPAx2LfoY0aIQ
// SIG // qIheSypZlchfd3/+RCS4ApmEkZSvAsemKoaEsYv4kSTH
// SIG // 0G6jNr/7+LgHmm8+ae228ZthZ1StNujb8trlYqY7yG3M
// SIG // Q5omIvNEjOstRyZ108Lmm9aKnRVPk+iAIM4OLZUDU/NA
// SIG // 4BrcaVxMIddKEygvRdWC/aTB3yE7yes/OKU/MvrNBku4
// SIG // H7ybGrORsZNd4v95oRbRuDX24ZHK93Hs/f6Kw+BlNVjL
// SIG // pF4PluanIq9o8z7P3qSNqtjuEqTioYIDdDCCAlwCAQEw
// SIG // geKhgbikgbUwgbIxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAK
// SIG // BgNVBAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBEU0Ug
// SIG // RVNOOjdBQjUtMkRGMi1EQTNGMSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiUKAQEwCQYF
// SIG // Kw4DAhoFAAMVAMnsu0gtNdmUvraO9yapMW6Kh44yoIHB
// SIG // MIG+pIG7MIG4MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYD
// SIG // VQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgTlRTIEVT
// SIG // TjoyNjY1LTRDM0YtQzVERTErMCkGA1UEAxMiTWljcm9z
// SIG // b2Z0IFRpbWUgU291cmNlIE1hc3RlciBDbG9jazANBgkq
// SIG // hkiG9w0BAQUFAAIFAN4shf0wIhgPMjAxODAyMTIyMTMw
// SIG // MzdaGA8yMDE4MDIxMzIxMzAzN1owdDA6BgorBgEEAYRZ
// SIG // CgQBMSwwKjAKAgUA3iyF/QIBADAHAgEAAgIKOzAHAgEA
// SIG // AgIZ3DAKAgUA3i3XfQIBADA2BgorBgEEAYRZCgQCMSgw
// SIG // JjAMBgorBgEEAYRZCgMBoAowCAIBAAIDFuNgoQowCAIB
// SIG // AAIDB6EgMA0GCSqGSIb3DQEBBQUAA4IBAQAy2pupM52Y
// SIG // UMx7S4S1k9QqReQZ5jTbXt7b1mbicOKiKUZSlYuhJiXq
// SIG // PKB1/5MpZjBc0I7n6Nl+Rd+bf3Sl/t2cY97/u5HhgcZF
// SIG // 3lZ6gJ5iFvLhWj1M9Q9cRzagiDmjp+9+Si4YprCOZBYR
// SIG // kjJ4gTA3FMZf8YyQfxt6hOgUS1V7mJySwuRBZcxgUS2I
// SIG // ACy/5F9XkfH+plMMdWKrgsZS4G3GrKbPwZH+IqZ9BRG8
// SIG // L14fwrtlO8B8mSW/xBYzGFDSMR+pSIJihlrEEaVQ0Ooi
// SIG // m6deUmm0ZB527y7zz6Kj4/Kxb7mxlaJ7EpqdJordwyFH
// SIG // SKisibo/6oYnTYelYVGGmJ/2MYIC9TCCAvECAQEwgZMw
// SIG // fDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAACr
// SIG // XkCd7kbfLGwAAAAAAKswDQYJYIZIAWUDBAIBBQCgggEy
// SIG // MBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAvBgkq
// SIG // hkiG9w0BCQQxIgQgXwVkm2KbhVXILOFdNq6nw6DBWMgc
// SIG // dHSbV1MNHP8Ty8QwgeIGCyqGSIb3DQEJEAIMMYHSMIHP
// SIG // MIHMMIGxBBTJ7LtILTXZlL62jvcmqTFuioeOMjCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAAq15Ane5G3yxsAAAAAACrMBYEFISL+VoMs/YukhtV
// SIG // tzLxKDWaTG63MA0GCSqGSIb3DQEBCwUABIIBAJ2OI54a
// SIG // SkvIT+pT3g5lGviHd5yAiVv4i+xX+lNSYtOvh0Cscd8x
// SIG // XJW220OT4WNHoYqEV+GfM4EFFEfohTT8jZJpBmPP81YF
// SIG // dcvj1AYy/G43y+p+uoa1OWtYgIl/zJZUX/44eWVyu+NO
// SIG // wck2Aa4uFb+oRzJvgoCdxxI4UMzd9t1RyL1j9X4QdAHD
// SIG // dBmG8/1xY+yQ9q01vbaQ+WTdcSSFxSmhih7eHO+XRrJL
// SIG // HyEDXfJyqXNRVN+QxhqnWjeeGVVZdXZFGqCkm7NDDfdE
// SIG // NeoTRBB2O65tGg/mIYgtPuOEYrudZICEM/sFIWTRq9/Q
// SIG // L2RoDC5nFxhQ94agLDai4rck7R4=
// SIG // End signature block
