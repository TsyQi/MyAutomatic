"use strict";
var q = require('q');
var q_1 = require('q');
var path = require('path');
var cp = require('child_process');
var os = require('os');
var vscode_jsonrpc_1 = require('vscode-jsonrpc');
var common_1 = require('./common');
var config_1 = require('./config');
var exitCode_1 = require('./exitCode');
var logger_1 = require('./logger');
var connect_1 = require('./connect');
var ec = require('errno-codes');
var debugController = false; // Set this to true to start controller in debug mode (with --inspect-brk Node arg)
var connectTimeoutMs = debugController ? 100000000 : 5000;
var ControllerConnection = (function () {
    function ControllerConnection(options) {
        this.options = options;
        this.connectCts = new vscode_jsonrpc_1.CancellationTokenSource();
        this.options = options || {};
        this.options.clientName = this.options.clientName || 'hubControllerLookup';
        this.options.logger = this.options.logger || new logger_1.Logger(this.options.clientName);
        this.options.getConfig = this.options.getConfig || config_1.getConfig;
        this.options.getPipeName = this.options.getPipeName || common_1.getLocationServicePipeName;
        this.pipeName = this.options.getPipeName();
        this.deferredControllerExitCode = q_1.defer();
        this.controllerExitCode = this.deferredControllerExitCode.promise;
    }
    ControllerConnection.connect = function (options) {
        var connection = new ControllerConnection(options);
        return connection.connectImpl();
    };
    ControllerConnection.prototype.connectImpl = function () {
        var _this = this;
        var streamPromise;
        // If we're in ServiceHub host process, it must have environment variable 'ServiceHubLocationServicePipeName' set.
        // We use this environment to populate this.pipeName via getLocationServicePipeName().
        // If the pipe name is already known, this means we're running in context of service hub and there is no need to start another controller.
        if (this.pipeName) {
            // Since we don't start the controller, we may not know its exit code.
            this.deferredControllerExitCode.resolve(undefined);
            streamPromise = connect_1.connectWithRetries({ url: this.pipeName, timeoutMs: connectTimeoutMs });
        }
        else {
            streamPromise = this.startController();
        }
        return streamPromise
            .then(function (stream) {
            _this.stream = stream;
            _this.isConnected = true;
            return _this;
        });
    };
    ControllerConnection.prototype.startController = function () {
        var _this = this;
        return this.options.getConfig()
            .then(function (config) {
            _this.pipeName = config.controller.pipeName;
            // If we can connect immediately without starting new controller, don't bother to start it.
            var connectPromise = _this.options.dontTryConnectBeforeStartingController ? q.reject() : connect_1.connect(_this.pipeName);
            return connectPromise
                .then(function (stream) {
                // Since we could just connect and don't start the controller, we will not know its exit code.
                _this.deferredControllerExitCode.resolve(undefined);
                return stream;
            }, function (err) {
                // We could not connect. Start a new controller.
                var executable = config.controller.executable;
                var args = debugController ? ['--inspect-brk', '--nolazy'].concat(config.controller.args) : config.controller.args;
                var processOptions = {
                    cwd: config.filePath ? path.dirname(config.filePath) : undefined // Set the working directory to the directory of the servicehub.config.json file.
                };
                if (config.controller.additionalEnvironmentVariables) {
                    processOptions.env = addControllerEnv(cloneProcessEnv(), config.controller.additionalEnvironmentVariables);
                }
                // On non-windows platform node's child processes can outlive the parent by default.
                if (os.platform() === 'win32') {
                    // We want to enable our controller process to continue running after this client terminates. But on windows platform node by default
                    // creates process jobs where terminating the parent terminates all its child processes. To create a detached child process node
                    // provides a options.detached flag which lets the controller to outlive this client process. However, there's an undesirable
                    // side effect of this - child processes launched by such a "detached" controller end up with visible console windows. To get around
                    // this problem we launch the controller indirectly from a batch file. This works because node explicity uses JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK
                    // flag. So, only the immediate child processes are added to process job while their subprocesses are not. This technique enables controller
                    // to outlive this client without having the undesirable console window side effect.
                    // Node.js has an issue that cp.spawn fails on windows if both the command and the argument have spaces.
                    // https://github.com/nodejs/node-v0.x-archive/issues/25895
                    // This issue may manifest itself if the service hub is located under "Program Files", and the controller executable is also
                    // located under "Program Files", which is the most common case of the service hub layout.
                    // To work around this issue, use cmd /c call "{path to bootstrapper cmd}" "{config.controller.executable}" ...other args.
                    executable = path.join(process.env.WINDIR, 'system32', 'cmd.exe');
                    args = ['/s',
                        '/d',
                        '/c',
                        'call',
                        path.join(__dirname, 'launchController.cmd'),
                        config.controller.executable]
                        .concat(args)
                        .map(function (arg) { return arg.indexOf(' ') >= 0 ? '"' + arg + '"' : arg; });
                    processOptions.windowsVerbatimArguments = true; // Do not change quotes in the args
                }
                _this.options.logger.info("Starting Service Hub controller '" + executable + " " + args.join(' ') + "'.");
                _this.controllerProcess = cp.spawn(executable, args, processOptions);
                _this.controllerProcess.once('error', function (err) { return _this.onControllerProcessExited(0, null, err); });
                _this.controllerProcess.once('exit', function (code, signal) { return _this.onControllerProcessExited(code, signal); });
                logger_1.traceProcessOutput(_this.options.logger, _this.controllerProcess, 'HubController');
                return connect_1.connectWithRetries({ url: _this.pipeName, timeoutMs: connectTimeoutMs, cancellationToken: _this.connectCts.token })
                    .catch(function (err) {
                    throw _this.controllerError || err; // If connect fails, controller process error may provide more insights than the pipe error.
                });
            });
        });
    };
    ControllerConnection.prototype.onControllerProcessExited = function (exitCode, signal, err) {
        this.deferredControllerExitCode.resolve(exitCode);
        // Controller may exit because there is another controller running already.
        // This is expectected, not an error.
        if (exitCode === exitCode_1.default.ErrorStartingServerPipeInUse) {
            return;
        }
        // Controller can eventually exit after we have connected, e.g. due to inactivity.
        // No point in cancelling the connection in this case.
        // However, we will log an error if the exit code was not 0, or if node couldn't start the process,
        // and a warning if the controller process was killed.
        if (this.isConnected) {
            if (err) {
                this.error("Hub Controller process could not start properly: " + err.message);
            }
            else if (signal) {
                this.options.logger.warn("Hub Controller process exited with signal '" + signal + "'.");
            }
            else if (exitCode !== exitCode_1.default.Success) {
                var exitCodeMessage = "" + exitCode + (exitCode_1.default[exitCode] ? " (" + exitCode_1.default[exitCode] + ")" : '');
                this.error("Hub controller process exited with exit code " + exitCodeMessage + ".");
            }
            return;
        }
        var error;
        if (err) {
            error = new Error("Hub Controller process could not start properly: " + err.message);
            error.inner = err;
        }
        else if (signal) {
            error = new Error("Hub Controller process exited prematurely with signal '" + signal + "'.");
            error.signal = signal;
        }
        else {
            var exitCodeMessage = "" + exitCode + (exitCode_1.default[exitCode] ? " (" + exitCode_1.default[exitCode] + ")" : '');
            error = new Error("Hub Controller process exited prematurely with exit code " + exitCodeMessage + ".");
            error.exitCode = exitCode;
        }
        this.error(error.message);
        this.controllerError = error;
        // No point in trying to connect to the Hub Controller pipe if the process has exited prematurely.
        this.connectCts.cancel();
    };
    ControllerConnection.prototype.error = function (message) {
        this.options.logger.error(message);
    };
    return ControllerConnection;
}());
exports.ControllerConnection = ControllerConnection;
function cloneProcessEnv() {
    var clonedEnv = {};
    for (var env in process.env) {
        clonedEnv[env] = process.env[env];
    }
    return clonedEnv;
}
function addControllerEnv(targetEnv, controllerEnv) {
    for (var env in controllerEnv) {
        targetEnv[env] = controllerEnv[env];
    }
    return targetEnv;
}

//# sourceMappingURL=controllerConnection.js.map
// SIG // Begin signature block
// SIG // MIIh0gYJKoZIhvcNAQcCoIIhwzCCIb8CAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // V53RG3bCr1Xu78/lv8StBjJo3a9FLcwtCLsxT1j7Daag
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFdQwghXQAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggcYwGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIJpYqsJTz9/7
// SIG // 010ChbV+2BPHuP7nzENsZTP540DSbfxeMFoGCisGAQQB
// SIG // gjcCAQwxTDBKoDCALgBjAG8AbgB0AHIAbwBsAGwAZQBy
// SIG // AEMAbwBuAG4AZQBjAHQAaQBvAG4ALgBqAHOhFoAUaHR0
// SIG // cDovL21pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEBBQAE
// SIG // ggEAUtTz7VzV4GsKZ/yVoURQ/DYWoc7olAlPDHyo0y4a
// SIG // MEv9twfBpMGTnsMpvQvYvTwb3z1Om0OUG7GqZ47K8Pev
// SIG // zT2TxfMGb9x4ggVs+Qdy0eAn9TX/lTBDRZWCt3vrDDrl
// SIG // 7mpR+t3HNkF/rGJEXIZIdqxTyUXOXAL0ZECvDtZDe9JU
// SIG // JLiwwWVXlQEgdhGu+owDvLWL2yqF45+yOCq38KYUrH5V
// SIG // uoHla7ZqD0uvpkaMKetR30X/G1euVVfmxd5K+DgTVFrw
// SIG // AUqQx4NTCfB4Kob7TJS6LID63GAeZHzNpttqInpGbC4V
// SIG // a60Zz88aQPdHHZWKviwh0j2Bpzl/46Z58EIW4KGCE0Yw
// SIG // ghNCBgorBgEEAYI3AwMBMYITMjCCEy4GCSqGSIb3DQEH
// SIG // AqCCEx8wghMbAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggE8
// SIG // BgsqhkiG9w0BCRABBKCCASsEggEnMIIBIwIBAQYKKwYB
// SIG // BAGEWQoDATAxMA0GCWCGSAFlAwQCAQUABCBSYrPmh1zs
// SIG // b5jVMiBySRE0gwoJ1TOeq20/FA1ujwuCNQIGWntS4HpV
// SIG // GBMyMDE4MDIxMzA1MTI0MS4wMzdaMAcCAQGAAgH0oIG4
// SIG // pIG1MIGyMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQL
// SIG // EwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgRFNFIEVTTjo1
// SIG // N0M4LTJEMTUtMUM4QjElMCMGA1UEAxMcTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgU2VydmljZaCCDsowggZxMIIEWaAD
// SIG // AgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGI
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNy
// SIG // b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkg
// SIG // MjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3MDEyMTQ2
// SIG // NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIB
// SIG // IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0N
// SIG // vHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvtfGhLLF/F
// SIG // w+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBE
// SIG // D/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HN
// SIG // vyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd0WET
// SIG // bijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd/Xcf
// SIG // PfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrK
// SIG // sajyeioKMfDaTgaRtogINeh4HLDpmc085y9Euqf03GS9
// SIG // pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB5jCC
// SIG // AeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVj
// SIG // OlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQM
// SIG // HgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMB
// SIG // Af8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjR
// SIG // PZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
// SIG // BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWlj
// SIG // Um9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSAB
// SIG // Af8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEF
// SIG // BQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL1BL
// SIG // SS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcC
// SIG // AjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBf
// SIG // AFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0B
// SIG // AQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Prpsz1
// SIG // Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1r
// SIG // VFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPleFzWY
// SIG // JFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCvOA8X9S95
// SIG // gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QTh
// SIG // cJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/d
// SIG // xUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQeKZt0uGc
// SIG // +R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz3
// SIG // 9L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQ
// SIG // zafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA3+cxB6ST
// SIG // OvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRy
// SIG // zR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAz
// SIG // LhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8ZQU3ghvkq
// SIG // mqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HS
// SIG // xVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8N
// SIG // oFA12u8JJxzVs341Hgi62jbb01+P3nSISRIwggTZMIID
// SIG // waADAgECAhMzAAAAqrepiP/qV8MKAAAAAACqMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTE2MDkwNzE3NTY1M1oXDTE4MDkwNzE3NTY1
// SIG // M1owgbIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsT
// SIG // A0FPQzEnMCUGA1UECxMebkNpcGhlciBEU0UgRVNOOjU3
// SIG // QzgtMkQxNS0xQzhCMSUwIwYDVQQDExxNaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0B
// SIG // AQEFAAOCAQ8AMIIBCgKCAQEAnth/e1d4+gX6o5q3kK+a
// SIG // udW2dHaRy7jOuyrOKynvX7RrdZh1KICtmI+5qvCd0rab
// SIG // R2SYxqVZqpF4+R6LefckdEbqJP5pBK6+639TUxNZ1Q/8
// SIG // +83d9gdBmxs3N9lcdpndrsfD29OtaMJQnHQORHcuLp1v
// SIG // wR3vLMc7dK7bly2PgcVHBUDASjdIk7wDmkvwjQTLQ3D7
// SIG // 6FixnaxQ57m1hPHHmwfs95pp269If6xZMYZiFnCVXvHL
// SIG // zDpH8+o/AowQu70jjKkDc08OuAxc8S+qf/pkm4wumBTA
// SIG // Rs8mTzwGI8ZPIreSDxoCGfycKc2E3oGv8P2tmKyliIOG
// SIG // lVSGtJtxQMYvNwIDAQABo4IBGzCCARcwHQYDVR0OBBYE
// SIG // FAi4ch0VJPWTAuGf0hxM06vMWcmwMB8GA1UdIwQYMBaA
// SIG // FNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRPME0w
// SIG // S6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w
// SIG // a2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0YVBDQV8yMDEw
// SIG // LTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYB
// SIG // BQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2kvY2VydHMvTWljVGltU3RhUENBXzIwMTAtMDctMDEu
// SIG // Y3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYB
// SIG // BQUHAwgwDQYJKoZIhvcNAQELBQADggEBAGCPDu4Hzhrh
// SIG // fZ95xngOnc5MpAGdamdHlxEbinLK5MF85y3jj5FnvOh0
// SIG // ej/K6UYkAD+hzvB+T9L0Gn30djgdFDYdpdmJb8rFUxTv
// SIG // EywgApXRCnnF0u5tPD+RRum5Ut7fXOKcpE1Rah3C6ZNN
// SIG // RnIWJvmE/5N33egDPVT8wgSgX4+HvVV0mulkrLDkGspc
// SIG // OyAfC1VYCLDDy6e8WSxNQpHtW7MwLpKnk45OgAyuqXkx
// SIG // 7FKRfJUQr3/BziPbD5nMasPE9CwfdWSCLKDYDgf3mg5l
// SIG // qFyVgZx+WO5585EhrdvNLL+1iHL+BhudX3YPdjKIrlI8
// SIG // bTkuzAZOJEktL6lmANb8aCahggN0MIICXAIBATCB4qGB
// SIG // uKSBtTCBsjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoGA1UE
// SIG // CxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIERTRSBFU046
// SIG // NTdDOC0yRDE1LTFDOEIxJTAjBgNVBAMTHE1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFNlcnZpY2WiJQoBATAJBgUrDgMC
// SIG // GgUAAxUAnJzFa5jMp8GtRyDs00T8zm3Q6gOggcEwgb6k
// SIG // gbswgbgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsT
// SIG // A0FPQzEnMCUGA1UECxMebkNpcGhlciBOVFMgRVNOOjI2
// SIG // NjUtNEMzRi1DNURFMSswKQYDVQQDEyJNaWNyb3NvZnQg
// SIG // VGltZSBTb3VyY2UgTWFzdGVyIENsb2NrMA0GCSqGSIb3
// SIG // DQEBBQUAAgUA3iyE9DAiGA8yMDE4MDIxMjIxMjYxMloY
// SIG // DzIwMTgwMjEzMjEyNjEyWjB0MDoGCisGAQQBhFkKBAEx
// SIG // LDAqMAoCBQDeLIT0AgEAMAcCAQACAggSMAcCAQACAhks
// SIG // MAoCBQDeLdZ0AgEAMDYGCisGAQQBhFkKBAIxKDAmMAwG
// SIG // CisGAQQBhFkKAwGgCjAIAgEAAgMW42ChCjAIAgEAAgMe
// SIG // hIAwDQYJKoZIhvcNAQEFBQADggEBAFn0G4abyamX22va
// SIG // zA/PIF5bzgcT3/8qkxDHfkDpnIheueu4Uzgahv09eIQ5
// SIG // dAqDt8wwgFtg/4r+J9ELAxBOyL5ER4/KbA+eGIpcplp1
// SIG // ouyOZ653HrkrZXrD2gVHWoD0X2s0NI00JOxU71jjhCq5
// SIG // HmMGBVKqT09L5t61CeI9oDG+21FvcpMUEI/MiqOs5HbK
// SIG // bIEHp2lnxD4cGUKnpzDw+wytem5Wh5qb1I1qaO1ZNvAR
// SIG // 3GdAGoYtX4/nAKMjnhBqrSrF+lYziMVYXBNEjqouwp22
// SIG // 4AVEnuRmow6OfrVNBK/i+glM7gzDGSUSWJgXLzFl372U
// SIG // LX5rLtEi7svQ3OWRux4xggL1MIIC8QIBATCBkzB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAKq3qYj/
// SIG // 6lfDCgAAAAAAqjANBglghkgBZQMEAgEFAKCCATIwGgYJ
// SIG // KoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3
// SIG // DQEJBDEiBCAdkmZbQ3GAK3dmJIHj+wa0g4LZ/xuiUUAx
// SIG // w2CmHN9/vDCB4gYLKoZIhvcNAQkQAgwxgdIwgc8wgcww
// SIG // gbEEFJycxWuYzKfBrUcg7NNE/M5t0OoDMIGYMIGApH4w
// SIG // fDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAACq
// SIG // t6mI/+pXwwoAAAAAAKowFgQU57Ct2MPHD29ki2TNTNTo
// SIG // DSaz/8EwDQYJKoZIhvcNAQELBQAEggEAXhq7va3tNDuw
// SIG // O1wjR9CDFvFjX9ej7p1yzLBZZpWo+dExV9fxy5hIl32S
// SIG // UmHeFH1xkkjSXtpPjBMoDCbePVriqQidjuTVDcPL1z05
// SIG // lkMbfCh/syLsJivrgZqb+zcsF6zOsTR6Lz9q9BJ+wGYU
// SIG // XeM7w9/0EBYosPtJu5az82wzAad8Jgdf74NiboNflrBe
// SIG // 4BLIjYLNbuog7Vw8kijvNQbFMRYGgGx2BN36AC1A0DaV
// SIG // aEXkMM3tZEMixkTihmgDB9rtRIxYvxyYyXPvHa7zETko
// SIG // +HBgRYdGiPHoq5D/wqoQ0E6UfaHwyALRFVXx659eZVLR
// SIG // k9X/PaFPNLxRZJDk6rtRSw==
// SIG // End signature block
