"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var q = require('q');
var e = require('events');
var sm = require('./serviceManager');
var c = require('./common');
var jsonRpc_1 = require('./jsonRpc');
var log = require('./logger');
var exitCode_1 = require('./exitCode');
var serviceModuleInfo_1 = require('./serviceModuleInfo');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
var connect_1 = require('./connect');
var hostLogPrefix = 'hubHostNode';
var Host = (function (_super) {
    __extends(Host, _super);
    function Host(settings) {
        var _this = this;
        _super.call(this);
        this.pid = process.pid;
        if (!settings) {
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variablesAreNotDefined('hostSettings'));
        }
        this.settings = settings;
        this.logger = settings.logger || new log.Logger(hostLogPrefix);
        this.logger.info(libraryResourceStrings_1.LibraryResourceStrings.startingHubHost(settings.hostId, settings.controllerPipeName));
        this.endPoint = connect_1.connect(settings.controllerPipeName)
            .then(function (stream) { return jsonRpc_1.JsonRpcConnection.attach(stream, _this.logger, _this, [
            'getHostId',
            'startService',
            'exit',
        ]); });
        this.serviceManager = new sm.ServiceManager(this.logger);
        this.serviceManager.on(sm.ServiceManager.ServicesStartedEvent, this.onServiceManagerServicesStarted.bind(this));
        this.serviceManager.on(sm.ServiceManager.ServicesEndedEvent, this.onServiceManagerServicesEnded.bind(this));
    }
    Host.prototype.getHostId = function () {
        return this.settings.hostId;
    };
    Host.prototype.startService = function (info) {
        var _this = this;
        if (this.shutdown) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.startServiceRequestRejected(info.name);
            this.logger.error(message);
            return q.reject(new Error(message));
        }
        this.logger.info(libraryResourceStrings_1.LibraryResourceStrings.startServiceRequestReceived(info.name));
        var smi = new serviceModuleInfo_1.ServiceModuleInfo(info);
        return this.serviceManager.startService(smi)
            .then(function (serviceEndPoint) {
            _this.logger.info(libraryResourceStrings_1.LibraryResourceStrings.serviceStarted(smi.name, process.pid.toString(), serviceEndPoint));
            return serviceEndPoint;
        });
    };
    Host.prototype.exit = function () {
        var _this = this;
        if (this.shutdown) {
            this.logger.error(libraryResourceStrings_1.LibraryResourceStrings.ignoringDuplicateExit);
            return;
        }
        this.shutdown = true;
        this.logger.info(libraryResourceStrings_1.LibraryResourceStrings.exitCommandReceived);
        this.endPoint
            .then(function (e) {
            e.dispose();
            return c.serverManager.stop();
        })
            .done(function () { return _this.emitExit(exitCode_1.default.Success); }, function (reason) {
            _this.logger.error(libraryResourceStrings_1.LibraryResourceStrings.closeHubStreamFailed(reason.message || reason));
            _this.emitExit(exitCode_1.default.ShutdownError);
        });
    };
    Host.prototype.emitExit = function (exitCode) {
        this.emit('exit', exitCode);
    };
    Host.prototype.onServiceManagerServicesStarted = function (name, stream) {
        var _this = this;
        this.endPoint
            .then(function (e) {
            if (_this.shutdown) {
                _this.logger.error(libraryResourceStrings_1.LibraryResourceStrings.serviceStartedAfterHostShutDown(name));
                stream.end();
            }
            else {
                e.sendNotification('hostServicesStarted', [_this.settings.hostId]);
            }
        })
            .catch(function (reason) { return _this.logger.error(libraryResourceStrings_1.LibraryResourceStrings.notifyHubControllerForServicesStartedFailed(reason.message || reason)); })
            .done();
    };
    Host.prototype.onServiceManagerServicesEnded = function () {
        var _this = this;
        this.endPoint
            .then(function (e) {
            if (!_this.shutdown) {
                e.sendNotification('hostServicesEnded', [_this.settings.hostId]);
            }
        })
            .catch(function (reason) { return _this.logger.error(libraryResourceStrings_1.LibraryResourceStrings.notifyHubControllerForServicesStartedFailed(reason.message || reason)); })
            .done();
    };
    return Host;
}(e.EventEmitter));
exports.Host = Host;

//# sourceMappingURL=host.js.map
// SIG // Begin signature block
// SIG // MIIhrwYJKoZIhvcNAQcCoIIhoDCCIZwCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // p/pGvSPtMaJnW124Ly9R5K7gh79YePMogcD5bEakia+g
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbEwghWtAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggaYwGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIOsUe4FsZm09
// SIG // FS9aZxeDMsNVPA4duMPe6dRMYBMnb2XEMDoGCisGAQQB
// SIG // gjcCAQwxLDAqoBCADgBoAG8AcwB0AC4AagBzoRaAFGh0
// SIG // dHA6Ly9taWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUA
// SIG // BIIBACK6SfSThzrS/2FSYp8TFkFqT5CAO9Lew/3ziRGC
// SIG // xhGUGOpTsBo3wWLgldCS7a8J73Uvz9Lg2NGNvWaeTLKQ
// SIG // 5d8JzEdSJYfhc+IaKwiazERYbrdenPOGFK3aGAg9hOnM
// SIG // dEcg0SPtF716ysVvAXtwVvUquS/0GuxWSyG1b/VCE18O
// SIG // b2M2jayfDhXu9pni+yvND7Fos8PGf1ma3bLOfhjf37Gy
// SIG // R7rZ3GuBpjyU/FcZI6pGxt84JZ6dGN8IcrX9zO4r/dLZ
// SIG // v9q5kDp1j6SN7jawi8f4JhiuaCe759PSddqArGOu5XHF
// SIG // HFWe0USsb34KNLvcRin31suEeluQOghV9xAUkzKhghND
// SIG // MIITPwYKKwYBBAGCNwMDATGCEy8wghMrBgkqhkiG9w0B
// SIG // BwKgghMcMIITGAIBAzEPMA0GCWCGSAFlAwQCAQUAMIIB
// SIG // OwYLKoZIhvcNAQkQAQSgggEqBIIBJjCCASICAQEGCisG
// SIG // AQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg0XipJ5F2
// SIG // IDbEHFRr54hmv1Kp4QFl0BgWp/tt0SACkRICBlp7er+e
// SIG // YRgTMjAxODAyMTMwNTEyMzEuNzUyWjAHAgEBgAIB9KCB
// SIG // t6SBtDCBsTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoGA1UE
// SIG // CxMDQU9DMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpD
// SIG // M0IwLTBGNkEtNDExMTElMCMGA1UEAxMcTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgU2VydmljZaCCDsgwggZxMIIEWaAD
// SIG // AgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGI
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNy
// SIG // b3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkg
// SIG // MjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3MDEyMTQ2
// SIG // NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIB
// SIG // IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0N
// SIG // vHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvtfGhLLF/F
// SIG // w+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBE
// SIG // D/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HN
// SIG // vyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd0WET
// SIG // bijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd/Xcf
// SIG // PfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrK
// SIG // sajyeioKMfDaTgaRtogINeh4HLDpmc085y9Euqf03GS9
// SIG // pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB5jCC
// SIG // AeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVj
// SIG // OlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQM
// SIG // HgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMB
// SIG // Af8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjR
// SIG // PZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
// SIG // BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWlj
// SIG // Um9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSAB
// SIG // Af8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEF
// SIG // BQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL1BL
// SIG // SS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcC
// SIG // AjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBf
// SIG // AFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0B
// SIG // AQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Prpsz1
// SIG // Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1r
// SIG // VFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPleFzWY
// SIG // JFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCvOA8X9S95
// SIG // gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QTh
// SIG // cJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/d
// SIG // xUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQeKZt0uGc
// SIG // +R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz3
// SIG // 9L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQ
// SIG // zafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA3+cxB6ST
// SIG // OvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRy
// SIG // zR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAz
// SIG // LhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8ZQU3ghvkq
// SIG // mqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HS
// SIG // xVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8N
// SIG // oFA12u8JJxzVs341Hgi62jbb01+P3nSISRIwggTYMIID
// SIG // wKADAgECAhMzAAAArYAjN2XEWiNqAAAAAACtMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTE2MDkwNzE3NTY1NVoXDTE4MDkwNzE3NTY1
// SIG // NVowgbExCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsT
// SIG // A0FPQzEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QzNC
// SIG // MC0wRjZBLTQxMTExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2UwggEiMA0GCSqGSIb3DQEB
// SIG // AQUAA4IBDwAwggEKAoIBAQDtsw3+ZRrdjbFV70cpvihU
// SIG // 4xUCwcs6tloenowDcczbSqznjVS/XqH6NQEUIvxck+9H
// SIG // mpe46mrv0eqnqiW5R1zmyWvTtAeaBvLnsjTIixh72HW1
// SIG // eGlFDNdSIoyxEBKpuyZaPr9GUho5YUgLlFp4om6pKFxx
// SIG // Qa0+g1aDJCyh1anwxb5v3PbvElanMuvpy8epJH5Rm3n6
// SIG // B2u3JgoDMKyotjO6RK0aN4OXVyuEkGg0wYB/HlFgydV+
// SIG // Ngqyqfk+tH633oT3m/FPqCYI5himKgJZcczBl/gpYnnX
// SIG // 1s5Nds//wRUB5pOYYJHTagWJLCABh9wQPTrLdqyDnRAJ
// SIG // /IcNnK5cmf2nAgMBAAGjggEbMIIBFzAdBgNVHQ4EFgQU
// SIG // ZCG6wC+s+JzHDJTl5x/JCta8/WswHwYDVR0jBBgwFoAU
// SIG // 1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljVGltU3RhUENBXzIwMTAt
// SIG // MDctMDEuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5j
// SIG // cnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEF
// SIG // BQcDCDANBgkqhkiG9w0BAQsFAAOCAQEAEoVHudSdmMR8
// SIG // ZG61qrhNU4oihtx2lXVdIo83dTxe9qVvOo0Zf7vqlDT+
// SIG // IKZqVDZPNFT/AAOVVCbzeWfv8cAY+um3MO13/2l02jOE
// SIG // EQ6Tr4EYxyVauIXWYKG0a1szo/60hhgk2CGVW+6QFcbZ
// SIG // Y+7UpNj55HrdS7JzrBa5oMAEFu81dTtQPPlhdtwB6Asf
// SIG // ZlAa3apZT0yD2MWHBEIid6jK902lrhqRxccdIHwhWHVT
// SIG // r08luuLMuHBw41phXVys42v8jNOsOD9iPyZgw3mmlXX8
// SIG // j/zmLSyUfQLRG+7Df6TB2aRGIjfXr3+Yul73d5Ndqwuv
// SIG // FFBO6WZBLznqhOMXeflcVKGCA3MwggJbAgEBMIHhoYG3
// SIG // pIG0MIGxMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQL
// SIG // EwNBT0MxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkMz
// SIG // QjAtMEY2QS00MTExMSUwIwYDVQQDExxNaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBTZXJ2aWNloiUKAQEwCQYFKw4DAhoF
// SIG // AAMVAJwY5hrfGwOIF10cxscsS5qv4TDZoIHBMIG+pIG7
// SIG // MIG4MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNB
// SIG // T0MxJzAlBgNVBAsTHm5DaXBoZXIgTlRTIEVTTjoyNjY1
// SIG // LTRDM0YtQzVERTErMCkGA1UEAxMiTWljcm9zb2Z0IFRp
// SIG // bWUgU291cmNlIE1hc3RlciBDbG9jazANBgkqhkiG9w0B
// SIG // AQUFAAIFAN4siOwwIhgPMjAxODAyMTIyMTQzMDhaGA8y
// SIG // MDE4MDIxMzIxNDMwOFowdDA6BgorBgEEAYRZCgQBMSww
// SIG // KjAKAgUA3iyI7AIBADAHAgEAAgIOODAHAgEAAgIVLTAK
// SIG // AgUA3i3abAIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgor
// SIG // BgEEAYRZCgMBoAowCAIBAAIDFuNgoQowCAIBAAIDHoSA
// SIG // MA0GCSqGSIb3DQEBBQUAA4IBAQCFz0yCeOFsUa5OiL7S
// SIG // jkX5HePJdsWaS2pw7RSbyvVrzWBjS6ywA4AC5JFUeJyN
// SIG // /KY644aW4pf6nZS8a4zoMIYC6HY5B17UrqIsNuHaBixq
// SIG // R36MZDy/83kaqsqS8d5h0RkEhs3Ow8yQo3rKTklpIQE4
// SIG // UIDoW+4txhBBCPCcrV1DazjlDWXufho8dcCUmqZWk+L3
// SIG // YCDrMu1zp/Duw7MaNIhdGwQCzZEt7chJVIn2KMczPGw0
// SIG // PWWl8x4phnPUa0zQj3UTDNLroSC85XmL68pei7Y66/DV
// SIG // MeBczX51JQ8Qr1osB/ojv5thQGZUYvB348eZhmL9Vgzo
// SIG // Ftfz26RxPKMFqd4lMYIC9TCCAvECAQEwgZMwfDELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAACtgCM3ZcRa
// SIG // I2oAAAAAAK0wDQYJYIZIAWUDBAIBBQCgggEyMBoGCSqG
// SIG // SIb3DQEJAzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0B
// SIG // CQQxIgQgst55Pzp9vHXmyK+Rg5hNLleb18rDqS7mDscN
// SIG // qEpFF3AwgeIGCyqGSIb3DQEJEAIMMYHSMIHPMIHMMIGx
// SIG // BBScGOYa3xsDiBddHMbHLEuar+Ew2TCBmDCBgKR+MHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAArYAj
// SIG // N2XEWiNqAAAAAACtMBYEFLT4e3zqiQNkv0AMplFJAHct
// SIG // Fs0NMA0GCSqGSIb3DQEBCwUABIIBAHWqfbKy41dMSAky
// SIG // RHwqTuMdZRwc0g+LzM/fqxeerzKf1wCPehRX6mSW0GNy
// SIG // J78ZNYyDltIQKQ2bO0dhkjrACVUBIO4xYHTPc3qPPxfs
// SIG // 0Eyyb+BLXYkhjU+kIFYJfCfPJZvIw8+bCq2d8n/VoLCx
// SIG // 1yf3WOrOL63oZ3BdEkourI3wg9njPV1GMA9sQomyrUh8
// SIG // ZXGWPU+PuHj3TmZsFdAq8gba/mzxxt6NKkHD8BDrg4Or
// SIG // 0o/3fwwbfb+xUUSwFPXAfFkKh65l1hEO4LdkojTuBaKo
// SIG // pXTDoCqHVVzK6FEqRhuJkoCLQJBfY2p2xuXeg79yqvA8
// SIG // 7EJbvJlrVFwtsyQ0vng=
// SIG // End signature block
