// Hub Controller
// Standalone js app that hosts ServiceHub Location Service and listens on a pipe for service requests.
// The pipe name can be provided as the first argument (process.argv[2] in node.js)
//
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var q = require('q');
var locationService_1 = require('../locationService');
var c = require('../common');
var cfg = require('../config');
var logger_1 = require('../logger');
var jsonRpc_1 = require('../jsonRpc');
var exitCode_1 = require('../exitCode');
var controllerResourceStrings_1 = require('./controllerResourceStrings');
var connect_1 = require('../connect');
var ec = require('errno-codes');
c.registerForCrashReporting(/* crashFileLogPrefix */ 'ControllerCrash');
c.setOsLocale([controllerResourceStrings_1.ControllerResourceStrings.config]);
var HubController = (function (_super) {
    __extends(HubController, _super);
    function HubController(logger, config, cleanUpOldLogsTimerId) {
        _super.call(this, logger, config);
        this.controllerCooldownMs = 10 * 1000;
        this.lastAccessTimeMs = new Date().getTime();
        // Start controller cooldown immediately, to account for the case
        // when clients starts the hub controller but don't connect to it.
        this.onLastHostDisconnected();
        this.cleanUpOldLogsTimerId = cleanUpOldLogsTimerId;
    }
    HubController.prototype.locate = function (service, clientInfo) {
        this.setLastAccessTime();
        var serviceDescriptor = typeof service === 'string' ? { name: service } : service;
        return _super.prototype.locate.call(this, serviceDescriptor, clientInfo);
    };
    HubController.prototype.exit = function (reason, exitImmediately) {
        var _this = this;
        this.logger.info(reason ? controllerResourceStrings_1.ControllerResourceStrings.exitingHubControllerWithReason(reason) : controllerResourceStrings_1.ControllerResourceStrings.exitingHubController);
        if (this.cleanUpOldLogsTimerId) {
            global.clearTimeout(this.cleanUpOldLogsTimerId);
        }
        if (this.controllerShutdownTimer) {
            global.clearTimeout(this.controllerShutdownTimer);
        }
        var promise = exitImmediately ? q.resolve([0]) : this.stop();
        promise.then(function () {
            if (process.platform !== 'win32') {
                return c.deleteUnixSocketDir();
            }
        })
            .done(function () { return process.exit(); }, function (reason) {
            _this.logger.error(controllerResourceStrings_1.ControllerResourceStrings.errorShuttingDownHosts(reason.message || reason));
            process.exit(exitCode_1.default.ShutdownError);
        });
    };
    /** Instrumentation: start heap diffing */
    HubController.prototype.startHeapDiff = function () {
        if (this.heapDiff) {
            throw new Error('Call endHeapDiff() first before calling this method.');
        }
        this.memwatch = this.memwatch || require('memwatch-next');
        this.heapDiff = new this.memwatch.HeapDiff();
    };
    /** Instrumentation: end heap diffing and return heap diff */
    HubController.prototype.endHeapDiff = function () {
        if (!this.heapDiff) {
            throw new Error('Call startHeapDiff() first before calling this method.');
        }
        var result = this.heapDiff.end();
        this.heapDiff = null;
        return result;
    };
    /** Instrumentation: run GC on Hub controller */
    HubController.prototype.runGC = function () {
        try {
            global.gc();
        }
        catch (e) {
            throw new Error('You must run Hub Controller with \'--expose-gc\' node argument');
        }
    };
    /** Instrumentation: capture heap dump */
    HubController.prototype.captureHeapDump = function (filePath) {
        var heapdump = require('heapdump');
        heapdump.writeSnapshot(filePath);
    };
    /** Instrumentation: get hub controller pid */
    HubController.prototype.getHubControllerPid = function () {
        return process.pid;
    };
    HubController.prototype.onHostConnected = function () {
        this.hostsConnected = true;
        this.setLastAccessTime();
        _super.prototype.onHostConnected.call(this);
    };
    HubController.prototype.onLastHostDisconnected = function () {
        this.hostsConnected = false;
        if (this.isInFastShutdown) {
            this.exit(controllerResourceStrings_1.ControllerResourceStrings.allExternalClientsDisconnected);
        }
        else {
            if (this.controllerShutdownTimer) {
                global.clearTimeout(this.controllerShutdownTimer);
            }
            this.controllerShutdownTimer = global.setTimeout(this.shutdownInactiveController.bind(this), this.controllerCooldownMs);
        }
        _super.prototype.onLastHostDisconnected.call(this);
    };
    ;
    HubController.prototype.setLastAccessTime = function () {
        this.lastAccessTimeMs = new Date().getTime();
    };
    HubController.prototype.shutdownInactiveController = function () {
        if (this.hostsConnected) {
            return;
        }
        var currentTime = new Date().getTime();
        var hostDebuggingOnStartup = HubController.isHostDebuggingOnStartupRequested();
        // When controller starts the host, it considers it inactive until the host starts first service. If the host is inactive for 10s or more
        // the controller will shut itself down, and the host child processes go down with it. So if a host being debugged then we should disable
        // controller shutdown on inactivity.
        if (this.lastAccessTimeMs < currentTime - this.controllerCooldownMs && !hostDebuggingOnStartup) {
            // The controller is inactive and no host has started or service located there since the cooldown begin.
            this.exit(controllerResourceStrings_1.ControllerResourceStrings.inactivity);
        }
        else {
            if (hostDebuggingOnStartup) {
                this.logger.info('Skipping controller shutdown as debugging on host startup has been requested');
            }
            // The controller is inactive but there was some service being located there during the cooldown period.
            // Start another cooldown period to account for the new service.
            this.onLastHostDisconnected();
        }
    };
    return HubController;
}(locationService_1.LocationService));
var name = 'hubController';
var logger = new logger_1.Logger(name);
if (process.argv.length !== 3) {
    console.error(controllerResourceStrings_1.ControllerResourceStrings.InvalidCommandLine(__filename));
    logger.error("Invalid command line: '" + process.argv.map(function (arg) { return arg.indexOf(' ') >= 0 ? '"' + arg + '"' : arg; }).join(' ') + "''");
    process.exit(exitCode_1.default.InvalidArgument);
}
var delayInMsecBeforeStartingLogCleanup = 5000;
var deleteLogFilesNotUsedInNumberOfDays = 7;
// set deleteLogFilesOlderThanDate to be a week old
var deleteLogFilesOlderThanDate = new Date();
deleteLogFilesOlderThanDate.setDate(deleteLogFilesOlderThanDate.getDate() - deleteLogFilesNotUsedInNumberOfDays);
var cleanUpOldLogsTimerId = logger_1.cleanUpOldLogs(delayInMsecBeforeStartingLogCleanup, deleteLogFilesOlderThanDate);
var options;
// Set the lookup directory for servicehub.config.json to be the current process directory.
// The clients must set the process working directory appropriately.
cfg.configDir = process.cwd();
cfg.getConfig(logger)
    .catch(function (err) { logErrorAndExit(err, exitCode_1.default.ConfigurationError); return null; })
    .then(function (config) {
    var controller = new HubController(logger, config, cleanUpOldLogsTimerId);
    options = {
        name: name,
        pipeName: process.argv[2],
        logger: logger,
        onErrorCb: function (e) { return retryStartServer(e, controller, logger, /* retryStartingController */ true); }
    };
    // Set location service pipe name as process-level environment variable.
    // When the location service spawns a new host, it'll pass it to the host process.
    c.setLocationServicePipeName(options.pipeName);
    startServer(options, controller, logger);
})
    .catch(function (err) { return logErrorAndExit(err, exitCode_1.default.ErrorStartingServer); })
    .done();
function retryStartServer(e, controller, logger, retryStartingController) {
    if (e.code === ec.EADDRINUSE.code) {
        // It appears another controller already running.
        if (process.platform === 'win32' || !retryStartingController) {
            logger.info("Terminating controller because it's already running. retryStartingController flag=" + retryStartingController);
            process.exit(exitCode_1.default.ErrorStartingServerPipeInUse);
        }
        options.onErrorCb = function (e) { return retryStartServer(e, controller, logger, /* retryStartingController */ false); };
        // On *nix platforms sometimes there can be a stale unix socket file that can trick us into assuming the controller is already running.
        // So, let's verify that there's really a controller running by trying to connect to it just like any client would.
        logger.info('Controller appears to be already running. Verifying it is not a stale socket file by trying to connect to it just like any client would.');
        connect_1.connect(options.pipeName)
            .then(function () {
            // Another controller is really running
            logger.info("Terminating controller because we verified it's already running");
            process.exit(exitCode_1.default.ErrorStartingServerPipeInUse);
        }, function (err) { return clearSocketFilesAndStartServer(options, controller, logger); });
    }
    else {
        logger.error("Terminating controller due to some unknown error: " + e.message);
        process.exit(exitCode_1.default.ErrorStartingServer);
    }
}
function clearSocketFilesAndStartServer(options, controller, logger) {
    if (process.platform === 'win32') {
        var errorMsg = 'clearSocketFilesAndStartServer method cannot be called on win32 platform';
        logger.error(errorMsg);
        throw new Error(errorMsg);
    }
    logger.info("Cleaning up stale socket files");
    c.deleteUnixSocketDir()
        .then(function () {
        logger.info("Attempting to start controller again");
        startServer(options, controller, logger);
    })
        .done();
}
function startServer(options, controller, logger) {
    var endPoints = [];
    c.serverManager.startService(options, function (stream) {
        // Keep a reference to the end point so it is not garbage collected.
        var endPoint = jsonRpc_1.JsonRpcConnection.attach(stream, logger, controller, [
            'locate',
            'getSessionId',
            'exit',
            // Instrumentation entry points
            'startHeapDiff',
            'endHeapDiff',
            'runGC',
            'captureHeapDump',
            'getHubControllerPid',
        ]);
        endPoints.push(endPoint);
        endPoint.onClose(function (e) {
            var index = endPoints.indexOf(endPoint);
            if (index >= 0) {
                endPoints.splice(index, 1);
            }
        });
    })
        .then(function () { return logger.info("Successfully started server on pipe " + options.pipeName); }, function (err) { return logErrorAndExit(err, exitCode_1.default.ErrorStartingServer); })
        .done();
}
function logErrorAndExit(err, exitCode) {
    exitCode = exitCode || exitCode_1.default.UncaughtException;
    var logMessage = err.stack ?
        controllerResourceStrings_1.ControllerResourceStrings.uncaughtExceptionWithStack(exitCode.toString(), err.message || err, err.stack) :
        controllerResourceStrings_1.ControllerResourceStrings.uncaughtException(exitCode.toString(), err.message || err);
    logger.error(logMessage);
    process.exit(exitCode);
}

//# sourceMappingURL=../host/HubController.js.map
// SIG // Begin signature block
// SIG // MIIhxAYJKoZIhvcNAQcCoIIhtTCCIbECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // +Hf9tnrOdKXaufAo8Oi6tI847Lh30Ajppu+P3yRqGO2g
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFcYwghXCAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggbgwGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIMGnRoMHgRHf
// SIG // xfRY0QNZy/Jm/weZfixT0lnCdSE46EWgMEwGCisGAQQB
// SIG // gjcCAQwxPjA8oCKAIABIAHUAYgBDAG8AbgB0AHIAbwBs
// SIG // AGwAZQByAC4AagBzoRaAFGh0dHA6Ly9taWNyb3NvZnQu
// SIG // Y29tMA0GCSqGSIb3DQEBAQUABIIBADNdRy6rjZdcyY27
// SIG // Q5gys0Z/IUZq4EIs5F2mpcMu21gMYXY0T3158s+V9ly6
// SIG // KMYHSC7nmUQ8gZYLCgZRK2v/7hMdEdYQdB123ZNIln1R
// SIG // tMmbx1O5It0FyioEJNpg3m9CTAJnhda+0NFi3/avk/Z7
// SIG // 2ed+fYJr3/7UDWhsoGr0Hkn0xcVNceAdlxs2qApzVBfV
// SIG // WHAiOEHyQAd8BU68gn1r60x4FlGYfUgAaLP41zThR5bu
// SIG // sWu5Est9m6x/nS0QR3UGdn1bWRz9igyPux2kNLf6Aj6m
// SIG // +q1J8Gi9sysG51eqO6ZN1BXa5cuFEvV7AMfkuZQEHHeS
// SIG // wweB7c3FWLOpivxuD3+hghNGMIITQgYKKwYBBAGCNwMD
// SIG // ATGCEzIwghMuBgkqhkiG9w0BBwKgghMfMIITGwIBAzEP
// SIG // MA0GCWCGSAFlAwQCAQUAMIIBPAYLKoZIhvcNAQkQAQSg
// SIG // ggErBIIBJzCCASMCAQEGCisGAQQBhFkKAwEwMTANBglg
// SIG // hkgBZQMEAgEFAAQg0qk5P2BIm9MVqlRUc6iSTadAe84W
// SIG // IaogYRGono72DTYCBlp7e5+tfxgTMjAxODAyMTMwNTEy
// SIG // MzMuODAxWjAHAgEBgAIB9KCBuKSBtTCBsjELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEMMAoGA1UECxMDQU9DMScwJQYDVQQL
// SIG // Ex5uQ2lwaGVyIERTRSBFU046MjEzNy0zN0EwLTRBQUEx
// SIG // JTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNl
// SIG // cnZpY2Wggg7KMIIGcTCCBFmgAwIBAgIKYQmBKgAAAAAA
// SIG // AjANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2Vy
// SIG // dGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMTAwNzAx
// SIG // MjEzNjU1WhcNMjUwNzAxMjE0NjU1WjB8MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBQQ0EgMjAxMDCCASIwDQYJKoZIhvcNAQEB
// SIG // BQADggEPADCCAQoCggEBAKkdDbx3EYo6IOz8E5f1+n9p
// SIG // lGt0VBDVpQoAgoX77XxoSyxfxcPlYcJ2tz5mK1vwFVMn
// SIG // BDEfQRsalR3OCROOfGEwWbEwRA/xYIiEVEMM1024OAiz
// SIG // Qt2TrNZzMFcmgqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQe
// SIG // dGFnkV+BVLHPk0ySwcSmXdFhE24oxhr5hoC732H8RsEn
// SIG // HSRnEnIaIYqvS2SJUGKxXf13Hz3wV3WsvYpCTUBR0Q+c
// SIG // Bj5nf/VmwAOWRH7v0Ev9buWayrGo8noqCjHw2k4GkbaI
// SIG // CDXoeByw6ZnNPOcvRLqn9NxkvaQBwSAJk3jN/LzAyURd
// SIG // XhacAQVPIk0CAwEAAaOCAeYwggHiMBAGCSsGAQQBgjcV
// SIG // AQQDAgEAMB0GA1UdDgQWBBTVYzpcijGQ80N7fEYbxTNo
// SIG // WoVtVTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAL
// SIG // BgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNV
// SIG // HSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNV
// SIG // HR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29m
// SIG // dC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJB
// SIG // dXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBM
// SIG // MEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEw
// SIG // LTA2LTIzLmNydDCBoAYDVR0gAQH/BIGVMIGSMIGPBgkr
// SIG // BgEEAYI3LgMwgYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9QS0kvZG9jcy9DUFMvZGVm
// SIG // YXVsdC5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcA
// SIG // YQBsAF8AUABvAGwAaQBjAHkAXwBTAHQAYQB0AGUAbQBl
// SIG // AG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAAfmiFEN
// SIG // 4sbgmD+BcQM9naOhIW+z66bM9TG+zwXiqf76V20ZMLPC
// SIG // xWbJat/15/B4vceoniXj+bzta1RXCCtRgkQS+7lTjMz0
// SIG // YBKKdsxAQEGb3FwX/1z5Xhc1mCRWS3TvQhDIr79/xn/y
// SIG // N31aPxzymXlKkVIArzgPF/UveYFl2am1a+THzvbKegBv
// SIG // SzBEJCI8z+0DpZaPWSm8tv0E4XCfMkon/VWvL/625Y4z
// SIG // u2JfmttXQOnxzplmkIz/amJ/3cVKC5Em4jnsGUpxY517
// SIG // IW3DnKOiPPp/fZZqkHimbdLhnPkd/DjYlPTGpQqWhqS9
// SIG // nhquBEKDuLWAmyI4ILUl5WTs9/S/fmNZJQ96LjlXdqJx
// SIG // qgaKD4kWumGnEcua2A5HmoDF0M2n0O99g/DhO3EJ3110
// SIG // mCIIYdqwUB5vvfHhAN/nMQekkzr3ZUd46PioSKv33nJ+
// SIG // YWtvd6mBy6cJrDm77MbL2IK0cs0d9LiFAR6A+xuJKlQ5
// SIG // slvayA1VmXqHczsI5pgt6o3gMy4SKfXAL1QnIffIrE7a
// SIG // KLixqduWsqdCosnPGUFN4Ib5KpqjEWYw07t0MkvfY3v1
// SIG // mYovG8chr1m1rtxEPJdQcdeh0sVV42neV8HR3jDA/czm
// SIG // TfsNv11P6Z0eGTgvvM9YBS7vDaBQNdrvCScc1bN+NR4I
// SIG // uto229Nfj950iEkSMIIE2TCCA8GgAwIBAgITMwAAAK81
// SIG // j//TIkV2SwAAAAAArzANBgkqhkiG9w0BAQsFADB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0xNjA5MDcx
// SIG // NzU2NTZaFw0xODA5MDcxNzU2NTZaMIGyMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgRFNFIEVTTjoyMTM3LTM3QTAtNEFBQTEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
// SIG // ggEBAJPoQIYOGstx8AMNpo+k52ES0GHqkGqVVrq3oE1L
// SIG // KWTYUZo7XWeTrYjuQ9TdXdTvEnGfbT/16pcqyDq3VRHU
// SIG // pzO1dERNmE3heqXH3akszIgfCG8+8c+E5eFsD+fD7jmB
// SIG // iykzJ1n4T86lm40GA67e1ElTYuNZJ/XoCky8xuAfV93R
// SIG // m/9OB9BsYJiXga5hDpB55Asoy/m9EGs8wXMREF7i41L2
// SIG // P2F65EWvdUGtSwy16TQaETdwoD/orCu0B5O+roPJ2eJ0
// SIG // kXBhsBV6RPSEkQ382yQzZgDMIIvuwWg9cR+ffQvl0mgn
// SIG // hp5psqqzHEoXVPkHaf53b8c/xpzS8VJQq8eXOKMCAwEA
// SIG // AaOCARswggEXMB0GA1UdDgQWBBR9HlXGMYraYAsGZrAU
// SIG // 2Wr8exL24TAfBgNVHSMEGDAWgBTVYzpcijGQ80N7fEYb
// SIG // xTNoWoVtVTBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYI
// SIG // KwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Rp
// SIG // bVN0YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8E
// SIG // AjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3
// SIG // DQEBCwUAA4IBAQBqyACGePsMQpwQ1vcorA+Eaov83Vvq
// SIG // H1pARKkuE1+LGkl2aRIq5oTm+Oa60Y88LintSzUg4IG6
// SIG // +tWDFxWbdVOaPH9jkMugCGQv82HzSvCK8EVOiI08a5CN
// SIG // AOJrI0mseWcg52UzrvrkIsFCDXVlD9SdzR7jMN6sWoYa
// SIG // woWHRyTufDzicjg5GG48dY3mAdnHd3Cj2vpZuYlAWZG2
// SIG // xfK7hS2d1Rh/45Mbcn+xCa0QA67FJSbnzaN+orW49UrV
// SIG // NBR8j/KCwzYI0jCINnXXCBlrYheR0wNCsnOM0RWodSms
// SIG // /4BFC0Wx3XL2WTW5UgbO5oh//y2srNH84KPP/Bw5H9vQ
// SIG // ENPboYIDdDCCAlwCAQEwgeKhgbikgbUwgbIxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xDDAKBgNVBAsTA0FPQzEnMCUGA1UE
// SIG // CxMebkNpcGhlciBEU0UgRVNOOjIxMzctMzdBMC00QUFB
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNloiUKAQEwCQYFKw4DAhoFAAMVANjqrBUtby6l
// SIG // Lab9AgNQ4oAb/k4joIHBMIG+pIG7MIG4MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJzAlBgNVBAsT
// SIG // Hm5DaXBoZXIgTlRTIEVTTjoyNjY1LTRDM0YtQzVERTEr
// SIG // MCkGA1UEAxMiTWljcm9zb2Z0IFRpbWUgU291cmNlIE1h
// SIG // c3RlciBDbG9jazANBgkqhkiG9w0BAQUFAAIFAN4sgsQw
// SIG // IhgPMjAxODAyMTIyMTE2NTJaGA8yMDE4MDIxMzIxMTY1
// SIG // MlowdDA6BgorBgEEAYRZCgQBMSwwKjAKAgUA3iyCxAIB
// SIG // ADAHAgEAAgIIUDAHAgEAAgIZEjAKAgUA3i3URAIBADA2
// SIG // BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMBoAow
// SIG // CAIBAAIDFuNgoQowCAIBAAIDHoSAMA0GCSqGSIb3DQEB
// SIG // BQUAA4IBAQA7qQqr+iefXkzIk68SeMYvV1LkJ+3aEHZS
// SIG // uUOTyRsCRuL8Sv2BnJGEiauOtuPSCyNrxLvLpLvD5kE6
// SIG // o9vw41k7DXNCs6nLaM2M+4cqetW00tGmvM16IamJI/H3
// SIG // CHXRsXUhyHmn1r9b9H5Yv0SzKeyvd0aXjTFvQg3zgHHX
// SIG // w+5JqhciEVl0ZWneykRo+K7HksNz/cREZ+4jHize3WGA
// SIG // Of0HmfSAE/SLC4HXATej3ylDzSXAeGLiw5KGOBYksayN
// SIG // ytgG0wjjLEYqvl71q0dWQyG8ul8ZTsLpPVm4a+KQypiC
// SIG // sM8+gHuPJo1GT+IeRPn9laOKAIqNBaMU8cOuO2SC+Btm
// SIG // MYIC9TCCAvECAQEwgZMwfDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // UENBIDIwMTACEzMAAACvNY//0yJFdksAAAAAAK8wDQYJ
// SIG // YIZIAWUDBAIBBQCgggEyMBoGCSqGSIb3DQEJAzENBgsq
// SIG // hkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQgsbUtcNkF
// SIG // bXPaf+s8cdohsfnsu9QpVYJ7s6gVoLAA92gwgeIGCyqG
// SIG // SIb3DQEJEAIMMYHSMIHPMIHMMIGxBBTY6qwVLW8upS2m
// SIG // /QIDUOKAG/5OIzCBmDCBgKR+MHwxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFBDQSAyMDEwAhMzAAAArzWP/9MiRXZLAAAAAACv
// SIG // MBYEFB6p7FYw6Np2UNJTx6YH0wln50b2MA0GCSqGSIb3
// SIG // DQEBCwUABIIBAFeoJQ2S61wAnfMXvKPWMpEHoI5JHyzd
// SIG // 12Cjr/L+TCtoAgGrHNTjWIh1FD50hgzLYtDqSf00Gtrn
// SIG // XVsQ+utJovK+sf7QZ5odXhrY5kaZYTXuN8OC8NO+4rnj
// SIG // fYvIM9t7AQmOpruFfJkeZW2/z/ildRogeLER5adXycu3
// SIG // hYzGxTQ84c/f4854cCRL9k2GkCi2cO7Lsm0uCIbDIREO
// SIG // BOlG1jXOnPZ5RlVwBWLwPWnpPWqQAUD+c3ycdItcTmo0
// SIG // uK5uo4/UVNF7Q9+nLOf1Bzv4xX9Z4GTIycGVuGEVtjLb
// SIG // OmFkKuh4bAcfhG1amRGEImRK+Q8l0cAFNEnXskI+heIV8ag=
// SIG // End signature block
