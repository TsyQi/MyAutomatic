"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var fs = require('fs');
var q_1 = require('q');
var logger_1 = require('./logger');
var connect_1 = require('./connect');
var hubLookup_1 = require('./hubLookup');
var config_1 = require('./config');
var common_1 = require('./common');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
var ec = require('errno-codes');
var requestServiceMaxRetries = 40;
var requestServiceRetryDelayMs = 100;
var HubClient = (function () {
    function HubClient(clientName, logger, serviceHubConfigFilePath) {
        var _this = this;
        this.clientName = clientName || 'client';
        this._logger = logger || new logger_1.Logger(this.clientName);
        if (!serviceHubConfigFilePath) {
            this.hubLookup = new hubLookup_1.HubLookup();
        }
        else {
            if (!path.isAbsolute(serviceHubConfigFilePath)) {
                throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.serviceHubConfigFilePathIsNotAbsolute(serviceHubConfigFilePath));
            }
            if (path.basename(serviceHubConfigFilePath) !== config_1.serviceHubConfigFileName) {
                throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.serviceHubConfigFileNameIsIncorrect(serviceHubConfigFilePath));
            }
            if (!fs.existsSync(serviceHubConfigFilePath)) {
                throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.serviceHubConfigFileDoesNotExist(serviceHubConfigFilePath));
            }
            this.hubLookup = new hubLookup_1.HubLookup({
                getConfig: function () { return config_1.loadConfig(path.dirname(serviceHubConfigFilePath), _this._logger); }
            });
        }
        this.locationServiceFactory = this.hubLookup.getLocationService.bind(this.hubLookup);
    }
    Object.defineProperty(HubClient.prototype, "logger", {
        get: function () {
            return this._logger;
        },
        enumerable: true,
        configurable: true
    });
    ;
    HubClient.prototype.getSessionId = function () {
        this.throwIfDisposed();
        return this.locationServiceFactory()
            .then(function (ls) { return ls.getSessionId(); });
    };
    HubClient.prototype.requestService = function (service) {
        var _this = this;
        if (!service) {
            throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('service'));
        }
        this.throwIfDisposed();
        var serviceDescriptor = typeof service === 'string' ? { name: service } : service;
        return this.requestServiceWithRetries(serviceDescriptor, requestServiceMaxRetries)
            .then(function (serviceConnection) {
            _this.startClientWatch(serviceConnection.clientWatch);
            return serviceConnection.stream;
        });
    };
    HubClient.prototype.disposeAsync = function () {
        this.disposed = true;
        return this.hubLookup.disposeAsync();
    };
    HubClient.prototype.requestServiceWithRetries = function (serviceDescriptor, retries) {
        var _this = this;
        var loc = null;
        return this.locationServiceFactory()
            .then(function (ls) { return ls.locate(serviceDescriptor, { clientName: _this.clientName, pid: process.pid }); })
            .then(function (location) {
            loc = location;
            return connect_1.connect(location.location)
                .then(function (stream) { return { stream: stream, clientWatch: location.clientWatch }; });
        })
            .catch(function (err) {
            // If the service host has shut down when we're requesting a service there,
            // request the service again.
            if (err.code === ec.ENOENT.code && retries > 1) {
                // Delay the next attempt to give host enough time to start the service.
                return q_1.delay(requestServiceRetryDelayMs)
                    .then(function () { return _this.requestServiceWithRetries(serviceDescriptor, retries - 1); });
            }
            if (loc !== null) {
                _this.logger.error("Attempted connection to service '" + _this.clientName + "' at '" + loc.location + "'");
            }
            else {
                _this.logger.error("Attempted connection to service '" + _this.clientName + "': location is null");
            }
            throw err;
        });
    };
    HubClient.prototype.throwIfDisposed = function () {
        if (this.disposed) {
            throw new common_1.ServiceHubError(common_1.ErrorKind.ObjectDisposed);
        }
    };
    HubClient.prototype.startClientWatch = function (clientWatch) {
        var _this = this;
        if (clientWatch && !HubClient.clientWatchStreams[clientWatch]) {
            HubClient.clientWatchStreams[clientWatch] = connect_1.connectWithRetries({ url: clientWatch, timeoutMs: 1000 })
                .then(function (stream) {
                _this.logger.info("Connected to Hub Controller's client watch '" + clientWatch + "'");
                stream.once('end', function () { delete HubClient.clientWatchStreams[clientWatch]; });
                return stream;
            }, function (err) {
                _this.logger.error("Error connecting to Hub Controller's client watch '" + clientWatch + "': " + err.message);
                delete HubClient.clientWatchStreams[clientWatch];
                return null;
            });
        }
    };
    HubClient.clientWatchStreams = {};
    return HubClient;
}());
exports.HubClient = HubClient;
var HubClientInternal = (function (_super) {
    __extends(HubClientInternal, _super);
    function HubClientInternal(clientName, logger, locationServiceFactory) {
        _super.call(this, clientName, logger);
        this.locationServiceFactory = locationServiceFactory;
    }
    return HubClientInternal;
}(HubClient));
exports.HubClientInternal = HubClientInternal;
var HubClientInternal2 = (function (_super) {
    __extends(HubClientInternal2, _super);
    function HubClientInternal2(clientName, logger, serviceHubConfigFilePath) {
        _super.call(this, clientName, logger, serviceHubConfigFilePath);
    }
    HubClientInternal2.prototype.getConfig = function () {
        return this.hubLookup.getConfig();
    };
    HubClientInternal2.prototype.stopHubController = function () {
        return this.hubLookup.stopHubController();
    };
    HubClientInternal2.prototype.exit = function () {
        var _this = this;
        var exitCode;
        return this.stopHubController()
            .then(function (code) {
            exitCode = code;
            return _this.disposeAsync();
        })
            .catch(function (err) {
            if (err.code !== ec.ENOENT.code) {
                throw err;
            }
        })
            .then(function () { return exitCode; });
    };
    HubClientInternal2.prototype.startHeapDiff = function () {
        return this.locationServiceFactory()
            .then(function (ls) { return ls.startHeapDiff(); });
    };
    HubClientInternal2.prototype.endHeapDiff = function () {
        return this.locationServiceFactory()
            .then(function (ls) { return ls.endHeapDiff(); });
    };
    HubClientInternal2.prototype.runGC = function () {
        return this.locationServiceFactory()
            .then(function (ls) { return ls.runGC(); });
    };
    HubClientInternal2.prototype.captureHeapDump = function (filePath) {
        return this.locationServiceFactory()
            .then(function (ls) { return ls.captureHeapDump(filePath); });
    };
    HubClientInternal2.prototype.getHubControllerPid = function () {
        return this.locationServiceFactory()
            .then(function (ls) { return ls.getHubControllerPid(); });
    };
    return HubClientInternal2;
}(HubClient));
exports.HubClientInternal2 = HubClientInternal2;

//# sourceMappingURL=hubClient.js.map
// SIG // Begin signature block
// SIG // MIIhuQYJKoZIhvcNAQcCoIIhqjCCIaYCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 8MDNXKwHoags/7t1MW1F9+/dUTGJ0iDWhm/qRRBRe+Cg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbswghW3AgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggbAwGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIFMUurffXpoP
// SIG // 5rftaPkBS/JJDcmx7v/D+0nMRQJU6FIXMEQGCisGAQQB
// SIG // gjcCAQwxNjA0oBqAGABoAHUAYgBDAGwAaQBlAG4AdAAu
// SIG // AGoAc6EWgBRodHRwOi8vbWljcm9zb2Z0LmNvbTANBgkq
// SIG // hkiG9w0BAQEFAASCAQCmUvF4g8NzN+BElafiM0dBtFkv
// SIG // cYUMAj6++H8sqmR0jf/v8WylbAPTHuTpm/wzWof+GPdv
// SIG // 9pwcraWvmB9K53l+geB7/v+ar3dnCn6Es3HFfvzpSevm
// SIG // 2vlagNaNmgjGNEUcG00J7K413yT8zJIOWq3ctntu3fqD
// SIG // r/0VZaH1oZ3Q/fpzRhem9pkxS/t1C3YBvx+uJnhjU+Is
// SIG // j2uH3hFPksSZA5ByzXU9LIGdXBD7AbzwejqFMCfquQ2S
// SIG // 4SAWRRNZOoBTfXuLF8jX/acs+IVjR3LmFCi0oRpTQIoc
// SIG // 1ylTgeICBjZYHfUnfNSxW5nOBPvDwy5mKkfCq7bL2l67
// SIG // fGxRMLCPoYITQzCCEz8GCisGAQQBgjcDAwExghMvMIIT
// SIG // KwYJKoZIhvcNAQcCoIITHDCCExgCAQMxDzANBglghkgB
// SIG // ZQMEAgEFADCCATsGCyqGSIb3DQEJEAEEoIIBKgSCASYw
// SIG // ggEiAgEBBgorBgEEAYRZCgMBMDEwDQYJYIZIAWUDBAIB
// SIG // BQAEINOSejxDcUwHMBQrMp48b8erBk5Tmr342Awti/nX
// SIG // wM/DAgZae1ohO1EYEzIwMTgwMjEzMDUxMjMxLjY5Nlow
// SIG // BwIBAYACAfSggbekgbQwgbExCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xDDAKBgNVBAsTA0FPQzEmMCQGA1UECxMdVGhhbGVz
// SIG // IFRTUyBFU046OTZGRi00QkM1LUE3REMxJTAjBgNVBAMT
// SIG // HE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wggg7I
// SIG // MIIGcTCCBFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG
// SIG // 9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAG
// SIG // A1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUg
// SIG // QXV0aG9yaXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcN
// SIG // MjUwNzAxMjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQ
// SIG // Q0EgMjAxMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
// SIG // AQoCggEBAKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoA
// SIG // goX77XxoSyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3O
// SIG // CROOfGEwWbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcm
// SIG // gqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHP
// SIG // k0ySwcSmXdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqv
// SIG // S2SJUGKxXf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOW
// SIG // RH7v0Ev9buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnN
// SIG // POcvRLqn9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0C
// SIG // AwEAAaOCAeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0G
// SIG // A1UdDgQWBBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkr
// SIG // BgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMC
// SIG // AYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV
// SIG // 9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEug
// SIG // SaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtp
// SIG // L2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUF
// SIG // BzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // L2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNy
// SIG // dDCBoAYDVR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMw
// SIG // gYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0w
// SIG // QAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABv
// SIG // AGwAaQBjAHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0w
// SIG // DQYJKoZIhvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9
// SIG // naOhIW+z66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4
// SIG // vceoniXj+bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb
// SIG // 3FwX/1z5Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlK
// SIG // kVIArzgPF/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0D
// SIG // pZaPWSm8tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnx
// SIG // zplmkIz/amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/
// SIG // fZZqkHimbdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWA
// SIG // myI4ILUl5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGn
// SIG // Ecua2A5HmoDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5v
// SIG // vfHhAN/nMQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJ
// SIG // rDm77MbL2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqH
// SIG // czsI5pgt6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdC
// SIG // osnPGUFN4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1
// SIG // rtxEPJdQcdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0e
// SIG // GTgvvM9YBS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950
// SIG // iEkSMIIE2DCCA8CgAwIBAgITMwAAALaLR0OyzK0fBAAA
// SIG // AAAAtjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMDAeFw0xNzEwMDIyMzAwNTJaFw0x
// SIG // OTAxMDIyMzAwNTJaMIGxMQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MQwwCgYDVQQLEwNBT0MxJjAkBgNVBAsTHVRoYWxlcyBU
// SIG // U1MgRVNOOjk2RkYtNEJDNS1BN0RDMSUwIwYDVQQDExxN
// SIG // aWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjAN
// SIG // BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2IlnF0hL
// SIG // CLdEG5MRwzrPbkFApqhcYmOyWyNEMzX1nt39wHLLi0ls
// SIG // MHshAGWSlilEpwx7Uz9ZTiB7lm6yWBDvrj0Rh3w1Zipv
// SIG // tfyv0MJKcq0/zhDj1xAJxeUS41/OYOjb+GpJbT8loGlR
// SIG // p6PWLPxD4UIJSjQ9VEhKJL984d2mZwvebLFSuMfI0hGb
// SIG // JnT+nHdgGmZjLAw/2AEE3755MwrJ6j+7pRR2NYcS2Xdd
// SIG // Mhbx7vL3bWBdKH0nZmkdSRfkle34Dv64Z5v/vLrtHdek
// SIG // 8HsJsCgEakpzESTV88o1E2xWxcYccNYTtbNGBrQsqklE
// SIG // 55iVDxW706UteQgBgB8NpkzBMQIDAQABo4IBGzCCARcw
// SIG // HQYDVR0OBBYEFPNtwpABJyDajzMcwF9oat+BA4XQMB8G
// SIG // A1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYG
// SIG // A1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0
// SIG // YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQRO
// SIG // MEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENBXzIw
// SIG // MTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0l
// SIG // BAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQADggEB
// SIG // AC/X1eq+mI54HLrDKkOkTUzMZTMoRxXlOpbeFuXXOrs9
// SIG // PCpAxiMiuEDZ2PxRZFIROIPG70r5wggpmYEuloVlMpxF
// SIG // 4OyoHYaaaynduLEE/7ff+Uoo2xDwEizMl/nZtKooYsiw
// SIG // KoPrpfXQ6Arh6lJCzaxEBykZ7l4xlj/4dbfl2O5EfMyP
// SIG // 2UcM1sDo6xCPH8qNsF4fqI5qe6s25PXzMwx13ykvZMie
// SIG // 3dt9BsMZ1jSTaQ8HWkugVJXAHnlNkWool6fVRlR0m7lp
// SIG // 9R4DOpxmOrdo68wnwgOLGuhBBYVhkkmSkgH5c2T5rQz+
// SIG // 3d3Svx9ivrrSh1cSU0AHhNtMw65at7asZEihggNzMIIC
// SIG // WwIBATCB4aGBt6SBtDCBsTELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEMMAoGA1UECxMDQU9DMSYwJAYDVQQLEx1UaGFsZXMg
// SIG // VFNTIEVTTjo5NkZGLTRCQzUtQTdEQzElMCMGA1UEAxMc
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIlCgEB
// SIG // MAkGBSsOAwIaBQADFQD/FivvFVyz1bWWK74ISyH8TXQA
// SIG // AaCBwTCBvqSBuzCBuDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEM
// SIG // MAoGA1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIE5U
// SIG // UyBFU046MjY2NS00QzNGLUM1REUxKzApBgNVBAMTIk1p
// SIG // Y3Jvc29mdCBUaW1lIFNvdXJjZSBNYXN0ZXIgQ2xvY2sw
// SIG // DQYJKoZIhvcNAQEFBQACBQDeLG19MCIYDzIwMTgwMjEy
// SIG // MTk0NjA1WhgPMjAxODAyMTMxOTQ2MDVaMHQwOgYKKwYB
// SIG // BAGEWQoEATEsMCowCgIFAN4sbX0CAQAwBwIBAAICJK8w
// SIG // BwIBAAICFsUwCgIFAN4tvv0CAQAwNgYKKwYBBAGEWQoE
// SIG // AjEoMCYwDAYKKwYBBAGEWQoDAaAKMAgCAQACAxbjYKEK
// SIG // MAgCAQACAx6EgDANBgkqhkiG9w0BAQUFAAOCAQEAW3NP
// SIG // QVzhsQnfz5Wu++64JJZdeI+J5y9x3t9hKIyy0Msyur2J
// SIG // v4Dv5nK7piuaJsPvYpPtRSZiqjDd5UhncZgJRl3s+lmB
// SIG // 27Wvi7FRZY+H7P7NaGKIWL14dK9nlCiOJOCnfpZsy29t
// SIG // a0ps5qs5A76KPvLrb3Tb9g2yuMfNuykwRQ2bMdkWYdFA
// SIG // V+zaOsZBBwarZvhFz4MsXhNrNEFgjkWQl5MAH9Gr3YXH
// SIG // wreh4FzA8MZL2587owac+vI3fT3LRl+GzpC9nCppbVgx
// SIG // 6CDxD4dHE13pFEPlt3A5lr7Q5+3ZmJ46INt85HV4m/qV
// SIG // u9XNhKVAwrfv+bxeA9OpwRRsj52+zTGCAvUwggLxAgEB
// SIG // MIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAAtotHQ7LMrR8EAAAAAAC2MA0GCWCGSAFlAwQCAQUA
// SIG // oIIBMjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw
// SIG // LwYJKoZIhvcNAQkEMSIEIPLp29lPqTigQlaep5/ymaJ4
// SIG // zukt8AYt2BvDEcwZjYA/MIHiBgsqhkiG9w0BCRACDDGB
// SIG // 0jCBzzCBzDCBsQQU/xYr7xVcs9W1liu+CEsh/E10AAEw
// SIG // gZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAALaLR0OyzK0fBAAAAAAAtjAWBBSQytpf7Iu0
// SIG // 7hYwfdurUOUmZ+4qnTANBgkqhkiG9w0BAQsFAASCAQDG
// SIG // XkKw2b0Znzxf+Ujdo8Hyp9aPdx99ZjzXjO8ZIc5FjWCT
// SIG // Lj3ehx0l+q8fbk7ngKj/ADTDV9d792T7VPEdB7DQV5jX
// SIG // ieVNv6u6p/TeYyIHag2OOTjRaLGnyBWrMZRum673tatF
// SIG // U3RHUm0d6QhWlSoHdUqNP8PhNwysC40SVC7kNXAm7EqZ
// SIG // qra9YBcQ2SCF8lvtZiEuDxjV3VEeuhX5P7N4nMvn6cZ1
// SIG // twfhzBVyjiLRyD5Z5DpynXZty5XN+86W+A7ZyBaowUY9
// SIG // Jx2g7E3hGNMIwv1irMxKSF+9ciu1ik6iywUABAWL0Cpk
// SIG // liuBRzzAE5zMXBqDJYRLet6rC/RZa7sI
// SIG // End signature block
