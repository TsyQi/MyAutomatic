"use strict";
var vscode_jsonrpc_1 = require('vscode-jsonrpc');
exports.Trace = vscode_jsonrpc_1.Trace;
exports.CancellationToken = vscode_jsonrpc_1.CancellationToken;
exports.CancellationTokenSource = vscode_jsonrpc_1.CancellationTokenSource;
var vscode = require('vscode-jsonrpc');
var q = require('q');
var q_1 = require('q');
var logger_1 = require('./logger');
var ec = require('errno-codes');
var JsonRpcConnection = (function () {
    function JsonRpcConnection(stream, logger) {
        this.stream = stream;
        this.logger = logger;
        this.requests = {};
        this.requestCount = 0;
        this.connection = vscode.createClientMessageConnection(stream, stream, logger);
        this.onClose = this.connection.onClose;
        this.connection.onClose(this.onConnectionClosed, this);
        this.onError = this.connection.onError;
        if (logger && logger.isEnabled(logger_1.LogLevel.Verbose)) {
            this.connection.trace(vscode_jsonrpc_1.Trace.Verbose, logger);
        }
    }
    JsonRpcConnection.attach = function (stream, logger, target, methodNames) {
        var connection = new JsonRpcConnection(stream, logger);
        if (target) {
            connection.onRequestInvokeTarget.apply(connection, [target].concat(methodNames));
        }
        connection.listen();
        return connection;
    };
    JsonRpcConnection.prototype.listen = function () {
        this.throwIfClosed();
        this.throwIfListening();
        this.connection.listen();
        this.listening = true;
    };
    JsonRpcConnection.prototype.sendRequest = function (method, params, token) {
        var _this = this;
        this.throwIfNotListening();
        if (this.closed) {
            return q.reject(JsonRpcConnection.createStreamClosedError(method));
        }
        var deferred = q_1.defer();
        var requestIndex = this.requestCount++;
        this.requests[requestIndex] = { method: method, deferred: deferred };
        this.connection
            .sendRequest({ 'method': method }, params, token)
            .then(function (value) {
            deferred.resolve(value);
            delete _this.requests[requestIndex];
        }, function (error) {
            deferred.reject(error);
            delete _this.requests[requestIndex];
        });
        return deferred.promise;
    };
    JsonRpcConnection.prototype.sendNotification = function (method, params) {
        if (this.closed) {
            return q.reject(JsonRpcConnection.createStreamClosedError(method));
        }
        this.connection.sendNotification({ 'method': method }, params);
        // Eventually we'll want to return a promise that is fulfilled after transmission has completed.
        return q(undefined);
    };
    JsonRpcConnection.prototype.onRequest = function (method, handler) {
        this.throwIfListening();
        this.throwIfClosed();
        this.connection.onRequest({ 'method': method }, function (args, ct) { return handler.apply(void 0, (args || []).concat([ct])); });
        this.connection.onNotification({ 'method': method }, function (args) { return handler.apply(void 0, args); });
    };
    JsonRpcConnection.prototype.onRequestInvokeTarget = function (target) {
        var _this = this;
        var methodNames = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            methodNames[_i - 1] = arguments[_i];
        }
        this.throwIfListening();
        this.throwIfClosed();
        if (!methodNames || methodNames.length === 0) {
            methodNames = getMethodNamesOf(target);
        }
        methodNames.forEach(function (methodName) {
            var method = target[methodName];
            if (!method)
                throw new Error("Method not found " + methodName + ".");
            _this.onRequest(methodName, method.bind(target));
        });
    };
    JsonRpcConnection.prototype.dispose = function () {
        // Reject any pending outbound requests that haven't resolved already, since we won't get responses here on out.
        // TODO: code here, or get fix for https://github.com/Microsoft/vscode-languageserver-node/issues/65
        this.stream.end();
        this.connection.dispose();
    };
    JsonRpcConnection.prototype.cancelPendingRequests = function (reason) {
        for (var propName in this.requests) {
            if (this.requests.hasOwnProperty(propName)) {
                var request = this.requests[propName];
                request.deferred.reject(reason || JsonRpcConnection.createStreamClosedError(request.method));
            }
        }
        this.requests = {};
    };
    JsonRpcConnection.prototype.throwIfNotListening = function () {
        if (!this.listening) {
            throw new Error('Call listen() first.');
        }
    };
    JsonRpcConnection.prototype.throwIfListening = function () {
        if (this.listening) {
            throw new Error('listen() has already been called.');
        }
    };
    JsonRpcConnection.prototype.throwIfClosed = function (method) {
        if (this.closed) {
            throw JsonRpcConnection.createStreamClosedError(method);
        }
    };
    JsonRpcConnection.prototype.onConnectionClosed = function () {
        this.closed = true;
        this.cancelPendingRequests();
    };
    JsonRpcConnection.createStreamClosedError = function (method) {
        var message = (method ? "Cannot execute '" + method + "'. " : '') + 'The underlying stream has closed.';
        var result = new Error(message);
        result.code = ec.ENOENT.code;
        return result;
    };
    return JsonRpcConnection;
}());
exports.JsonRpcConnection = JsonRpcConnection;
function getMethodNamesOf(target) {
    var methods = [];
    for (var propertyName in target) {
        var propertyValue = target[propertyName];
        if (typeof propertyValue === 'function') {
            methods.push(propertyName);
        }
    }
    return methods;
}

//# sourceMappingURL=jsonRpc.js.map
// SIG // Begin signature block
// SIG // MIIhtQYJKoZIhvcNAQcCoIIhpjCCIaICAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // IArd1Tvnf3nuF8TGJ0R5JVj2nRKdTWYydIThU+KnZpyg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbcwghWzAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggawwGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIOwEsAnaafvn
// SIG // lYdr3OAGsu25JWBQNDOGp0rILQjhx24mMEAGCisGAQQB
// SIG // gjcCAQwxMjAwoBaAFABqAHMAbwBuAFIAcABjAC4AagBz
// SIG // oRaAFGh0dHA6Ly9taWNyb3NvZnQuY29tMA0GCSqGSIb3
// SIG // DQEBAQUABIIBAJ0RK3Danq8QO2kAkdyzmdzMphRGQdRH
// SIG // FY3Jv42+4hs2SXUKTcwFyhvP4MIUnGlZ3bsp1VHA1H1X
// SIG // GZLJGhSN4MBv2GisiHh4mH5yvEFCBsxZHByUfVq43krS
// SIG // w/VjIwLyxbMDhSoURtkBtSr/krJfSvNTg7ni/A6dbcYX
// SIG // gmL8q2PzaMt6jTxqL+wtgIOshcfFWlaIGrP+ZtErLbf4
// SIG // VRlCOgHhuGWCFxfWBxpfFzFvndVyGLrvdF1a4WvAouXb
// SIG // jPIHY7Y2ZmdiFltlTZs8dxIQK613qIAYjZ6oAcsq66HC
// SIG // IBbQ1Q+vT7O+kUqomq2LGgnJCVl0VUuIXZw0y8uwqOnY
// SIG // xxWhghNDMIITPwYKKwYBBAGCNwMDATGCEy8wghMrBgkq
// SIG // hkiG9w0BBwKgghMcMIITGAIBAzEPMA0GCWCGSAFlAwQC
// SIG // AQUAMIIBOwYLKoZIhvcNAQkQAQSgggEqBIIBJjCCASIC
// SIG // AQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg
// SIG // EbhiNE9MSN5f5jvA1Wn42l0jmqZgVdLshqltmoAB5yAC
// SIG // Blp7WiE7ZBgTMjAxODAyMTMwNTEyMzUuMjg4WjAHAgEB
// SIG // gAIB9KCBt6SBtDCBsTELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEM
// SIG // MAoGA1UECxMDQU9DMSYwJAYDVQQLEx1UaGFsZXMgVFNT
// SIG // IEVTTjo5NkZGLTRCQzUtQTdEQzElMCMGA1UEAxMcTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCDsgwggZx
// SIG // MIIEWaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEB
// SIG // CwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQD
// SIG // EylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRo
// SIG // b3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3
// SIG // MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvt
// SIG // fGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458
// SIG // YTBZsTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN
// SIG // 0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLB
// SIG // xKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQ
// SIG // YrFd/XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/Q
// SIG // S/1u5ZrKsajyeioKMfDaTgaRtogINeh4HLDpmc085y9E
// SIG // uqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQAB
// SIG // o4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0O
// SIG // BBYEFNVjOlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQB
// SIG // gjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAP
// SIG // BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP
// SIG // 6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeG
// SIG // RWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3Js
// SIG // L3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKG
// SIG // Pmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2Vy
// SIG // dHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGg
// SIG // BgNVHSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9
// SIG // BggrBgEFBQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABp
// SIG // AGMAeQBfAFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Eh
// SIG // b7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ie
// SIG // JeP5vO1rVFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/
// SIG // XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCv
// SIG // OA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9Z
// SIG // Kby2/QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQ
// SIG // jP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQ
// SIG // eKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjgg
// SIG // tSXlZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rY
// SIG // DkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA
// SIG // 3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvs
// SIG // xsvYgrRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjm
// SIG // mC3qjeAzLhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8Z
// SIG // QU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8
// SIG // l1Bx16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8
// SIG // z1gFLu8NoFA12u8JJxzVs341Hgi62jbb01+P3nSISRIw
// SIG // ggTYMIIDwKADAgECAhMzAAAAtotHQ7LMrR8EAAAAAAC2
// SIG // MA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFBDQSAyMDEwMB4XDTE3MTAwMjIzMDA1MloXDTE5MDEw
// SIG // MjIzMDA1MlowgbExCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAK
// SIG // BgNVBAsTA0FPQzEmMCQGA1UECxMdVGhhbGVzIFRTUyBF
// SIG // U046OTZGRi00QkM1LUE3REMxJTAjBgNVBAMTHE1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggEiMA0GCSqG
// SIG // SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDYiWcXSEsIt0Qb
// SIG // kxHDOs9uQUCmqFxiY7JbI0QzNfWe3f3AcsuLSWwweyEA
// SIG // ZZKWKUSnDHtTP1lOIHuWbrJYEO+uPRGHfDVmKm+1/K/Q
// SIG // wkpyrT/OEOPXEAnF5RLjX85g6Nv4akltPyWgaVGno9Ys
// SIG // /EPhQglKND1USEokv3zh3aZnC95ssVK4x8jSEZsmdP6c
// SIG // d2AaZmMsDD/YAQTfvnkzCsnqP7ulFHY1hxLZd10yFvHu
// SIG // 8vdtYF0ofSdmaR1JF+SV7fgO/rhnm/+8uu0d16Twewmw
// SIG // KARqSnMRJNXzyjUTbFbFxhxw1hO1s0YGtCyqSUTnmJUP
// SIG // FbvTpS15CAGAHw2mTMExAgMBAAGjggEbMIIBFzAdBgNV
// SIG // HQ4EFgQU823CkAEnINqPMxzAX2hq34EDhdAwHwYDVR0j
// SIG // BBgwFoAU1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljVGltU3RhUENB
// SIG // XzIwMTAtMDctMDEuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAxMC0w
// SIG // Ny0wMS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAK
// SIG // BggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAQEAL9fV
// SIG // 6r6YjngcusMqQ6RNTMxlMyhHFeU6lt4W5dc6uz08KkDG
// SIG // IyK4QNnY/FFkUhE4g8bvSvnCCCmZgS6WhWUynEXg7Kgd
// SIG // hpprKd24sQT/t9/5SijbEPASLMyX+dm0qihiyLAqg+ul
// SIG // 9dDoCuHqUkLNrEQHKRnuXjGWP/h1t+XY7kR8zI/ZRwzW
// SIG // wOjrEI8fyo2wXh+ojmp7qzbk9fMzDHXfKS9kyJ7d230G
// SIG // wxnWNJNpDwdaS6BUlcAeeU2RaiiXp9VGVHSbuWn1HgM6
// SIG // nGY6t2jrzCfCA4sa6EEFhWGSSZKSAflzZPmtDP7d3dK/
// SIG // H2K+utKHVxJTQAeE20zDrlq3tqxkSKGCA3MwggJbAgEB
// SIG // MIHhoYG3pIG0MIGxMQswCQYDVQQGEwJVUzETMBEGA1UE
// SIG // CBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEe
// SIG // MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQww
// SIG // CgYDVQQLEwNBT0MxJjAkBgNVBAsTHVRoYWxlcyBUU1Mg
// SIG // RVNOOjk2RkYtNEJDNS1BN0RDMSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiUKAQEwCQYF
// SIG // Kw4DAhoFAAMVAP8WK+8VXLPVtZYrvghLIfxNdAABoIHB
// SIG // MIG+pIG7MIG4MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYD
// SIG // VQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgTlRTIEVT
// SIG // TjoyNjY1LTRDM0YtQzVERTErMCkGA1UEAxMiTWljcm9z
// SIG // b2Z0IFRpbWUgU291cmNlIE1hc3RlciBDbG9jazANBgkq
// SIG // hkiG9w0BAQUFAAIFAN4sbX0wIhgPMjAxODAyMTIxOTQ2
// SIG // MDVaGA8yMDE4MDIxMzE5NDYwNVowdDA6BgorBgEEAYRZ
// SIG // CgQBMSwwKjAKAgUA3ixtfQIBADAHAgEAAgIkrzAHAgEA
// SIG // AgIWxTAKAgUA3i2+/QIBADA2BgorBgEEAYRZCgQCMSgw
// SIG // JjAMBgorBgEEAYRZCgMBoAowCAIBAAIDFuNgoQowCAIB
// SIG // AAIDHoSAMA0GCSqGSIb3DQEBBQUAA4IBAQBbc09BXOGx
// SIG // Cd/Pla777rgkll14j4nnL3He32EojLLQyzK6vYm/gO/m
// SIG // crumK5omw+9ik+1FJmKqMN3lSGdxmAlGXez6WYHbta+L
// SIG // sVFlj4fs/s1oYohYvXh0r2eUKI4k4Kd+lmzLb21rSmzm
// SIG // qzkDvoo+8utvdNv2DbK4x827KTBFDZsx2RZh0UBX7No6
// SIG // xkEHBqtm+EXPgyxeE2s0QWCORZCXkwAf0avdhcfCt6Hg
// SIG // XMDwxkvbnzujBpz68jd9PctGX4bOkL2cKmltWDHoIPEP
// SIG // h0cTXekUQ+W3cDmWvtDn7dmYnjog23zkdXib+pW71c2E
// SIG // pUDCt+/5vF4D06nBFGyPnb7NMYIC9TCCAvECAQEwgZMw
// SIG // fDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAC2
// SIG // i0dDssytHwQAAAAAALYwDQYJYIZIAWUDBAIBBQCgggEy
// SIG // MBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAvBgkq
// SIG // hkiG9w0BCQQxIgQgPl1purcWjcvOw4CKogP/kTs0uTPw
// SIG // qTjBxL6iCaqRGREwgeIGCyqGSIb3DQEJEAIMMYHSMIHP
// SIG // MIHMMIGxBBT/FivvFVyz1bWWK74ISyH8TXQAATCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAAtotHQ7LMrR8EAAAAAAC2MBYEFJDK2l/si7TuFjB9
// SIG // 26tQ5SZn7iqdMA0GCSqGSIb3DQEBCwUABIIBAGdLqoVg
// SIG // tPSsX/eV+IiTP7zKaLAF8KZVkoLZaoHhOSYhkZgx+33p
// SIG // CgtfaToIVbB1zAjR2MKXfnl9YOsft7GD+dHl/3K9l4Mt
// SIG // btITyoOEXrPmSoC5qDBUSoXvEjg5eLez4XxaL6LjKrBe
// SIG // +i5X68uq4dNqlZXXMEF3rCQk53FF/7Y/FGsX3J0ulITr
// SIG // 8HN4GoexlwScxtp+NTuTyvfKOnY6padajDuhZArlqaiq
// SIG // xDB+p9Tvz/9nO/XLvc+uLvrpx2svnu++q/NSnSJJPQxv
// SIG // hdzGnOWYHWMOSCYLPwyog4LXlmiNNgqIyLZW04W0aHdW
// SIG // 4K4Q9g69LIChVVpJL3cVELSJt+4=
// SIG // End signature block
