"use strict";
var fs = require('fs');
var path = require('path');
var os = require('os');
var util = require('util');
var c = require('./common');
var mkdirp = require('mkdir-parents');
var ec = require('errno-codes');
var tmp = require('tmp');
var exitCode_1 = require('./exitCode');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
/**
 * Log levels
 */
(function (LogLevel) {
    LogLevel[LogLevel["Critical"] = 1] = "Critical";
    LogLevel[LogLevel["Error"] = 2] = "Error";
    LogLevel[LogLevel["Warning"] = 4] = "Warning";
    LogLevel[LogLevel["Information"] = 8] = "Information";
    LogLevel[LogLevel["Verbose"] = 16] = "Verbose";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
exports.logFileDirectory = c.getLogFilesDir();
function traceProcessOutput(logger, process, processName) {
    if (!logger) {
        throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, 'logger is not defined');
    }
    if (!process) {
        throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, 'process is not defined');
    }
    if (!processName) {
        throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, 'processName is not defined');
    }
    process.once('exit', function (code, signal) {
        var codeOrSignal = '';
        if (typeof code === 'number') {
            codeOrSignal = " with code " + code;
            if (exitCode_1.default[code]) {
                codeOrSignal += " (" + exitCode_1.default[code] + ")";
            }
        }
        if (signal) {
            codeOrSignal += " with signal '" + signal + "''";
        }
        logger.info("" + processName + getPid(process) + " exited" + codeOrSignal + ".");
    });
    process.once('error', function (err) {
        logger.error("" + processName + getPid(process) + " error " + err.message + ".");
    });
    process.stderr.on('data', function (data) {
        logger.error("" + processName + getPid(process) + " stderr: " + data.toString());
    });
    if (logger.isEnabled(LogLevel.Verbose)) {
        process.stdout.on('data', function (data) {
            logger.verbose("" + processName + getPid(process) + " stdout: " + data.toString());
        });
    }
}
exports.traceProcessOutput = traceProcessOutput;
function getPid(process) {
    return process.pid ? ' PID ' + process.pid : '';
}
/** Trace level, must be in sync with System.Diagnostic.SourceLevels */
var SourceLevels;
(function (SourceLevels) {
    /** Allows all events through. */
    SourceLevels[SourceLevels["All"] = -1] = "All";
    /** Does not allow any events through. */
    SourceLevels[SourceLevels["Off"] = 0] = "Off";
    /** Allows only Critical events through. */
    SourceLevels[SourceLevels["Critical"] = LogLevel.Critical] = "Critical";
    /** Allows Critical and Error events through. */
    SourceLevels[SourceLevels["Error"] = 3] = "Error";
    /** Allows Critical, Error, and Warning events through. */
    SourceLevels[SourceLevels["Warning"] = 7] = "Warning";
    /** Allows Critical, Error, Warning, and Information events through. */
    SourceLevels[SourceLevels["Information"] = 15] = "Information";
    /** Allows Critical, Error, Warning, Information, and Verbose events through. */
    SourceLevels[SourceLevels["Verbose"] = 31] = "Verbose";
})(SourceLevels || (SourceLevels = {}));
/** Trace level. Must be in sync with EnvUtils.TraceLevelEnvVarName in src\clr\utility\Microsoft.ServiceHub.Utility.Shared\EnvUtils.cs */
exports.SourceLevelEnvironmentVariable = 'SERVICEHUBTRACELEVEL';
function cleanUpOldLogs(delayInMsecBeforeStartingLogCleanup, deleteLogFilesOlderThanDate) {
    return setTimeout(function () {
        fs.exists(exports.logFileDirectory, function (exists) {
            if (!exists) {
                return;
            }
            var logger = new Logger('oldLogsCleaner');
            // get list of log files
            fs.readdir(exports.logFileDirectory, function (err, files) {
                if (err) {
                    logger.error(libraryResourceStrings_1.LibraryResourceStrings.failedToEnumerateFilesInDir(exports.logFileDirectory, err.code, err.message));
                    return;
                }
                for (var i = 0; i < files.length; i++) {
                    // get "Change Time" for each log file
                    (function (file) {
                        fs.stat(file, function (err, stats) {
                            if (err) {
                                logger.error(libraryResourceStrings_1.LibraryResourceStrings.failedToGetFileStats(file, err.code, err.message));
                                return;
                            }
                            // check if the log file is old enough to be deleted based on its "Change Time"
                            if (stats.ctime.getTime() < deleteLogFilesOlderThanDate.getTime()) {
                                // delete file as it hasn't been used since the specified number of days
                                fs.unlink(file, function (err) {
                                    if (err) {
                                        logger.error(libraryResourceStrings_1.LibraryResourceStrings.failedToDeleteFile(file, err.code, err.message));
                                    }
                                });
                            }
                        });
                    })(path.join(exports.logFileDirectory, files[i]));
                }
            });
        });
    }, delayInMsecBeforeStartingLogCleanup);
}
exports.cleanUpOldLogs = cleanUpOldLogs;
var Logger = (function () {
    function Logger(logFilePrefix, options) {
        this.maxFileSizeInBytes = 500 * 1024; // 500 KB
        this.nextLogFileNumber = 1;
        this.currentFileSizeInBytes = 0;
        this.encoding = 'utf8';
        if (!logFilePrefix) {
            throw new Error(libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('LogFilePrefix'));
        }
        options = options || {};
        this.defaultLevel = options.defaultLevel || LogLevel.Verbose;
        var sourceLevelsEnvironment = options.logSourceLevel || process.env[exports.SourceLevelEnvironmentVariable];
        this.sourceLevels = parseInt(sourceLevelsEnvironment);
        if (isNaN(this.sourceLevels)) {
            var enumValue = c.getPropertyNoCase(SourceLevels, sourceLevelsEnvironment);
            this.sourceLevels = typeof enumValue === 'number' ? enumValue : SourceLevels.Error;
        }
        var dir = options.logFileDirectory || exports.logFileDirectory;
        this.logFilePath = path.join(dir, tmp.tmpNameSync({ template: logFilePrefix + "-" + process.pid + "-XXXXXX", postfix: '.log' }) + '.log');
        this.logFilePrefix = tmp.tmpNameSync({ template: logFilePrefix + "-" + process.pid + "-XXXXXX", postfix: '.log' });
        this.logFilePath = this.getLogFilePath();
        this.rollingEnabled = !this.isEnabled(LogLevel.Verbose);
    }
    Logger.prototype.critical = function (message) {
        this.LogInternal(LogLevel.Critical, message);
    };
    Logger.prototype.error = function (message) {
        this.LogInternal(LogLevel.Error, message);
    };
    Logger.prototype.warn = function (message) {
        this.LogInternal(LogLevel.Warning, message);
    };
    Logger.prototype.info = function (message) {
        this.LogInternal(LogLevel.Information, message);
    };
    Logger.prototype.verbose = function (message) {
        this.LogInternal(LogLevel.Verbose, message);
    };
    Logger.prototype.log = function (message) {
        this.LogInternal(this.defaultLevel, message);
    };
    Logger.prototype.isEnabled = function (level) {
        return (this.sourceLevels & level) != 0;
    };
    Logger.prototype.LogInternal = function (level, message) {
        try {
            if (this.isEnabled(level)) {
                if (!this.started) {
                    this.started = true;
                    this.startLogging();
                }
                this.logMessage(level, message);
            }
        }
        catch (e) {
        }
    };
    Logger.prototype.startLogging = function () {
        var logDirectory = path.dirname(this.logFilePath);
        if (!fs.existsSync(logDirectory)) {
            try {
                mkdirp.sync(logDirectory, c.unixOwnerOnlyAccessMode);
            }
            catch (e) {
                if (e.code !== ec.EEXIST.code) {
                    throw e;
                }
            }
        }
        this.logMessage(LogLevel.Information, libraryResourceStrings_1.LibraryResourceStrings.logConfig("$" + exports.SourceLevelEnvironmentVariable + "=\"" + (process.env[exports.SourceLevelEnvironmentVariable] || '') + "\""));
        // don't count this message for our roll over file size calculation
        this.currentFileSizeInBytes = 0;
    };
    Logger.prototype.logMessage = function (level, message) {
        if (!message) {
            return;
        }
        var text;
        if (typeof message === 'string') {
            text = message;
        }
        else if (message.message) {
            text = message;
            if (message.stack) {
                text += os.EOL + libraryResourceStrings_1.LibraryResourceStrings.messageAt + ("" + os.EOL + message.stack);
            }
        }
        else {
            text = util.inspect(message);
        }
        var finalMessage = formatMessage(text, level);
        // Since message header and footer are short and of constant length managed ServiceHub logger ignores them to simplify file size calculation.
        // To be consistent we do the same here for JS logger. This is ok because we don't need an accurate file size for rolling over to a new file.
        // This also helps in keeping the tests simple.
        var buffer = new Buffer(text, this.encoding);
        if (this.rollingEnabled && this.currentFileSizeInBytes > 0 && (this.currentFileSizeInBytes + buffer.length > this.maxFileSizeInBytes)) {
            // delete lastLogFilePath
            if (this.lastLogFilePath) {
                fs.unlink(this.lastLogFilePath, function (err) { });
            }
            this.lastLogFilePath = this.logFilePath;
            this.logFilePath = this.getLogFilePath();
            fs.appendFileSync(this.logFilePath, formatMessage(libraryResourceStrings_1.LibraryResourceStrings.logConfig("$" + exports.SourceLevelEnvironmentVariable + "=\"" + (process.env[exports.SourceLevelEnvironmentVariable] || '') + "\""), LogLevel.Information), { encoding: this.encoding });
            this.currentFileSizeInBytes = 0;
        }
        fs.appendFileSync(this.logFilePath, finalMessage, { encoding: this.encoding });
        this.currentFileSizeInBytes += buffer.length;
    };
    Logger.prototype.getLogFilePath = function () {
        return path.join(exports.logFileDirectory, this.logFilePrefix + "-" + this.nextLogFileNumber++ + ".log");
    };
    return Logger;
}());
exports.Logger = Logger;
function formatMessage(message, level) {
    return formatDateTime() + " : " + LogLevel[level] + " : " + message + os.EOL;
}
function twoDigits(v) {
    return "" + (v < 10 ? '0' : '') + v;
}
function formatTime(date) {
    return twoDigits(date.getHours()) + ":" + twoDigits(date.getMinutes()) + ":" + twoDigits(date.getSeconds());
}
function formatDateTime() {
    var now = new Date();
    return twoDigits(now.getMonth() + 1) + "/" + twoDigits(now.getDate()) + "/" + now.getFullYear() + " " + formatTime(now);
}

//# sourceMappingURL=logger.js.map
// SIG // Begin signature block
// SIG // MIIhtgYJKoZIhvcNAQcCoIIhpzCCIaMCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // Sz+N8IUrGn//bLRAv1w4xiFgHWBhx8kw9Q2n9uMUv+mg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFbgwghW0AgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggaowGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIHlCulWZsHf+
// SIG // YeoafZedUIY3lklJ1oL21klFNII5TdcyMD4GCisGAQQB
// SIG // gjcCAQwxMDAuoBSAEgBsAG8AZwBnAGUAcgAuAGoAc6EW
// SIG // gBRodHRwOi8vbWljcm9zb2Z0LmNvbTANBgkqhkiG9w0B
// SIG // AQEFAASCAQCRu1+ldhePeKz+QD5nbGz+6pPn0+8nFfc0
// SIG // Sv8TiWxmLo3l6Wgdu7PFKkOf5/sKJxW1q7hmx7mxBNWf
// SIG // bSAZ1QDf7xcTn0ow7Dwu0t+18bBTO2PqB6Yf4ZvpI64u
// SIG // CRJ2Pnx7a6gw7C6iYqefmGIKfAdK0OekUhckwj95f/7H
// SIG // GcoWcvtI+3XczQtmR1FYzb95xLM/gZue9c6TVdNFP2tv
// SIG // q+kvD3G9eRxJh5LVwKN/bKtkuh4Mx0UgjGOEBeGTi2iv
// SIG // IQ6/IuoGePb2K6eBIOjnR6YnnN5R5nUuXdvOQx7qjkYl
// SIG // GqYi/jwevQXmbxkEUkPMT9pMkvKXudTuo6Z4aa1WI+wF
// SIG // oYITRjCCE0IGCisGAQQBgjcDAwExghMyMIITLgYJKoZI
// SIG // hvcNAQcCoIITHzCCExsCAQMxDzANBglghkgBZQMEAgEF
// SIG // ADCCATwGCyqGSIb3DQEJEAEEoIIBKwSCAScwggEjAgEB
// SIG // BgorBgEEAYRZCgMBMDEwDQYJYIZIAWUDBAIBBQAEIOW/
// SIG // gL8Tu7r/z+oSbh+9Fjjysn7NcLzqBd916Ei5a8w5AgZa
// SIG // e23cVlAYEzIwMTgwMjEzMDUxMjMxLjgxM1owBwIBAYAC
// SIG // AfSggbikgbUwgbIxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAK
// SIG // BgNVBAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBEU0Ug
// SIG // RVNOOjEyRTctMzA2NC02MTEyMSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloIIOyjCCBnEw
// SIG // ggRZoAMCAQICCmEJgSoAAAAAAAIwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoXDTI1MDcw
// SIG // MTIxNDY1NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
// SIG // AQCpHQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUKAIKF++18
// SIG // aEssX8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUdzgkTjnxh
// SIG // MFmxMEQP8WCIhFRDDNdNuDgIs0Ldk6zWczBXJoKjRQ3Q
// SIG // 6vVHgc2/JGAyWGBG8lhHhjKEHnRhZ5FfgVSxz5NMksHE
// SIG // pl3RYRNuKMYa+YaAu99h/EbBJx0kZxJyGiGKr0tkiVBi
// SIG // sV39dx898Fd1rL2KQk1AUdEPnAY+Z3/1ZsADlkR+79BL
// SIG // /W7lmsqxqPJ6Kgox8NpOBpG2iAg16HgcsOmZzTznL0S6
// SIG // p/TcZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJNAgMBAAGj
// SIG // ggHmMIIB4jAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQU1WM6XIoxkPNDe3xGG8UzaFqFbVUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/o
// SIG // olxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZF
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMu
// SIG // Y3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0
// SIG // cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwgaAG
// SIG // A1UdIAEB/wSBlTCBkjCBjwYJKwYBBAGCNy4DMIGBMD0G
// SIG // CCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAGCCsG
// SIG // AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBsAGkA
// SIG // YwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqG
// SIG // SIb3DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXEDPZ2joSFv
// SIG // s+umzPUxvs8F4qn++ldtGTCzwsVmyWrf9efweL3HqJ4l
// SIG // 4/m87WtUVwgrUYJEEvu5U4zM9GASinbMQEBBm9xcF/9c
// SIG // +V4XNZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5SpFSAK84
// SIG // Dxf1L3mBZdmptWvkx872ynoAb0swRCQiPM/tA6WWj1kp
// SIG // vLb9BOFwnzJKJ/1Vry/+tuWOM7tiX5rbV0Dp8c6ZZpCM
// SIG // /2pif93FSguRJuI57BlKcWOdeyFtw5yjojz6f32WapB4
// SIG // pm3S4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1gJsiOCC1
// SIG // JeVk7Pf0v35jWSUPei45V3aicaoGig+JFrphpxHLmtgO
// SIG // R5qAxdDNp9DvfYPw4TtxCd9ddJgiCGHasFAeb73x4QDf
// SIG // 5zEHpJM692VHeOj4qEir995yfmFrb3epgcunCaw5u+zG
// SIG // y9iCtHLNHfS4hQEegPsbiSpUObJb2sgNVZl6h3M7COaY
// SIG // LeqN4DMuEin1wC9UJyH3yKxO2ii4sanblrKnQqLJzxlB
// SIG // TeCG+SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Zta7cRDyX
// SIG // UHHXodLFVeNp3lfB0d4wwP3M5k37Db9dT+mdHhk4L7zP
// SIG // WAUu7w2gUDXa7wknHNWzfjUeCLraNtvTX4/edIhJEjCC
// SIG // BNkwggPBoAMCAQICEzMAAACsiiG8etKbcvQAAAAAAKww
// SIG // DQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // UENBIDIwMTAwHhcNMTYwOTA3MTc1NjU0WhcNMTgwOTA3
// SIG // MTc1NjU0WjCBsjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoG
// SIG // A1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIERTRSBF
// SIG // U046MTJFNy0zMDY0LTYxMTIxJTAjBgNVBAMTHE1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggEiMA0GCSqG
// SIG // SIb3DQEBAQUAA4IBDwAwggEKAoIBAQChxPQ8pY5zMaEX
// SIG // QVyrdwi3qdFDqrvf3HT5ujVWaoQJ2Km7+1T3GNnGpbND
// SIG // 6PomAcw9NfV+C+RMmCrThpUlBVzeuzsNL2Lsj9mMdK83
// SIG // ixebazenSrA0rXLIifWBzKHVP6jzsQWo96cHukHZqI8x
// SIG // Rp3tYivgapt5LLrn9Rm2Jn+E0h2lKDOw5sIteZiriOMP
// SIG // H2Z7mtgYXmyB8ThgdB46p6frNGpcXr11pa1Vkldl0iY6
// SIG // oBAKQQSxJ5Bn4N7ui5Wj5wDkDZzGAg6n1ptMPTPJhL2u
// SIG // osW84YjnSp/2suNap3qOjKEYXmpGzvasq5qyqPyvfqfk
// SIG // sOfNBaJntfpC8dIDJKrnAgMBAAGjggEbMIIBFzAdBgNV
// SIG // HQ4EFgQU2EdwqIU1ixNhr4eQ6EUXJOCYpw0wHwYDVR0j
// SIG // BBgwFoAU1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljVGltU3RhUENB
// SIG // XzIwMTAtMDctMDEuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAxMC0w
// SIG // Ny0wMS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAK
// SIG // BggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAQEASOzo
// SIG // XifDGxicXbTOdm43DB9dYxwNXaQj0hW0ztBACeWbX6zx
// SIG // ee1w7TJeXQx1IfTz1BWJAfVla7HA1oxa0LiF/Uf6rfRv
// SIG // EEmGmHr9wWEbr3xiErllTFE2V/mdYBSEwdj74m8QLBeF
// SIG // Y37Cjx4TFe+AB/FQly3kvfrJKDaYYTTXTAFYAKpi0AcD
// SIG // TcESXZcshJ/O8UZs9fr0BgrOm5h7qeQ1CJNmDMVEqElQ
// SIG // t/cFO3dxqrAKv3Fu/nsT5GkABu+vIibgxX6tNmqccIIX
// SIG // KALgv7zDIaRAAWtXV9LwnmstDUbIp8dH/oSVm3tPnCPl
// SIG // rB3+C28vPnvJdbtJi/yOuETd+rLn+qGCA3QwggJcAgEB
// SIG // MIHioYG4pIG1MIGyMQswCQYDVQQGEwJVUzETMBEGA1UE
// SIG // CBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEe
// SIG // MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQww
// SIG // CgYDVQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIgRFNF
// SIG // IEVTTjoxMkU3LTMwNjQtNjExMjElMCMGA1UEAxMcTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIlCgEBMAkG
// SIG // BSsOAwIaBQADFQA5cCWLFMh53V8MXemLnLOUmfcct6CB
// SIG // wTCBvqSBuzCBuDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEMMAoG
// SIG // A1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIE5UUyBF
// SIG // U046MjY2NS00QzNGLUM1REUxKzApBgNVBAMTIk1pY3Jv
// SIG // c29mdCBUaW1lIFNvdXJjZSBNYXN0ZXIgQ2xvY2swDQYJ
// SIG // KoZIhvcNAQEFBQACBQDeLIcVMCIYDzIwMTgwMjEyMjEz
// SIG // NTE3WhgPMjAxODAyMTMyMTM1MTdaMHQwOgYKKwYBBAGE
// SIG // WQoEATEsMCowCgIFAN4shxUCAQAwBwIBAAICEiQwBwIB
// SIG // AAICGSswCgIFAN4t2JUCAQAwNgYKKwYBBAGEWQoEAjEo
// SIG // MCYwDAYKKwYBBAGEWQoDAaAKMAgCAQACAxbjYKEKMAgC
// SIG // AQACAwehIDANBgkqhkiG9w0BAQUFAAOCAQEAOdl7qLCQ
// SIG // 03+Pn09NXBy/UdzYENP5WUpdJj1lhhZWqlTp1ZxpBbLK
// SIG // BGNrc9APDLjzI1uYK4ZXbMROuqbdl53TptxmzcqYSGSu
// SIG // x+y5aCq5NxMp6eDVV0KroRjTcIWHpNZKUQUeRuCdzdJT
// SIG // vOKZ+bkAWJT9LqmWrpxrgDzS2kJGp4N+KE1xBlUkbhWb
// SIG // fHsfVyODFrIBwzFpDgjhOYPNdt0W6iwKRgUFqoCIKMwY
// SIG // jcILQ4ZUmkbTAqioprskgn0nGaWvPYusKhuzffr9211c
// SIG // Z0qdD5mf/QYlhLDIGrbaVRU+DqSh6YRPEd5ht+FloJZL
// SIG // HlwaIJIqcoE9MdclHAmRRTrfVDGCAvUwggLxAgEBMIGT
// SIG // MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAA
// SIG // rIohvHrSm3L0AAAAAACsMA0GCWCGSAFlAwQCAQUAoIIB
// SIG // MjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJ
// SIG // KoZIhvcNAQkEMSIEICI6l+c4Iglb1RQMIcYhCW3AP3FZ
// SIG // eebCwCCkIsE/MtNcMIHiBgsqhkiG9w0BCRACDDGB0jCB
// SIG // zzCBzDCBsQQUOXAlixTIed1fDF3pi5yzlJn3HLcwgZgw
// SIG // gYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD
// SIG // Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAIT
// SIG // MwAAAKyKIbx60pty9AAAAAAArDAWBBTW9EbQA6lXQKfw
// SIG // bcvz4drf0R8GezANBgkqhkiG9w0BAQsFAASCAQBB+CEB
// SIG // a720ST98Vq7bWRplWSdB3dIBQFl/Pz2ro/nCEdy0KfTP
// SIG // StqFS9pYAF0kCPJsot7A3eTkiwhcnNqH45ALp/K47NLf
// SIG // JeAO9trLu46UFONmLCZBXWI0GcreY1e4NyvRbhiDwjJT
// SIG // u0gNI41cpCK8m2IdLzBEAkok6eWPrhyC+n/1Tgs8YrCB
// SIG // ot+1t1XAl2mwUi8ge6DTov17lnu0XYqMw7UdFIzvYM60
// SIG // ABpXoHvLTfuYRSuZhr8VovzGUIExbwxkY9nb+Puw18Iw
// SIG // //NCKxAtZ9DC+SrwnMTkTXhLiADrFjUdu4acOAsjmxzK
// SIG // nkWewmezfX26qsZRB/CiIiPL778U
// SIG // End signature block
