/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var path_1 = require("path");
exports.WATSON_LINE_BREAK = "\r\n";
(function (pathMode) {
    pathMode[pathMode["windows"] = 0] = "windows";
    pathMode[pathMode["posix"] = 1] = "posix";
    pathMode[pathMode["defaultMode"] = 2] = "defaultMode";
})(exports.pathMode || (exports.pathMode = {}));
var pathMode = exports.pathMode;
function convertPathToPosix(input) {
    input = replaceAll(input, "\\", "/");
    var networkPath = input.startsWith("//");
    if (!networkPath) {
        var driveLetterRX = /^([a-zA-Z]):/;
        input = input.replace(driveLetterRX, "/$1");
    }
    input = path_1.posix.normalize(input);
    if (networkPath) {
        input = "/" + input;
    }
    return input;
}
exports.convertPathToPosix = convertPathToPosix;
function convertPathToWindows(input) {
    input = replaceAll(input, "/", "\\");
    var networkPath = input.startsWith("\\\\");
    if (input.startsWith("\\") && !networkPath) {
        var driveLetterRX = /^\\([a-zA-Z])\\/;
        var match = input.match(driveLetterRX);
        if (match) {
            input = input.replace(driveLetterRX, match[1] + ":\\");
        }
        else {
            input = "A:" + input;
        }
    }
    input = path_1.win32.normalize(input);
    return input;
}
exports.convertPathToWindows = convertPathToWindows;
function replaceAll(input, find, replace) {
    if (!find) {
        return input;
    }
    if (find === replace) {
        return input;
    }
    if (replace.includes(find)) {
        throw new Error("replacement string includes the search string. This will send you into an infinite loop.");
    }
    while (input.includes(find)) {
        input = input.replace(find, replace);
    }
    return input;
}
exports.replaceAll = replaceAll;
var SEM_VER = /^(\d+\.\d+\.\d+(?:\.\d+)?)(?:-([A-Za-z0-9\.\-]+))?(?:\+([A-Za-z0-9\.\-]+))?$/;
var MAIN = 1;
var TAG = 2;
var DATE_YYYYMMDD = /\d{4}(\d{4})/;
function convertVersion(input) {
    var match = input.match(SEM_VER);
    if (match) {
        var release = match[MAIN];
        if (release.split(".").length === 4) {
            return release;
        }
        var finalNumber = ".";
        var tag = match[TAG];
        if (tag) {
            var tagComponents = tag.split(".");
            if (tagComponents.length !== 0) {
                var date = tagComponents[0].match(DATE_YYYYMMDD);
                if (date) {
                    finalNumber += date[1];
                }
                var lastIndex = tagComponents.length - 1;
                if (!Number.isNaN(Number.parseInt(tagComponents[lastIndex]))) {
                    finalNumber += tagComponents[lastIndex];
                }
            }
        }
        if (finalNumber !== ".") {
            return release + finalNumber;
        }
        else {
            return release;
        }
    }
    else {
        return replaceAll(input, "_", "-");
    }
}
exports.convertVersion = convertVersion;
