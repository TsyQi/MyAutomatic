"use strict";
var fs = require('fs');
var path = require('path');
var q_1 = require('q');
var findFile_1 = require('./findFile');
var serviceModuleInfo_1 = require('./serviceModuleInfo');
var common_1 = require('./common');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
// Map of Service name -> Full service module info file path.
var knownServicePaths = {};
/**
* Locate and load service module info for the given service.
* @param: service - service module name, resolvable to a .json or .js file.
*
* To locate the service module info, ServiceHub will do the following:
*   * If servicehub.config.json does not exist or it doesn't have the services folder, servicehub will fail to locate the service.
*   * ServiceHub will search for '*\<service>.servicehub.service.json' in the services folder.
*   * If it cannot find it there, it'll use discoveryServices to delegate search to them.
*   * If the service module info is found, ServiceHub will load it by using fs.readFile and JSON.Parse
*/
function getServiceModuleInfo(logger, service, config) {
    if (!logger) {
        throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('logger'));
    }
    if (!service) {
        throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('service'));
    }
    if (!config) {
        throw new common_1.ServiceHubError(common_1.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('config'));
    }
    if (!config.servicesFolderPath) {
        throw new common_1.ServiceHubError(common_1.ErrorKind.ConfigurationError, libraryResourceStrings_1.LibraryResourceStrings.noFolderSpecified);
    }
    // Check known locations first and ensure the file still exist there
    var knownServicePath = knownServicePaths[service];
    if (knownServicePath) {
        logger.info("Service module info for '" + service + "' has been loaded before from '" + knownServicePath + "'. Trying to load it from there again.");
        return q_1.ninvoke(fs, 'access', knownServicePath, fs.R_OK)
            .then(function () { return loadServiceModuleInfo(logger, service, knownServicePath); }, function (err) {
            logger.info("Service module info for '" + service + "' is missing at '" + knownServicePath + "'. Trying to discover the service again.");
            delete knownServicePaths[service];
            return getServiceModuleInfo(logger, service, config);
        });
    }
    // Keep in sync with VsixDiscoveryService, \src\CoreClr\services\ServiceHubVsixServiceDiscovery\Service\DiscoveryService.cs
    var filePattern = '*/' + service + '.servicehub.service.json';
    return findFile_1.default(filePattern, { cwd: config.servicesFolderPath, nodir: true, fileSelector: serviceModuleFileSelector })
        .then(function (filePath) { return filePath || !config.discoveryHelper ? { filePath: filePath } : config.discoveryHelper(service); })
        .then(function (discoveryResult) {
        if (!discoveryResult || !discoveryResult.filePath) {
            var message = discoveryResult && discoveryResult.error ?
                libraryResourceStrings_1.LibraryResourceStrings.cannotFindServiceModuleFileWithReason(filePattern, config.servicesFolderPath, discoveryResult.error.message) :
                libraryResourceStrings_1.LibraryResourceStrings.cannotFindServiceModuleFile(filePattern, config.servicesFolderPath);
            throw new common_1.ServiceHubError(common_1.ErrorKind.ServiceModuleInfoNotFound, message);
        }
        return loadServiceModuleInfo(logger, service, discoveryResult.filePath);
    });
}
exports.getServiceModuleInfo = getServiceModuleInfo;
function serviceModuleFileSelector(files) {
    if (!files || files.length === 0) {
        return null;
    }
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var file = files_1[_i];
        if (path.extname(file) === '.json') {
            return file;
        }
    }
    return files[0];
}
function loadServiceModuleInfo(logger, service, filePath) {
    logger.info(libraryResourceStrings_1.LibraryResourceStrings.loadingServiceModule(filePath, service));
    // Use fs.readFile + JSON.parse to load service module instead of require() so:
    // 1. Only JSON format is supported;
    // 2. require() caches the files it loads. We add name and serviceBaseDirectory properties to the object after loading.
    //    The next time when we load the same service module info file, require() will return the cached instance
    //    with the name and serviceBaseDirectory set on it already, and we'll reject it.
    // 3. Service module info load is async and doesn't block the controller.
    // 4. The load happens from the specified path only. Node module discovery is not needed here.
    return common_1.parseFileAsJson(filePath)
        .then(function (serviceModule) {
        if (serviceModule.name) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.serviceInfoInvalid(filePath, service, 'name');
            throw new common_1.ServiceHubError(common_1.ErrorKind.ServiceModuleInfoInvalidPropertyError, message);
        }
        if (serviceModule.serviceBaseDirectory) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.serviceInfoInvalid(filePath, service, 'serviceBaseDirectory');
            throw new common_1.ServiceHubError(common_1.ErrorKind.ServiceModuleInfoInvalidPropertyError, message);
        }
        if (serviceModule.hostId && serviceModule.hostId.indexOf(' ') >= 0) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.serviceInfoInvalidSpaceInHostId(filePath, service, serviceModule.hostId);
            throw new common_1.ServiceHubError(common_1.ErrorKind.ServiceModuleInfoInvalidPropertyError, message);
        }
        serviceModule.name = service;
        serviceModule.serviceBaseDirectory = path.dirname(filePath);
        var result = new serviceModuleInfo_1.ServiceModuleInfo(serviceModule);
        // Cache the service module info file path.
        knownServicePaths[service] = filePath;
        return result;
    })
        .catch(function (err) {
        throw new common_1.ServiceHubError(common_1.ErrorKind.ServiceModuleInfoLoadError, libraryResourceStrings_1.LibraryResourceStrings.cannotResolveServiceModuleInfo(filePath, service, err.message));
    });
}

//# sourceMappingURL=serviceDiscovery.js.map
// SIG // Begin signature block
// SIG // MIIhygYJKoZIhvcNAQcCoIIhuzCCIbcCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // pXIJ2UbK6na9VQo76rqSa9i4CuRcRgOCA7CPflOgeHKg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFcwwghXIAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggb4wGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIDcggubeD1tS
// SIG // YHpzxoZCsQYSzNci7Gv0AFb47MKBNHh9MFIGCisGAQQB
// SIG // gjcCAQwxRDBCoCiAJgBzAGUAcgB2AGkAYwBlAEQAaQBz
// SIG // AGMAbwB2AGUAcgB5AC4AagBzoRaAFGh0dHA6Ly9taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAGan6kyw
// SIG // cnnsoBmULC8F4T85VWfUM2fjA8iQmcp0ARe4+B3Edk2S
// SIG // Dx0sZ2z11KBPxWm4U9d6mGm2c/7J+vN+NQArLgK5cNaN
// SIG // vkckagMYdMfp/FYthE8YHGdjubtOeOla1M7eG/cFg8Vq
// SIG // QRynPrQxI9lkmjASZ1iaLnBkxWChVMb8zqDQ8pI4+cwI
// SIG // 9rM8pYkY74EHgN9F8sUj3d6OZissMHqm3wLw4fMlhKkI
// SIG // afKg8VE71zshm5wSVWmLlQDVNg9m9ocptnA+Ni6d7EBJ
// SIG // MKIvV7rEM5YFAKafnbZTLYz8Mfdq2Hfs+DZ7/KmNEroA
// SIG // QDrjHcrCFPdHJH0TL2tnRoSMyE+hghNGMIITQgYKKwYB
// SIG // BAGCNwMDATGCEzIwghMuBgkqhkiG9w0BBwKgghMfMIIT
// SIG // GwIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBOwYLKoZIhvcN
// SIG // AQkQAQSgggEqBIIBJjCCASICAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQg5Wmiz+b0fuBp6dgjxYgB
// SIG // Ah7oy3OfyZjGokz5NhX5/YECBlp7W8BDeRgTMjAxODAy
// SIG // MTMwNTEyMzQuODUxWjAHAgEBgAIB9KCBt6SBtDCBsTEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEMMAoGA1UECxMDQU9DMSYw
// SIG // JAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo3MERELTRCNUIt
// SIG // NDU2ODElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaCCDsswggZxMIIEWaADAgECAgphCYEq
// SIG // AAAAAAACMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9v
// SIG // dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0x
// SIG // MDA3MDEyMTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwT
// SIG // l/X6f2mUa3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYr
// SIG // W/AVUycEMR9BGxqVHc4JE458YTBZsTBED/FgiIRUQwzX
// SIG // Tbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJY
// SIG // R4YyhB50YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvf
// SIG // YfxGwScdJGcSchohiq9LZIlQYrFd/XcfPfBXday9ikJN
// SIG // QFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDa
// SIG // TgaRtogINeh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38
// SIG // vMDJRF1eFpwBBU8iTQIDAQABo4IB5jCCAeIwEAYJKwYB
// SIG // BAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8
// SIG // RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIA
// SIG // QwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/
// SIG // MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjE
// SIG // MFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jv
// SIG // b0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcB
// SIG // AQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
// SIG // XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSABAf8EgZUwgZIw
// SIG // gY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQ
// SIG // Uy9kZWZhdWx0Lmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // B+aIUQ3ixuCYP4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpX
// SIG // bRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7
// SIG // uVOMzPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMiv
// SIG // v3/Gf/I3fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO
// SIG // 9sp6AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v
// SIG // /rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZ
// SIG // SnFjnXshbcOco6I8+n99lmqQeKZt0uGc+R38ONiU9Mal
// SIG // CpaGpL2eGq4EQoO4tYCbIjggtSXlZOz39L9+Y1klD3ou
// SIG // OVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7
// SIG // cQnfXXSYIghh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhI
// SIG // q/fecn5ha293qYHLpwmsObvsxsvYgrRyzR30uIUBHoD7
// SIG // G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch
// SIG // 98isTtoouLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3Qy
// SIG // S99je/WZii8bxyGvWbWu3EQ8l1Bx16HSxVXjad5XwdHe
// SIG // MMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzV
// SIG // s341Hgi62jbb01+P3nSISRIwggTYMIIDwKADAgECAhMz
// SIG // AAAAt/giFH0DIv76AAAAAAC3MA0GCSqGSIb3DQEBCwUA
// SIG // MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE3
// SIG // MTAwMjIzMDA1MloXDTE5MDEwMjIzMDA1MlowgbExCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsTA0FPQzEmMCQG
// SIG // A1UECxMdVGhhbGVzIFRTUyBFU046NzBERC00QjVCLTQ1
// SIG // NjgxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFNlcnZpY2UwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQC0hXZnLn7NAl1QCxJ8ZBM3LvZXoNoTNaHi
// SIG // gy1WSNDcr8jKPsVrrb5krZElwM+di1G43efi5k3O2ESP
// SIG // G18E+nrdaMJrnOof+fCwXRLiF4XdTOXQI2gztw9EwVlY
// SIG // ndf0dzdJZ4771xtmJJjBNA2GkAE7mJQPXAt+SULHh8fI
// SIG // HrwP3xVwT8Ly4NNwJWqzln11U3Jm1NSsUM68ZdCqhxBu
// SIG // RH0E4rMvmcDwxjnanzik7zq71oQ2eIu4HF/Cpv/he7RG
// SIG // 2RKZ2uBwkom8YBEdiuUBoEubkXJSBzRL0QZRbLWaYDs9
// SIG // fYMzVV59kjNYkS83ffjOOms77ZsjDxAnajpcvuba2J47
// SIG // AgMBAAGjggEbMIIBFzAdBgNVHQ4EFgQUbWKvg3tEhnVx
// SIG // d9JNW4/uRC5gNWkwHwYDVR0jBBgwFoAU1WM6XIoxkPND
// SIG // e3xGG8UzaFqFbVUwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0
// SIG // cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJv
// SIG // ZHVjdHMvTWljVGltU3RhUENBXzIwMTAtMDctMDEuY3Js
// SIG // MFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9N
// SIG // aWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcnQwDAYDVR0T
// SIG // AQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkq
// SIG // hkiG9w0BAQsFAAOCAQEAaaSp0uuxop+K5nske7Qn7t56
// SIG // ojZWiDVVHIfZvNv7ARlMxECedM+O/zhwRwjhD/jfPHww
// SIG // Wsgg7052h1JaKDxnB6rxIWJkNvU3+UobspjaSDaZFdRU
// SIG // pTTW3EDpzWhGs/+SIamgg+UUZC+JVYF5mMAd7b6YdMxU
// SIG // A+YAd823NNHewpUlEb3ok6QlafT9JZeOqu9TTzCOcL+p
// SIG // 2WeOZ097deqx9beMd46h9KUypgf28PpjdSOcgWZRmviW
// SIG // Vu6b4v445460NOIDGQDwBhoYOu1XMT/KxjnRP3ry5Tq+
// SIG // +s4RI0QegwpxKJ6jpYGQ/XaNhjhkch2wrLWC84eIjOqr
// SIG // U4KV2OH4aaGCA3YwggJeAgEBMIHhoYG3pIG0MIGxMQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOjcwREQtNEI1Qi00
// SIG // NTY4MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNloiUKAQEwCQYFKw4DAhoFAAMVANXj0P5Z
// SIG // NuTCZFlJB+nXIozHReoNoIHBMIG+pIG7MIG4MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJzAlBgNV
// SIG // BAsTHm5DaXBoZXIgTlRTIEVTTjoyNjY1LTRDM0YtQzVE
// SIG // RTErMCkGA1UEAxMiTWljcm9zb2Z0IFRpbWUgU291cmNl
// SIG // IE1hc3RlciBDbG9jazANBgkqhkiG9w0BAQUFAAIFAN4s
// SIG // m90wIhgPMjAxODAyMTIyMzAzNTdaGA8yMDE4MDIxMzIz
// SIG // MDM1N1owdzA9BgorBgEEAYRZCgQBMS8wLTAKAgUA3iyb
// SIG // 3QIBADAKAgEAAgIhOQIB/zAHAgEAAgIWSzAKAgUA3i3t
// SIG // XQIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZ
// SIG // CgMBoAowCAIBAAIDFuNgoQowCAIBAAIDHoSAMA0GCSqG
// SIG // SIb3DQEBBQUAA4IBAQATLQIOR7jowh5lbdEKT+A7JxF2
// SIG // 79i2ezAROY9aZYoGSPyPJTGVVv0dsghT6pdYvCm1lwJ8
// SIG // agSk52Ba00mShnFC+TZVrlTYRoxs+FK2xXHAf2sNv7cj
// SIG // PXD+YbJWP5xpzt4JQmIlF1d0U5llbdu+WA2v+Kkknvmh
// SIG // fNgHy7WpNX8lXLCx3IH1O+02ZToYikWIe7yxyCGMsWxX
// SIG // iTo5y+f6czoneOmpw27QpJV3kzMTTJxJIeasYHK06iQZ
// SIG // 1Y1Y+J0sxGq7uhCcr0ai3TZpihqpjqx+kDTgOdRugBAu
// SIG // Zg7JZYT+53eRyBtrX8muMvk72bAEzwu8xFGcNoQ+c7QT
// SIG // 0wQg+dwZMYIC9TCCAvECAQEwgZMwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAAC3+CIUfQMi/voAAAAA
// SIG // ALcwDQYJYIZIAWUDBAIBBQCgggEyMBoGCSqGSIb3DQEJ
// SIG // AzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQg
// SIG // sToB6dmkErfAfBYEy/PEF6BhgUNKi/T2GOgWyRjPPHcw
// SIG // geIGCyqGSIb3DQEJEAIMMYHSMIHPMIHMMIGxBBTV49D+
// SIG // WTbkwmRZSQfp1yKMx0XqDTCBmDCBgKR+MHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAAt/giFH0DIv76
// SIG // AAAAAAC3MBYEFFD+6OPOSqQNiU1Q6Isi1Ahg2Aq0MA0G
// SIG // CSqGSIb3DQEBCwUABIIBAFC4PjDfY/1lhtpuQbyJtFfu
// SIG // s9f3MC6nQWwwTXL8trKF5P4rsHDmf1QWJyKAQW48U2vh
// SIG // Y0pPwr9W+wwrSbrlzlh42y3r5hjKjL9RXD72LViZT+Tj
// SIG // UdPiGiGg8XZDFIny7iGPi6KE8G5trnRIHyRqvkn5q8vR
// SIG // l7D2aBw1iEXwY8gYVyyqJeTu5TNgewKC8akYO1eydGcv
// SIG // gD5oefefqkAXM4RsOqm5mfZItfi3MjuHYZgo+kUv9wGn
// SIG // MGiB9OTIx7/Aq/RRCov88zqX1ViIDdEXGejGispfRY/c
// SIG // V7W+Qbs8yeLN9axTc93rrHttU6s06YiCtLBCd5GpU1D1
// SIG // pCghloc2API=
// SIG // End signature block
