"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var fs = require('fs');
var e = require('events');
var q = require('q');
var c = require('./common');
var libraryResourceStrings_1 = require('./libraryResourceStrings');
/**
 * Service Manager
 *
 * Events:
 *     servicesStarted(serviceName, stream) - at least one client has open connection to a service running by this service manager.
 *     servicesEnded - there are no more open connections to any service running by this service manager.
 */
var ServiceManager = (function (_super) {
    __extends(ServiceManager, _super);
    function ServiceManager(logger) {
        _super.call(this);
        this.endPoints = [];
        this.streams = [];
        this.logger = logger;
    }
    ServiceManager.prototype.startService = function (serviceModuleInfo) {
        if (serviceModuleInfo == null) {
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('serviceModuleInfo'));
        }
        this.logger.info(libraryResourceStrings_1.LibraryResourceStrings.startingService(serviceModuleInfo.name));
        return this.startServiceObject(serviceModuleInfo);
    };
    ServiceManager.loadFunction = function (moduleName, constructor) {
        if (!moduleName) {
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('moduleName'));
        }
        if (!constructor) {
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('constructor'));
        }
        var checkFile = path.isAbsolute(moduleName) ? q.ninvoke(fs, 'access', moduleName, fs.F_OK | fs.R_OK) : q.resolve(null);
        return checkFile.then(function () {
            var nodeModule = require(moduleName);
            var nodeModuleExport = nodeModule[constructor];
            if (typeof nodeModuleExport !== 'function') {
                var message = libraryResourceStrings_1.LibraryResourceStrings.variableMustBeFunction(constructor, moduleName, typeof nodeModuleExport);
                throw new c.ServiceHubError(c.ErrorKind.InvalidOperation, message);
            }
            return function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i - 0] = arguments[_i];
                }
                var result = Object.create(nodeModuleExport.prototype);
                result.constructor.apply(result, params);
                return result;
            };
        });
    };
    ServiceManager.prototype.startServiceObject = function (serviceModuleInfo) {
        var _this = this;
        var name = serviceModuleInfo.name;
        var serviceEntryPoint = (serviceModuleInfo.entryPoint);
        if (!serviceEntryPoint.scriptPath) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.serviceEntryPointFileNameNotFound(name);
            this.logger.error(message);
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, message);
        }
        if (!serviceEntryPoint.constructorFunction) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.serviceEntryPointConstructorNotFound(name);
            this.logger.error(message);
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, message);
        }
        var moduleName = ServiceManager.getFullPath(serviceModuleInfo, serviceEntryPoint.scriptPath);
        var constructor = serviceEntryPoint.constructorFunction;
        var serviceOptions = {
            name: name,
            logger: this.logger,
            noStreamTrace: true,
        };
        return ServiceManager.loadFunction(moduleName, constructor)
            .catch(function (err) {
            var message = libraryResourceStrings_1.LibraryResourceStrings.loadServiceModuleError(name, err.message);
            _this.logger.error(message);
            return q.reject(new Error(message));
        })
            .then(function (serviceModuleFactory) { return c.serverManager.startService(serviceOptions, function (stream, logger) {
            logger.info(libraryResourceStrings_1.LibraryResourceStrings.connectedToService(name));
            // Keep a reference to the service stream so it is not garbage collected.
            if (_this.streams.push(stream) === 1) {
                _this.emit(ServiceManager.ServicesStartedEvent, name, stream);
            }
            var serviceModuleInstance = null;
            stream.once('end', function () {
                logger.info("A stream to " + name + " ended.");
                var disposal = q.resolve(null);
                if (serviceModuleInstance && typeof serviceModuleInstance.disposeAsync === 'function') {
                    var instanceName_1 = serviceModuleInstance.constructor.name ? serviceModuleInstance.constructor.name + ' ' : '';
                    disposal = disposal
                        .then(function () { return serviceModuleInstance.disposeAsync(); })
                        .catch(function (reason) {
                        logger.error(libraryResourceStrings_1.LibraryResourceStrings.disposeServiceError(instanceName_1, name, reason.stack || reason.message || reason));
                        return null;
                    });
                }
                disposal.finally(function () {
                    var index = _this.streams.indexOf(stream);
                    if (index >= 0) {
                        _this.streams.splice(index, 1);
                    }
                    if (_this.streams.length === 0) {
                        _this.emit(ServiceManager.ServicesEndedEvent);
                    }
                }).done();
            });
            try {
                var svcs = {
                    logger: _this.logger,
                };
                serviceModuleInstance = serviceModuleFactory.call(_this, stream, svcs);
            }
            catch (err) {
                logger.error(libraryResourceStrings_1.LibraryResourceStrings.createServiceInstanceError(name, err.stack || err.message || err));
                stream.end();
                return;
            }
        }); });
    };
    ServiceManager.getFullPath = function (smi, fileNameOrPath) {
        if (!fileNameOrPath) {
            throw new c.ServiceHubError(c.ErrorKind.InvalidArgument, libraryResourceStrings_1.LibraryResourceStrings.variableIsNotDefined('fileNameOrPath'));
        }
        var result;
        if (path.isAbsolute(fileNameOrPath)) {
            result = fileNameOrPath;
        }
        else {
            result = smi.serviceBaseDirectory ? path.join(smi.serviceBaseDirectory, fileNameOrPath) : fileNameOrPath;
        }
        return result.replace(/\\/g, '/');
    };
    ServiceManager.ServicesStartedEvent = 'servicesStarted';
    ServiceManager.ServicesEndedEvent = 'servicesEnded';
    return ServiceManager;
}(e.EventEmitter));
exports.ServiceManager = ServiceManager;

//# sourceMappingURL=serviceManager.js.map
// SIG // Begin signature block
// SIG // MIIhxgYJKoZIhvcNAQcCoIIhtzCCIbMCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 8L+NeZ53aErkolnHkQijPES2qtoToL1OhbZgh74EN2qg
// SIG // ggtWMIIE3jCCA8agAwIBAgITMwAAAcy1W0IXB2ATEQAA
// SIG // AAABzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTE3MDkxMjE4MDcwNloX
// SIG // DTE4MDkxMjE4MDcwNlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // qZB1moyDMhvorMTex1h+UmWZ52gS7QV0SxKYiTA2P3Ep
// SIG // m3JVmRehPh979B7y6IQgC1C1jrZvtxI21cmxI2KOfkIu
// SIG // 6QywYHZohyxI1JMbfDeVZVCHaafQKW+IZeKZwjAMl2Cw
// SIG // GqeLCmRY3bNRsq5x9ldPKLQX5dZgsCuGeSgrWfQbvlw5
// SIG // 9LTN/Ds5kGkZf2dMSzu6n1lVGgY/7KT75ZCq/p7p4Eru
// SIG // STIPMUnCks35BzTHKwAwEP0QyhnsJGPq3a2Kk/XGmgiU
// SIG // Is9Co0CnbcwsXdXxQceTdcovfituYLlo8qowRTX575Lh
// SIG // dSSJQFyepgmTN94YvAm0bUWaQsK5czBxiwIDAQABo4IB
// SIG // XTCCAVkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFlVxIKPLL3blp451S/Ro/0y
// SIG // ArJ/MDQGA1UdEQQtMCukKTAnMQ0wCwYDVQQLEwRNT1BS
// SIG // MRYwFAYDVQQFEw0yMzA4NjUrMjQyNDA2MB8GA1UdIwQY
// SIG // MBaAFOb8X3u7IgBY5HJOtfQhdCMy5u+sMFYGA1UdHwRP
// SIG // ME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY3JsL3Byb2R1Y3RzL01pY0NvZFNpZ1BDQV8y
// SIG // MDEwLTA3LTA2LmNybDBaBggrBgEFBQcBAQROMEwwSgYI
// SIG // KwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2kvY2VydHMvTWljQ29kU2lnUENBXzIwMTAtMDct
// SIG // MDYuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggEBANGT7iex7letmRmMI2tjEMw591UYclg78am3
// SIG // zuDKljBRU8yY8BJTGCvoGpikCbUB0SNGoXj3/2XOTlse
// SIG // YC5zfrAJekrn1313An/RxRGJsD8y7Ya38xAJ244R01Yd
// SIG // 9IVXAin+6rhRv0PufFSfH7mdyeAMDE4Y0Dj3j6pw8Cob
// SIG // tPMrYXtwihbvO/faO/afni6lv4RlCSU5sdIgCdq42Q/k
// SIG // J31KgwF17IJ30LmgQyumPqUe9UsDdCWIo2BiJc2NOvaR
// SIG // ChsDvWdCyaOrmpP9elruUdb5hm5M5wBYLEPT+kTIAx6f
// SIG // 78TM4c2wyev6XQjaR4FXESduccHGT35ECK8c7quVDqMw
// SIG // ggZwMIIEWKADAgECAgphDFJMAAAAAAADMA0GCSqGSIb3
// SIG // DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYD
// SIG // VQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBB
// SIG // dXRob3JpdHkgMjAxMDAeFw0xMDA3MDYyMDQwMTdaFw0y
// SIG // NTA3MDYyMDUwMTdaMH4xCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // KDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQDpDmRQeWe1xOP9CQBMnpSs91Zo6kTYz8VY
// SIG // T6mldnxtRbrTOZK0pB75+WWC5BfSj/1EnAjoZZPOLFWE
// SIG // v30I4y4rqEErGLeiS25JTGsVB97R0sKJHnGUzbV/S7Sv
// SIG // CNjMiNZrF5Q6k84mP+zm/jSYV9UdXUn2siou1YW7WT/4
// SIG // kLQrg3TKK7M7RuPwRknBF2ZUyRy9HcRVYldy+Ge5JSA0
// SIG // 3l2mpZVeqyiAzdWynuUDtWPTshTIwciKJgpZfwfs/w7t
// SIG // gBI1TBKmvlJb9aba4IsLSHfWhUfVELnG6Krui2otBVxg
// SIG // xrQqW5wjHF9F4xoUHm83yxkzgGqJTaNqZmN4k9Uwz5Uf
// SIG // AgMBAAGjggHjMIIB3zAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU5vxfe7siAFjkck619CF0IzLm76wwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgZ0GA1UdIASBlTCBkjCBjwYJKwYBBAGCNy4DMIGB
// SIG // MD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAG
// SIG // CCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBs
// SIG // AGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAadO9XTyl7xBaFeLhQ0yL8
// SIG // CZ2sgpf4NP8qLJeVEuXkv8+/k8jjNKnbgbjcHgC+0jVv
// SIG // r+V/eZV35QLU8evYzU4eG2GiwlojGvCMqGJRRWcI4z88
// SIG // HpP4MIUXyDlAptcOsyEp5aWhaYwik8x0mOehR0PyU6zA
// SIG // DzBpf/7SJSBtb2HT3wfV2XIALGmGdj1R26Y5SMk3YW0H
// SIG // 3VMZy6fWYcK/4oOrD+Brm5XWfShRsIlKUaSabMi3H0oa
// SIG // Dmmp19zBftFJcKq2rbtyR2MX+qbWoqaG7KgQRJtjtrJp
// SIG // iQbHRoZ6GD/oxR0h1Xv5AiMtxUHLvx1MyBbvsZx//CJL
// SIG // SYpuFeOmf3Zb0VN5kYWd1dLbPXM18zyuVLJSR2rAqhOV
// SIG // 0o4R2plnXjKM+zeF0dx1hZyHxlpXhcK/3Q2PjJst67Tu
// SIG // zyfTtV5p+qQWBAGnJGdzz01Ptt4FVpd69+lSTfR3BU+F
// SIG // xtgL8Y7tQgnRDXbjI1Z4IiY2vsqxjG6qHeSF2kczYo+k
// SIG // yZEzX3EeQK+YZcki6EIhJYocLWDZN4lBiSoWD9dhPJRo
// SIG // YFLv1keZoIBA7hWBdz6c4FMYGlAdOJWbHmYzEyc5F3iH
// SIG // Ns5Ow1+y9T1HU7bg5dsLYT0q15IszjdaPkBCMaQfEAjC
// SIG // Vpy/JF1RAp1qedIX09rBlI4HeyVxRKsGaubUxt8jmpZ1
// SIG // xTGCFcgwghXEAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
// SIG // bmcgUENBIDIwMTACEzMAAAHMtVtCFwdgExEAAAAAAcww
// SIG // DQYJYIZIAWUDBAIBBQCggbowGQYJKoZIhvcNAQkDMQwG
// SIG // CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisG
// SIG // AQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIA2Ab7vvErKP
// SIG // bB56gKmOlKRKOzwpTNu9TOH9rVwdPy4BME4GCisGAQQB
// SIG // gjcCAQwxQDA+oCSAIgBzAGUAcgB2AGkAYwBlAE0AYQBu
// SIG // AGEAZwBlAHIALgBqAHOhFoAUaHR0cDovL21pY3Jvc29m
// SIG // dC5jb20wDQYJKoZIhvcNAQEBBQAEggEAoDU6BvXX9dtJ
// SIG // AvR5Yaj7mw1J4J4oU9v2CVuV2rcSfJwqpwnqpZwUkQRv
// SIG // BW5kBs8FcczV2ac81hiZGWYWpphi4Z5l/bU6A3jsPCEp
// SIG // FFjh6hQY0JNvinGYJ4gMxIROmOXDnnqWaX1t5gzZ+mHl
// SIG // 0l42n0SrVolLZjGb5iZAbhkvu2R3qoy8YqEEcQ1r13/K
// SIG // yAi1ds93o2kkVPd+aqg7sZ2ZEzpmWRX75epasraFBHlL
// SIG // 1VCDNdBWbvxKdVISRviHDEqgn2UoFcGn/ss1tALmTxO9
// SIG // u7/fsgfp1sXkyTqhFpfb9PSQRB3Iqe/sJp7j8DhrdBfo
// SIG // eml0JxJUUSMXobs/6fXCjaGCE0YwghNCBgorBgEEAYI3
// SIG // AwMBMYITMjCCEy4GCSqGSIb3DQEHAqCCEx8wghMbAgED
// SIG // MQ8wDQYJYIZIAWUDBAIBBQAwggE8BgsqhkiG9w0BCRAB
// SIG // BKCCASsEggEnMIIBIwIBAQYKKwYBBAGEWQoDATAxMA0G
// SIG // CWCGSAFlAwQCAQUABCBwnZKeKgCd0PegxC+Dt8u5YWU1
// SIG // mGZYr7HZTYD2EpKOVQIGWnt7n62CGBMyMDE4MDIxMzA1
// SIG // MTIzNC44ODFaMAcCAQGAAgH0oIG4pIG1MIGyMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJzAlBgNV
// SIG // BAsTHm5DaXBoZXIgRFNFIEVTTjoyMTM3LTM3QTAtNEFB
// SIG // QTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaCCDsowggZxMIIEWaADAgECAgphCYEqAAAA
// SIG // AAACMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBD
// SIG // ZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3
// SIG // MDEyMTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwMIIBIjANBgkqhkiG9w0B
// SIG // AQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6
// SIG // f2mUa3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AV
// SIG // UycEMR9BGxqVHc4JE458YTBZsTBED/FgiIRUQwzXTbg4
// SIG // CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4Yy
// SIG // hB50YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxG
// SIG // wScdJGcSchohiq9LZIlQYrFd/XcfPfBXday9ikJNQFHR
// SIG // D5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaR
// SIG // togINeh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJ
// SIG // RF1eFpwBBU8iTQIDAQABo4IB5jCCAeIwEAYJKwYBBAGC
// SIG // NxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvF
// SIG // M2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBB
// SIG // MAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8G
// SIG // A1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYG
// SIG // A1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0Nl
// SIG // ckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQRO
// SIG // MEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIw
// SIG // MTAtMDYtMjMuY3J0MIGgBgNVHSABAf8EgZUwgZIwgY8G
// SIG // CSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9k
// SIG // ZWZhdWx0Lmh0bTBABggrBgEFBQcCAjA0HjIgHQBMAGUA
// SIG // ZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBt
// SIG // AGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aI
// SIG // UQ3ixuCYP4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpXbRkw
// SIG // s8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOM
// SIG // zPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/G
// SIG // f/I3fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO9sp6
// SIG // AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v/rbl
// SIG // jjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFj
// SIG // nXshbcOco6I8+n99lmqQeKZt0uGc+R38ONiU9MalCpaG
// SIG // pL2eGq4EQoO4tYCbIjggtSXlZOz39L9+Y1klD3ouOVd2
// SIG // onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnf
// SIG // XXSYIghh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fe
// SIG // cn5ha293qYHLpwmsObvsxsvYgrRyzR30uIUBHoD7G4kq
// SIG // VDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98is
// SIG // TtoouLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99j
// SIG // e/WZii8bxyGvWbWu3EQ8l1Bx16HSxVXjad5XwdHeMMD9
// SIG // zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341
// SIG // Hgi62jbb01+P3nSISRIwggTZMIIDwaADAgECAhMzAAAA
// SIG // rzWP/9MiRXZLAAAAAACvMA0GCSqGSIb3DQEBCwUAMHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE2MDkw
// SIG // NzE3NTY1NloXDTE4MDkwNzE3NTY1NlowgbIxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xDDAKBgNVBAsTA0FPQzEnMCUGA1UE
// SIG // CxMebkNpcGhlciBEU0UgRVNOOjIxMzctMzdBMC00QUFB
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
// SIG // CgKCAQEAk+hAhg4ay3HwAw2mj6TnYRLQYeqQapVWureg
// SIG // TUspZNhRmjtdZ5OtiO5D1N1d1O8ScZ9tP/XqlyrIOrdV
// SIG // EdSnM7V0RE2YTeF6pcfdqSzMiB8Ibz7xz4Tl4WwP58Pu
// SIG // OYGLKTMnWfhPzqWbjQYDrt7USVNi41kn9egKTLzG4B9X
// SIG // 3dGb/04H0GxgmJeBrmEOkHnkCyjL+b0QazzBcxEQXuLj
// SIG // UvY/YXrkRa91Qa1LDLXpNBoRN3CgP+isK7QHk76ug8nZ
// SIG // 4nSRcGGwFXpE9ISRDfzbJDNmAMwgi+7BaD1xH599C+XS
// SIG // aCeGnmmyqrMcShdU+Qdp/ndvxz/GnNLxUlCrx5c4owID
// SIG // AQABo4IBGzCCARcwHQYDVR0OBBYEFH0eVcYxitpgCwZm
// SIG // sBTZavx7EvbhMB8GA1UdIwQYMBaAFNVjOlyKMZDzQ3t8
// SIG // RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNybDBa
// SIG // BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWlj
// SIG // VGltU3RhUENBXzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB
// SIG // /wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZI
// SIG // hvcNAQELBQADggEBAGrIAIZ4+wxCnBDW9yisD4Rqi/zd
// SIG // W+ofWkBEqS4TX4saSXZpEirmhOb45rrRjzwuKe1LNSDg
// SIG // gbr61YMXFZt1U5o8f2OQy6AIZC/zYfNK8IrwRU6IjTxr
// SIG // kI0A4msjSax5ZyDnZTOu+uQiwUINdWUP1J3NHuMw3qxa
// SIG // hhrChYdHJO58POJyODkYbjx1jeYB2cd3cKPa+lm5iUBZ
// SIG // kbbF8ruFLZ3VGH/jkxtyf7EJrRADrsUlJufNo36itbj1
// SIG // StU0FHyP8oLDNgjSMIg2ddcIGWtiF5HTA0Kyc4zRFah1
// SIG // Kaz/gEULRbHdcvZZNblSBs7miH//Lays0fzgo8/8HDkf
// SIG // 29AQ09uhggN0MIICXAIBATCB4qGBuKSBtTCBsjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEMMAoGA1UECxMDQU9DMScwJQYD
// SIG // VQQLEx5uQ2lwaGVyIERTRSBFU046MjEzNy0zN0EwLTRB
// SIG // QUExJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFNlcnZpY2WiJQoBATAJBgUrDgMCGgUAAxUA2OqsFS1v
// SIG // LqUtpv0CA1DigBv+TiOggcEwgb6kgbswgbgxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xDDAKBgNVBAsTA0FPQzEnMCUGA1UE
// SIG // CxMebkNpcGhlciBOVFMgRVNOOjI2NjUtNEMzRi1DNURF
// SIG // MSswKQYDVQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2Ug
// SIG // TWFzdGVyIENsb2NrMA0GCSqGSIb3DQEBBQUAAgUA3iyC
// SIG // xDAiGA8yMDE4MDIxMjIxMTY1MloYDzIwMTgwMjEzMjEx
// SIG // NjUyWjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDeLILE
// SIG // AgEAMAcCAQACAghQMAcCAQACAhkSMAoCBQDeLdREAgEA
// SIG // MDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwGg
// SIG // CjAIAgEAAgMW42ChCjAIAgEAAgMehIAwDQYJKoZIhvcN
// SIG // AQEFBQADggEBADupCqv6J59eTMiTrxJ4xi9XUuQn7doQ
// SIG // dlK5Q5PJGwJG4vxK/YGckYSJq46249ILI2vEu8uku8Pm
// SIG // QTqj2/DjWTsNc0KzqctozYz7hyp61bTS0aa8zXohqYkj
// SIG // 8fcIddGxdSHIeafWv1v0fli/RLMp7K93RpeNMW9CDfOA
// SIG // cdfD7kmqFyIRWXRlad7KRGj4rseSw3P9xERn7iMeLN7d
// SIG // YYA5/QeZ9IAT9IsLgdcBN6PfKUPNJcB4YuLDkoY4FiSx
// SIG // rI3K2AbTCOMsRiq+XvWrR1ZDIby6XxlOwuk9Wbhr4pDK
// SIG // mIKwzz6Ae48mjUZP4h5E+f2Vo4oAio0FoxTxw647ZIL4
// SIG // G2YxggL1MIIC8QIBATCBkzB8MQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBQQ0EgMjAxMAITMwAAAK81j//TIkV2SwAAAAAArzAN
// SIG // BglghkgBZQMEAgEFAKCCATIwGgYJKoZIhvcNAQkDMQ0G
// SIG // CyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCDAHynC
// SIG // bCDJrwHMLh2UM8TgGaYA0m+UH/RSMhfKkjS65DCB4gYL
// SIG // KoZIhvcNAQkQAgwxgdIwgc8wgcwwgbEEFNjqrBUtby6l
// SIG // Lab9AgNQ4oAb/k4jMIGYMIGApH4wfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAACvNY//0yJFdksAAAAA
// SIG // AK8wFgQUHqnsVjDo2nZQ0lPHpgfTCWfnRvYwDQYJKoZI
// SIG // hvcNAQELBQAEggEAeHU8C/e+0TP0qiSbXqiKtHJPFfNj
// SIG // K1HVwQEHWv4u3+HKJjneJro9/5JTwWFYUH8UZCOT0reX
// SIG // hEmwwBOLwAvTfmmXrjkW0a5NGBRGLC3e7If7ZWdEcvq0
// SIG // JXF8kgX277TrZOYewoQBNuj5crWk15CqSNRgqlTzB2/q
// SIG // uL9LVxSCSgJ4MQ7mSfnxQSuyqzydN56xSR2LxXCCpl0z
// SIG // OHTB7F+jJMh+YgN/2Y6u/Bnp96hsh7j0zGugxt233gP3
// SIG // CwV8Ftu0fmpCY5othtLs5lPME53M4bxp17uM243uSguo
// SIG // R4R2n9xdkoMoPv8VS78wCJXRGKUlZpUycCZ3S+7atUpF
// SIG // eL3epA==
// SIG // End signature block
