/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
/* Node FS functions with promises. */
var fs = require("fs");
function promise(f) {
    return new Promise(function (resolve, reject) { return f(function (err, result) { return err ? reject(err) : resolve(result); }); });
}
/**
 * fs.appendFile(
 *      filename: string,
 *      data: any,
 *      options: { encoding?: string; mode?: number; flag?: string; },
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 * fs.appendFile(
 *      filename: string,
 *      data: any,
 *      options: { encoding?: string; mode?: string; flag?: string; },
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 * fs.appendFile(
 *      filename: string,
 *      data: any,
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 */
function appendFile(filename, data, options) {
    return promise(function (c) { return fs.appendFile(filename, data, options, c); });
}
exports.appendFile = appendFile;
/**
 * fs.lstat(path: string, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;
 */
function lstat(path) {
    return promise(function (c) { return fs.lstat(path, c); });
}
exports.lstat = lstat;
/**
 * fs.mkdir(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
 * fs.mkdir(path: string, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
 * fs.mkdir(path: string, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
 */
function mkdir(path, mode) {
    return promise(function (c) { return fs.mkdir(path, mode, c); });
}
exports.mkdir = mkdir;
/**
 * fs.readdir(path: string, callback?: (err: NodeJS.ErrnoException, files: string[]) => void): void;
 */
function readdir(path) {
    return promise(function (c) { return fs.readdir(path, c); });
}
exports.readdir = readdir;
function readFile(path, options) {
    return promise(function (c) { return fs.readFile(path, options, c); });
}
exports.readFile = readFile;
/**
 * fs.unlink(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
 */
function unlink(path) {
    return promise(function (c) { return fs.unlink(path, c); });
}
exports.unlink = unlink;
/**
 * fs.writeFile(
 *      filename: string,
 *      data: any,
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 * fs.writeFile(
 *      filename: string,
 *      data: any,
 *      options: { encoding?: string; mode?: number; flag?: string; },
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 *  fs.writeFile(
 *      filename: string,
 *      data: any,
 *      options: { encoding?: string; mode?: string; flag?: string; },
 *      callback?: (err: NodeJS.ErrnoException) => void):
 *      void;
 */
function writeFile(path, data, options) {
    return promise(function (c) { return fs.writeFile(path, data, options, c); });
}
exports.writeFile = writeFile;
