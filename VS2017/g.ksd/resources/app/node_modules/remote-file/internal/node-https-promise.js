/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var https = require("https");
(function (StatusCode) {
    StatusCode[StatusCode["OK"] = 200] = "OK";
    StatusCode[StatusCode["NotModified"] = 304] = "NotModified";
    StatusCode[StatusCode["NotFound"] = 404] = "NotFound";
})(exports.StatusCode || (exports.StatusCode = {}));
var StatusCode = exports.StatusCode;
;
var Response = (function () {
    function Response(statusCode, headers, buffer) {
        this._statusCode = statusCode;
        this._headers = headers;
        this._buffer = buffer;
    }
    Response.prototype.getStatusCode = function () { return this._statusCode; };
    Response.prototype.getHeaders = function () { return this._headers; };
    Response.prototype.getBuffer = function () { return this._buffer; };
    return Response;
}());
exports.Response = Response;
function request(urlStruct, etag) {
    var options = {
        hostname: urlStruct.hostname,
        path: urlStruct.path,
    };
    if (urlStruct.port) {
        options.port = parseInt(urlStruct.port, 10);
    }
    if (etag) {
        options.headers = { "If-None-Match": etag };
    }
    return new Promise(function (resolve, reject) {
        return https.get(options, resolve).on("error", reject);
    })
        .then(function (message) {
        var bufferList = [];
        message.on("data", function (b) { return bufferList.push(b); });
        return new Promise(function (resolve, reject) { return message.on("end", resolve).on("error", reject); })
            .then(function (_) { return new Response(message.statusCode, message.headers, Buffer.concat(bufferList)); });
    });
}
exports.request = request;
