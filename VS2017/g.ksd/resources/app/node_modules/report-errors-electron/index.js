/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var electron_1 = require("electron");
var error_handler_node_1 = require("report-errors/error-handler-node");
var error_reporter_base_1 = require("report-errors/error-reporter-base");
var Constants_1 = require("./Constants");
var path = require("path");
function removeAllElectronErrorHandlers() {
    error_handler_node_1.RemoveAllNodeErrorHandlers();
    electron_1.ipcMain.removeAllListeners(Constants_1.ERROR_HANDLER_CHILD_INIT_IPC);
    electron_1.ipcMain.removeAllListeners(Constants_1.ERROR_HANDLER_CHILD_PROCESS_CRASHED_IPC);
}
exports.removeAllElectronErrorHandlers = removeAllElectronErrorHandlers;
var ErrorHandlerMain = (function (_super) {
    __extends(ErrorHandlerMain, _super);
    function ErrorHandlerMain(options) {
        if (options === void 0) { options = {}; }
        var appDir;
        if (options.appRoot === "") {
            appDir = "";
        }
        else if (!options.appRoot) {
            appDir = electron_1.app.getAppPath();
        }
        else if (options.appRoot.endsWith("package.json")) {
            appDir = path.dirname(options.appRoot);
        }
        else {
            appDir = options.appRoot;
        }
        if (!options.packageInfo) {
            var pjPath = path.join(appDir, "package.json");
            try {
                options.packageInfo = require(pjPath);
            }
            catch (e) {
                options.packageInfo = { name: electron_1.app.getName(), version: electron_1.app.getVersion() };
            }
        }
        var baseOptions = {
            appRoot: appDir,
            packageInfo: options.packageInfo
        };
        Object.keys(options).forEach(function (key) {
            if (!baseOptions.hasOwnProperty(key)) {
                var value = options[key];
                Object.defineProperty(baseOptions, key, { value: value });
            }
        });
        _super.call(this, baseOptions);
        this.userHandleChildCrash = options.handleChildCrash;
        this.initChildCode();
    }
    ErrorHandlerMain.prototype.removeThisHandler = function () {
        _super.prototype.removeThisHandler.call(this);
        electron_1.ipcMain.removeListener(Constants_1.ERROR_HANDLER_CHILD_INIT_IPC, this.boundChildInit);
        electron_1.ipcMain.removeListener(Constants_1.ERROR_HANDLER_CHILD_PROCESS_CRASHED_IPC, this.boundJSCrashHandler);
    };
    ErrorHandlerMain.prototype.initChildCode = function () {
        this.boundChildInit = this.perWindowInit.bind(this);
        this.boundJSCrashHandler = this.handleJSCrash.bind(this);
        electron_1.ipcMain.on(Constants_1.ERROR_HANDLER_CHILD_PROCESS_CRASHED_IPC, this.boundJSCrashHandler);
        electron_1.ipcMain.on(Constants_1.ERROR_HANDLER_CHILD_INIT_IPC, this.boundChildInit);
    };
    ErrorHandlerMain.prototype.handleJSCrash = function (event, errString, errorType) {
        var _this = this;
        var errObject = JSON.parse(errString);
        var errTemp = new Error(errObject.message);
        errTemp.name = errObject.name;
        errTemp.stack = errObject.stack;
        var callback = function () {
            _this.handleAnyRendererCrash(Constants_1.JAVASCRIPT_CRASH, event.sender, errTemp);
        };
        if (this.currentState === error_handler_node_1.State.reporting) {
        }
        else if (this.currentState === error_handler_node_1.State.ready) {
            this.currentState = error_handler_node_1.State.reporting;
        }
        this.reportError(errTemp, error_reporter_base_1.ErrorType[errorType])
            .catch()
            .then(function () { _this.currentState = error_handler_node_1.State.ready; callback(); });
    };
    ErrorHandlerMain.prototype.handleNativeCrash = function (event) {
        this.handleAnyRendererCrash(Constants_1.NATIVE_CRASH, event.sender);
    };
    ErrorHandlerMain.prototype.perWindowInit = function (event) {
        event.sender.removeAllListeners(Constants_1.BUILT_IN_CRASHED_EVENT_NAME);
        event.sender.on(Constants_1.BUILT_IN_CRASHED_EVENT_NAME, this.handleNativeCrash.bind(this));
    };
    ErrorHandlerMain.prototype.handleAnyRendererCrash = function (crashType, sender, err) {
        if (this.userHandleChildCrash) {
            try {
                if (this.userHandleChildCrash(crashType, sender, err)) {
                    return;
                }
            }
            catch (e) {
                try {
                    this.emitUserCallbackUncaughtException(e);
                }
                catch (e1) {
                }
            }
        }
        var browserWindow = electron_1.BrowserWindow.fromWebContents(sender);
        if (browserWindow) {
            browserWindow.destroy();
        }
    };
    return ErrorHandlerMain;
}(error_handler_node_1.ErrorHandlerNode));
exports.ErrorHandlerMain = ErrorHandlerMain;
