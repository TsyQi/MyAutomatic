"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
var stringjs = require("string");
var uuid = require("node-uuid");
var data_model_event_name_helper_1 = require("./internal/data-model-event-name-helper");
/* the following __extends function definition is to address code coverage issue when use class inheritance. */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    // istanbul ignore next
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    var __ = function () { this.constructor = d; };
    // istanbul ignore next
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* tslint:enable */
/**
 * Supported Data model event type
 */
(function (DataModelEventType) {
    /**
     * User task event
     */
    DataModelEventType[DataModelEventType["UserTask"] = 0] = "UserTask";
    /**
     * Trace event
     */
    DataModelEventType[DataModelEventType["Trace"] = 1] = "Trace";
    /**
     * Operation event
     */
    DataModelEventType[DataModelEventType["Operation"] = 2] = "Operation";
    /**
     * Fault event
     */
    DataModelEventType[DataModelEventType["Fault"] = 3] = "Fault";
    /**
     * Asset event
     */
    DataModelEventType[DataModelEventType["Asset"] = 4] = "Asset";
})(exports.DataModelEventType || (exports.DataModelEventType = {}));
var DataModelEventType = exports.DataModelEventType;
/**
 * An enum to define the result from user task or operation.
 */
(function (TelemetryResult) {
    /**
     * Used for unknown or unavailable result.
     */
    TelemetryResult[TelemetryResult["None"] = 0] = "None";
    /**
     * A result without any failure from product or user.
     */
    TelemetryResult[TelemetryResult["Success"] = 1] = "Success";
    /**
     * A result to indicate the action/operation failed because of product issue (not user faults)
     * Consider using FaultEvent to provide more details about the failure.
     */
    TelemetryResult[TelemetryResult["Failure"] = 2] = "Failure";
    /**
     * A result to indicate the action/operation failed because of user fault (e.g., invalid input).
     * Consider using FaultEvent to provide more details.
     */
    TelemetryResult[TelemetryResult["UserFault"] = 3] = "UserFault";
    /**
     * A result to indicate the action/operation is cancalled by user.
     */
    TelemetryResult[TelemetryResult["UserCancel"] = 4] = "UserCancel";
})(exports.TelemetryResult || (exports.TelemetryResult = {}));
var TelemetryResult = exports.TelemetryResult;
/**
 * An enum to define the severity of the telemetry event.
 * It is used for any data consumer who wants to categorize data based on severity.
 */
(function (TelemetrySeverity) {
    /**
     * indicates telemetry event with high value or require attention (e.g., fault).
     */
    TelemetrySeverity[TelemetrySeverity["High"] = 10] = "High";
    /**
     * indicates a regular telemetry event.
     */
    TelemetrySeverity[TelemetrySeverity["Normal"] = 0] = "Normal";
    /**
     * indicates telemetry event with verbose information.
     */
    TelemetrySeverity[TelemetrySeverity["Low"] = -10] = "Low";
})(exports.TelemetrySeverity || (exports.TelemetrySeverity = {}));
var TelemetrySeverity = exports.TelemetrySeverity;
/**
 * An enum to define the action of the Pii Property.
 */
(function (PiiAction) {
    /**
     * Default Pii action: hash this property value for external users, send hash and rawtext for internal.
     */
    PiiAction[PiiAction["Hashed"] = 0] = "Hashed";
    /**
     * A best-effort sanitization of the property value that replaces potential Pii information with tokens.
     * As of this API change, only replaces username. See vs-telemetry library for latest implementation.
     */
    PiiAction[PiiAction["Sanitized"] = 1] = "Sanitized";
})(exports.PiiAction || (exports.PiiAction = {}));
var PiiAction = exports.PiiAction;
var EventCorrelation = (function () {
    function EventCorrelation(id, eventType) {
        this.id = id;
        this.eventType = eventType;
    }
    EventCorrelation.prototype.serialize = function () {
        // don't change the algorithm because it is a contract with .net API.
        return JSON.stringify(this, EventCorrelation.propertiesToSerialize);
    };
    EventCorrelation.deserialize = function (json) {
        var jsonObj = JSON.parse(json);
        var correlation = new EventCorrelation(null, null);
        EventCorrelation.propertiesToSerialize.forEach(function (propertyName) {
            if (!jsonObj.hasOwnProperty(propertyName)) {
                throw new Error("Could not deserialize, missing property " + propertyName);
            }
            correlation[propertyName] = jsonObj[propertyName];
        });
        return correlation;
    };
    // don't change property name because it is a contract with .net API.
    EventCorrelation.propertiesToSerialize = ["id", "eventType"];
    return EventCorrelation;
}());
exports.EventCorrelation = EventCorrelation;
var Event = (function () {
    function Event(eventName, eventProperties, severity) {
        if (eventProperties === void 0) { eventProperties = {}; }
        if (severity === void 0) { severity = TelemetrySeverity.Normal; }
        this.isOptOutFriendly = false;
        this.reservedProperties = {};
        this.correlatedWith = {};
        this.name = eventName;
        this.properties = eventProperties;
        this.setDataModelProperties(DataModelEventType.Trace, severity);
    }
    Event.prototype.setDataModelProperties = function (eventType, severity) {
        this.reservedProperties[Event.dataModelPropertyPrefix + "Source"] = "DataModelApi";
        // use DataModelEventType enum name here.
        this.reservedProperties[Event.dataModelPropertyPrefix + "EntityType"] = DataModelEventType[eventType];
        this.reservedProperties[Event.dataModelPropertyPrefix + "EntitySchemaVersion"] = Event._dataModelSchemaVersion;
        // use TelemetrySeverity enum value here.
        this.reservedProperties[Event.dataModelPropertyPrefix + "Severity"] = severity;
        this.correlation = new EventCorrelation(uuid.v4(), DataModelEventType[eventType]);
        this.reservedProperties[Event.dataModelPropertyPrefix + "CorrelationId"] = this.correlation.id;
    };
    Event.prototype.getReservedProperty = function (name) {
        return this.reservedProperties[name];
    };
    Event.prototype.correlate = function () {
        var _this = this;
        var correlations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            correlations[_i - 0] = arguments[_i];
        }
        correlations.forEach(function (correlation) {
            _this.correlateWithDescription(correlation);
        });
    };
    Event.prototype.correlateWithDescription = function (correlation, description) {
        if (correlation != null && correlation !== this.correlation) {
            this.correlatedWith[correlation.id] = [correlation, description];
        }
    };
    Event.clone = function (ev) {
        var newEvent = new Event(ev.name);
        newEvent.correlation = ev.correlation;
        Event.copyStringMap(ev.properties, newEvent.properties);
        // add reserved properties to regular ones
        Event.copyStringMap(ev.reservedProperties, newEvent.properties);
        // convert correlation information to properties
        Event.convertCorrelatedInfo(newEvent.properties, ev.correlatedWith);
        newEvent.isOptOutFriendly = ev.isOptOutFriendly;
        return newEvent;
    };
    Event.isPropertyNameReserved = function (propertyName) {
        return stringjs(propertyName).startsWith(Event._reservedPropertyPrefix);
    };
    Event.copyStringMap = function (sourceStringMap, destinationArray) {
        for (var name_1 in sourceStringMap) {
            /* istanbul ignore else */
            if (sourceStringMap.hasOwnProperty(name_1)) {
                destinationArray[name_1] = sourceStringMap[name_1];
            }
        }
    };
    Event.convertCorrelatedInfo = function (properties, correlatedWith) {
        var separator = ",";
        var index = 0;
        Object.keys(correlatedWith).forEach(function (id) {
            /* istanbul ignore else */
            if (correlatedWith.hasOwnProperty(id)) {
                // Use namespacing style property name starting with index 1 for better readability.
                // E.g., Reserved.DataModel.Correlation.1 = "xx-xxxx-xxxx, UserTask, Description"
                index++;
                var correlation = correlatedWith[id];
                var propertyValue = [correlation[0].id, correlation[0].eventType];
                // add description if any
                if (correlation[1] != null) {
                    propertyValue.push(correlation[1]);
                }
                properties[Event.dataModelPropertyPrefix + "Correlation." + index] = propertyValue.join(separator);
            }
        });
    };
    Event._reservedPropertyPrefix = "Reserved.";
    Event.dataModelPropertyPrefix = Event._reservedPropertyPrefix + "DataModel.";
    /**
     * Please contact vsdmcrew@microsoft.com before making any change.
     * Bump the version for any conditions below for data model events.
     * 1. add new property.
     * 2. remove property.
     * 3. change the meaning of property value.
     * 4. change the data type of property value.
     */
    Event._dataModelSchemaVersion = 4;
    return Event;
}());
exports.Event = Event;
/**
 * A class that stores information for operation data model event.
 * An operation performs some work in application and comes with result (e.g., Success, Failure).
 * If the operation is invoked by user directly, please use UserTaskEvent or related methods.
 * A few examples of operations are, license check, package load, windows layout loading.
 *
 * For long-time running or async operation, to understand what else happened during the time
 * or track if it partially completes because of an error,
 * use method Telemetry.StartOperation which tracks both start and end points.
 */
var OperationEvent = (function (_super) {
    __extends(OperationEvent, _super);
    function OperationEvent(eventName, result, resultSummary, eventProperties, severity) {
        if (eventProperties === void 0) { eventProperties = {}; }
        if (severity === void 0) { severity = TelemetrySeverity.Normal; }
        _super.call(this, eventName, eventProperties, severity);
        this.setDataModelProperties(DataModelEventType.Operation, severity);
        data_model_event_name_helper_1.setProductFeatureEntityName(eventName, this.reservedProperties);
        this.reservedProperties[Event.dataModelPropertyPrefix + "Action.Result"] = TelemetryResult[result];
        if (resultSummary != null) {
            this.reservedProperties[Event.dataModelPropertyPrefix + "Action.ResultSummary"] = resultSummary;
        }
        this.reservedProperties[Event.dataModelPropertyPrefix + "Action.Type"] = "Atomic";
    }
    OperationEvent.prototype.correlateWithDescription = function (correlation, description) {
        _super.prototype.correlateWithDescription.call(this, correlation, description);
    };
    return OperationEvent;
}(Event));
exports.OperationEvent = OperationEvent;
/**
 * A class that stores information for user task data model event.
 * A user task is an application operation that is INVOKED BY USER directly
 * and comes with result (e.g., Success, Failure).
 * It is used for user behavior/intent analysis. User is aware of the operation and be able to execute.
 * e.g. Open project and Show tool windows are user tasks;
 * instead load VS package and Design time build are operations.
 *
 * For long-time running or async user task, to understand what else happened during the time
 * or track if it partially completes because of an error,
 * use method Telemetry.StartUserTask(TelemetrySession, string which tracks both start and end points.
 */
var UserTaskEvent = (function (_super) {
    __extends(UserTaskEvent, _super);
    function UserTaskEvent(eventName, result, resultSummary, eventProperties, severity) {
        if (eventProperties === void 0) { eventProperties = {}; }
        if (severity === void 0) { severity = TelemetrySeverity.High; }
        _super.call(this, eventName, result, resultSummary, eventProperties, severity);
        this.setDataModelProperties(DataModelEventType.UserTask, severity);
    }
    return UserTaskEvent;
}(OperationEvent));
exports.UserTaskEvent = UserTaskEvent;
/**
 * A class that stores information for asset event.
 * Asset is the target of user task or operation, e.g., Solution, Project, File, Extension, License, Designer.
 */
var AssetEvent = (function (_super) {
    __extends(AssetEvent, _super);
    /**
     * Initializes a new instance of AssetEvent class.
     *
     * Parameter assetId: used to identify the asset.
     * The id should be immutable in the asset life cycle, even if the status or content changes over time.
     * E.g., project guid is generated during project creation and will never change.
     * This makes it a good candidate for asset id of Project asset.
     *
     * Parameter assetEventVersion: used for customized properties versioning.
     * E.g., project asset posts event with name "vs/platform/project".
     * If the event is updated, uses this parameter to increment the version.
     */
    function AssetEvent(eventName, assetId, assetEventVersion, eventProperties, severity) {
        if (eventProperties === void 0) { eventProperties = {}; }
        if (severity === void 0) { severity = TelemetrySeverity.Normal; }
        _super.call(this, eventName, eventProperties, severity);
        this.setDataModelProperties(DataModelEventType.Asset, severity);
        data_model_event_name_helper_1.setProductFeatureEntityName(eventName, this.reservedProperties);
        this.reservedProperties[Event.dataModelPropertyPrefix + "Asset.AssetId"] = assetId;
        this.reservedProperties[Event.dataModelPropertyPrefix + "Asset.SchemaVersion"] = assetEventVersion;
    }
    return AssetEvent;
}(Event));
exports.AssetEvent = AssetEvent;
/**
 * A telemetry event representing a Fault, such as an exception
 */
var FaultEvent = (function (_super) {
    __extends(FaultEvent, _super);
    /**
     * Initializes a new instance of FaultEvent class.
     *
     * Parameter description: a summary description for the fault.
     * It provides a little bit more details about the fault without digging into the event.
     */
    function FaultEvent(eventName, description, error, eventProperties, severity) {
        if (eventProperties === void 0) { eventProperties = {}; }
        if (severity === void 0) { severity = TelemetrySeverity.High; }
        _super.call(this, eventName, eventProperties, severity);
        this.setDataModelProperties(DataModelEventType.Fault, severity);
        data_model_event_name_helper_1.setProductFeatureEntityName(eventName, this.reservedProperties);
        this.reservedProperties[FaultEvent._faultPropertyPrefix + "Description"] = description;
        if (error != null) {
            this.reservedProperties[FaultEvent._faultPropertyPrefix + "Exception.TypeString"] = error.name;
            this.reservedProperties[FaultEvent._faultPropertyPrefix + "Exception.Message"] =
                new PiiProperty(error.message, PiiAction.Sanitized);
            this.reservedProperties[FaultEvent._faultPropertyPrefix + "Exception.StackTrace"] =
                new PiiProperty(error.stack, PiiAction.Sanitized);
        }
    }
    FaultEvent._faultPropertyPrefix = Event.dataModelPropertyPrefix + "Fault.";
    return FaultEvent;
}(Event));
exports.FaultEvent = FaultEvent;
var PiiProperty = (function () {
    function PiiProperty(value, action) {
        this.value = value;
        this.piiAction = action || PiiAction.Hashed;
    }
    return PiiProperty;
}());
exports.PiiProperty = PiiProperty;
var SettingProperty = (function () {
    function SettingProperty(value) {
        this.value = value;
    }
    return SettingProperty;
}());
exports.SettingProperty = SettingProperty;
var MetricProperty = (function () {
    function MetricProperty(value) {
        this.value = value;
    }
    return MetricProperty;
}());
exports.MetricProperty = MetricProperty;
var TelemetryScopeSettings = (function () {
    function TelemetryScopeSettings() {
        this.severity = TelemetrySeverity.Normal;
        this.isOptOutFriendly = false;
    }
    return TelemetryScopeSettings;
}());
exports.TelemetryScopeSettings = TelemetryScopeSettings;
