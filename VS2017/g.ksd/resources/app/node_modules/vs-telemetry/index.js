/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var session_1 = require("./internal/session");
var service_session_initializer_1 = require("./internal/service-session-initializer");
var TelemetryService = (function () {
    /* istanbul ignore next */
    function TelemetryService() {
        /*
         * we have it because typescript generates empty javascript constructor
         * and istanbul complains about it coverage.
         */
    }
    // Gets default session object related to the current module.
    TelemetryService.getDefaultSession = function () {
        if (TelemetryService._telemetry === undefined) {
            TelemetryService._telemetry =
                TelemetryService._createSession();
        }
        return TelemetryService._telemetry;
    };
    /**
     * Creates a new session but does not set it as default. It is preferrable to not use this method and instead
     * use the singleton returned by getDefaultSession, so that there is only one session per process.
     * Having multiple sessions in the same process is not recommended.
     */
    TelemetryService._createSession = function () {
        return session_1.createSession(new service_session_initializer_1.ServiceSessionInitializer());
    };
    /**
     * Create a new default session with the given AppInsights and Asimov keys.
     */
    TelemetryService.createAndGetDefaultSession = function (appInsightsIKey, asimovIKey) {
        if (TelemetryService._telemetry !== undefined) {
            throw new Error("Unable to create new default Telemetry Session with provided key.");
        }
        var sessionSettings = new service_session_initializer_1.ServiceSessionSettings();
        sessionSettings.AppInsightsInstrumentationKey = appInsightsIKey;
        sessionSettings.AsimovInstrumentationKey = asimovIKey;
        TelemetryService._telemetry = session_1.createSession(new service_session_initializer_1.ServiceSessionInitializer(sessionSettings));
        return TelemetryService._telemetry;
    };
    // Create new session from serialized settings.
    TelemetryService.cloneSession = function (serializedSettings) {
        try {
            var sessionSettings = new service_session_initializer_1.ServiceSessionSettings(JSON.parse(serializedSettings));
            return session_1.createSession(new service_session_initializer_1.ServiceSessionInitializer(sessionSettings), true);
        }
        catch (e) {
            throw new ArgumentException("Could not parse serializedString: " + e.Message);
        }
    };
    return TelemetryService;
}());
exports.TelemetryService = TelemetryService;
var InnerException = (function (_super) {
    __extends(InnerException, _super);
    function InnerException(message, innerError) {
        _super.call(this, message);
        this.message = message;
        this.innerError = innerError;
    }
    return InnerException;
}(Error));
exports.InnerException = InnerException;
var ArgumentException = (function (_super) {
    __extends(ArgumentException, _super);
    function ArgumentException(message) {
        _super.call(this, message);
        this.message = message;
    }
    return ArgumentException;
}(Error));
exports.ArgumentException = ArgumentException;
var StorageException = (function (_super) {
    __extends(StorageException, _super);
    function StorageException(message, innerError) {
        _super.call(this, message, innerError);
    }
    return StorageException;
}(InnerException));
exports.StorageException = StorageException;
var InvalidOperationException = (function (_super) {
    __extends(InvalidOperationException, _super);
    function InvalidOperationException(message) {
        _super.call(this, message);
        this.message = message;
    }
    return InvalidOperationException;
}(Error));
exports.InvalidOperationException = InvalidOperationException;
