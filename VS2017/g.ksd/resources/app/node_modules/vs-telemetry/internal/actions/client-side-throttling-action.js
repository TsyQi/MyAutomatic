/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var vs_telemetry_api_1 = require("vs-telemetry-api");
var action_1 = require("./action");
var telemetry_manifest_1 = require("../telemetry-manifest/telemetry-manifest");
var ClientSideThrottling = (function () {
    function ClientSideThrottling(passthroughEvents, resetCounterOverride, thresholdOverride) {
        var _this = this;
        if (resetCounterOverride === void 0) { resetCounterOverride = 0; }
        if (thresholdOverride === void 0) { thresholdOverride = 0; }
        this._counter = 0;
        this._threshold = 1000;
        this._resetCounter = 10;
        this._bucketStartTime = null;
        this._passthroughEvents = {};
        this._droppedEvents = {};
        /**
         * Priority of the action
         * The less the more priority action.
         * Actions with more priority go before actions with lower priority
         */
        this.priority = action_1.ActionPriority.ThrottlingPriority;
        if (passthroughEvents != null) {
            passthroughEvents.forEach(function (eventName) {
                _this._passthroughEvents[eventName] = true;
            });
        }
        if (resetCounterOverride > 0) {
            this._resetCounter = resetCounterOverride;
        }
        if (thresholdOverride > 0) {
            this._threshold = thresholdOverride;
        }
    }
    /**
     * Execute action on event.
     * @param context event processor context, which contains all necessary information to process the event
     * @return Event processed event or null, in the case when event is dropped (suppressed)
     */
    ClientSideThrottling.prototype.run = function (context) {
        var returnPromise = Promise.resolve(null);
        var event = context.event;
        var eventTimeStamp = event.postTimeStamp;
        if (this._bucketStartTime == null) {
            this._bucketStartTime = eventTimeStamp;
        }
        if (this._passthroughEvents.hasOwnProperty(event.name)) {
            if (this._counter <= this._threshold) {
                this._counter++;
            }
            return returnPromise;
        }
        var span = eventTimeStamp - this._bucketStartTime;
        if (span / 1000 > this._resetCounter) {
            // Pass current manifest as both old and new manifest since it hasn't changed.
            this._reset(context.telemetrySession, context.telemetryManifest, context.telemetryManifest, eventTimeStamp);
        }
        if (this._counter++ >= this._threshold) {
            this._droppedEvents[event.name] = true;
            context.isDropped = true;
        }
        return returnPromise;
    };
    ClientSideThrottling.prototype.postDiagnosticInformation = function (session, oldManifest, newManifest) {
        return this._reset(session, oldManifest, newManifest, null);
    };
    ClientSideThrottling.prototype._reset = function (session, oldManifest, newManifest, timeToReset) {
        if (this._counter > this._threshold) {
            var countDropped = this._counter - this._threshold;
            var manifestVersion = ClientSideThrottling._unknownValue;
            if (oldManifest != null) {
                manifestVersion = oldManifest.version;
            }
            var statsEvent = new vs_telemetry_api_1.Event("VS/TelemetryApi/ClientSideThrottling");
            statsEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.Version"] = manifestVersion;
            statsEvent.properties["VS.TelemetryApi.DynamicTelemetry.Hostname"] = telemetry_manifest_1.TelemetryManifest.hostname;
            statsEvent.properties["VS.TelemetryApi.ClientSideThrottling.TotalDropped"] = countDropped;
            statsEvent.properties["VS.TelemetryApi.ClientSideThrottling.Threshold"] = this._threshold;
            statsEvent.properties["VS.TelemetryApi.ClientSideThrottling.TimerReset"] = this._resetCounter;
            statsEvent.properties["VS.TelemetryApi.ClientSideThrottling.Events"] =
                Object.keys(this._droppedEvents).join(",");
            statsEvent.properties["VS.TelemetryApi.ClientSideThrottling.BucketStart"] = this._bucketStartTime;
            session.postValidatedEvent(statsEvent);
        }
        this._counter = 0;
        this._bucketStartTime = timeToReset;
        if (newManifest != null) {
            if (newManifest.throttlingThresholdPerWindow > 0) {
                this._threshold = newManifest.throttlingThresholdPerWindow;
            }
            if (newManifest.throttlingTimerResetInSeconds > 0) {
                this._resetCounter = newManifest.throttlingTimerResetInSeconds;
            }
        }
    };
    ClientSideThrottling._unknownValue = "Unknown";
    return ClientSideThrottling;
}());
exports.ClientSideThrottling = ClientSideThrottling;
