/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var vs_telemetry_api_1 = require("vs-telemetry-api");
var telemetry_manifest_1 = require("../telemetry-manifest/telemetry-manifest");
var type_converters_1 = require("../helpers/type-converters");
var DataModelPropertyAction = (function () {
    function DataModelPropertyAction(constructor, priority, suffixName, flagPropertyName, diagnosticName) {
        this._totalPropertyCount = 0;
        this._dataModelProperties = {};
        this._constructor = constructor;
        this.priority = priority;
        this._suffixName = suffixName;
        this._diagnosticName = diagnosticName;
        this._flagPropertyName = flagPropertyName;
    }
    /**
     * Execute action on event.
     * @param context event processor context, which contains all necessary information to process the event
     * @return Event processed event or null, in the case when event is dropped (suppressed)
     */
    DataModelPropertyAction.prototype.run = function (context) {
        var _this = this;
        var event = context.event;
        var toRemove = {};
        var returnPromise = Promise.resolve(null);
        Object.keys(event.properties).forEach(function (propertyName) {
            var propertyValue = event.properties[propertyName];
            if (propertyValue instanceof _this._constructor) {
                toRemove[propertyName] = propertyValue;
            }
        });
        if (Object.keys(toRemove).length > 0) {
            /* tslint:disable */
            for (var propertyName in toRemove) {
                /* tslint:enable */
                var propertyValue = toRemove[propertyName].value;
                // add property suffixName
                event.properties[propertyName + this._suffixName] = propertyValue;
                delete event.properties[propertyName];
                this._dataModelProperties[propertyName.toLowerCase()] = true;
                this._totalPropertyCount++;
            }
            event.properties["Reserved.DataModel." + this._flagPropertyName] = type_converters_1.TypeConverters.boolToString(true);
        }
        return returnPromise;
    };
    DataModelPropertyAction.prototype.postDiagnosticInformation = function (session, oldManifest, newManifest) {
        if (this._totalPropertyCount === 0) {
            return;
        }
        var manifestVersion = DataModelPropertyAction._unknownValue;
        /* istanbul ignore else */
        if (oldManifest != null) {
            manifestVersion = oldManifest.version;
        }
        var statsEvent = new vs_telemetry_api_1.Event("VS/TelemetryApi/" + this._diagnosticName);
        statsEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.Version"] = manifestVersion;
        statsEvent.properties["VS.TelemetryApi.DynamicTelemetry.Hostname"] = telemetry_manifest_1.TelemetryManifest.hostname;
        statsEvent.properties["VS.TelemetryApi." + this._diagnosticName + ".TotalCount"] = this._totalPropertyCount;
        statsEvent.properties["VS.TelemetryApi." + this._diagnosticName + ".Properties"] =
            Object.keys(this._dataModelProperties).join(",");
        session.postValidatedEvent(statsEvent);
    };
    DataModelPropertyAction._unknownValue = "Unknown";
    return DataModelPropertyAction;
}());
exports.DataModelPropertyAction = DataModelPropertyAction;
