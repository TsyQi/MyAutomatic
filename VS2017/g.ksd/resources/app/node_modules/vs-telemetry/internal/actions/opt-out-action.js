/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var action_1 = require("./action");
var context_1 = require("../context");
var vs_telemetry_api_1 = require("vs-telemetry-api");
var OptOutAction = (function () {
    function OptOutAction() {
        this._optOutFriendlyEvents = {};
        this._optOutFriendlyProperties = {};
        /**
         * Priority of the action
         * The less the more priority action.
         * Actions with more priority go before actions with lower priority
         */
        this.priority = action_1.ActionPriority.CustomOptOutPriority;
    }
    /**
     * Execute action on event.
     * @param context event processor context, which contains all necessary information to process the event
     * @return Event processed event or null, in the case when event is dropped (suppressed)
     */
    OptOutAction.prototype.run = function (context) {
        var _this = this;
        return context.telemetrySession.isOptedIn().then(function (optedIn) {
            if (!optedIn) {
                var event_1 = context.event;
                if (!event_1.isOptOutFriendly && !_this._optOutFriendlyEvents.hasOwnProperty(event_1.name)) {
                    context.isDropped = true;
                }
                for (var propertyName in event_1.properties) {
                    if (event_1.properties.hasOwnProperty(propertyName)) {
                        // we should remove property from the event when *all* of the following true:
                        // - property name is not in the optoutFriendlyProperties list
                        // - event hasn't OptOutFriendly flag set OR property is a reserved property
                        if ((!event_1.isOptOutFriendly || vs_telemetry_api_1.Event.isPropertyNameReserved(propertyName)
                            || context_1.ServiceContext.isPropertyNameReserved(propertyName))
                            && !_this._optOutFriendlyProperties.hasOwnProperty(propertyName)) {
                            context.excludePropertyFromEvent(propertyName);
                        }
                    }
                }
            }
        });
    };
    /**
     * Add OptOut friendly event name
     */
    OptOutAction.prototype.addOptOutFriendlyEventName = function (eventName) {
        this._optOutFriendlyEvents[eventName.toLowerCase()] = true;
    };
    /**
     * Add OptOut friendly properties
     */
    OptOutAction.prototype.addOptOutFriendlyPropertiesList = function (propertyNameList) {
        var _this = this;
        propertyNameList.forEach(function (propertyName) {
            _this._optOutFriendlyProperties[propertyName] = true;
        });
    };
    return OptOutAction;
}());
exports.OptOutAction = OptOutAction;
