/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var service_session_initializer_1 = require("../service-session-initializer");
var base_channel_1 = require("./base-channel");
var appInsights = require("applicationinsights");
(function (ChannelType) {
    ChannelType[ChannelType["AI"] = 0] = "AI";
    ChannelType[ChannelType["Vortex"] = 1] = "Vortex";
})(exports.ChannelType || (exports.ChannelType = {}));
var ChannelType = exports.ChannelType;
var AIChannel = (function (_super) {
    __extends(AIChannel, _super);
    /**
     * AIChannel constructor.
     * @param type AI channel type (AI or Vortex)
     * @param key iKey used for the client identification
     * @param initialProperites initial properties for the channel
     */
    function AIChannel(type, key, initialProperties) {
        if (initialProperties === void 0) { initialProperties = service_session_initializer_1.ChannelProperties.Active; }
        _super.call(this);
        this._sequenceNumber = 1;
        this._channelType = type;
        this._key = key;
        this.setProperties(initialProperties);
    }
    AIChannel.prototype.id = function () {
        if (this._channelType === ChannelType.Vortex) {
            return "aivortex";
        }
        return "ai";
    };
    AIChannel.prototype.start = function () {
        if (!this.isStarted()) {
            this._started = true;
            AIChannel._ensureAIEngineIsInitialized();
            this._client = appInsights.getClient(this._key);
            // Enable offline mode with default resend interval
            this._client.channel.setOfflineMode(true, null);
            /**
             * By default endpointUrl pointed to the AI backend,
             * so we don't need to change Url in the case
             * when type === AI.
             */
            if (this._channelType === ChannelType.Vortex) {
                this._client.config.endpointUrl = "https://vortex.data.microsoft.com/collect/v1";
            }
        }
    };
    AIChannel.prototype._postEvent = function (event) {
        this._ensureChannelIsStarted();
        var properties = {};
        var measures = {};
        for (var propName in event.properties) {
            if (event.properties.hasOwnProperty(propName)) {
                var value = event.properties[propName];
                if (value != null) {
                    if (typeof value === "number") {
                        if (!isNaN(value) && isFinite(value)) {
                            measures[propName] = value;
                        }
                    }
                    else {
                        // We have already processed properties of type PiiProperty and converted them into strings,
                        // so type here must be a string if it isn't a number.
                        properties[propName] = value;
                    }
                }
            }
        }
        // add sequence number for the AI channel
        measures["Reserved.SequenceNumber"] = this._sequenceNumber++;
        this._client.trackEvent(event.name, properties, measures);
    };
    AIChannel.prototype._dispose = function () {
        var _this = this;
        if (this.enabled() && this._client != null) {
            return new Promise(function (resolve, reject) {
                _this._client.sendPendingData(function (_) { return resolve(); });
            });
        }
        return Promise.resolve(null);
    };
    AIChannel._ensureAIEngineIsInitialized = function () {
        if (AIChannel._initialized === false) {
            // we need to pass some fake key, otherwise AI throw an exception
            appInsights.setup("2588e01f-f6c9-4cd6-a348-143741f8d702")
                .setAutoCollectConsole(false)
                .setAutoCollectExceptions(false)
                .setAutoCollectPerformance(false)
                .setAutoCollectRequests(false);
            AIChannel._initialized = true;
        }
    };
    AIChannel._initialized = false;
    return AIChannel;
}(base_channel_1.BaseChannel));
exports.AIChannel = AIChannel;
