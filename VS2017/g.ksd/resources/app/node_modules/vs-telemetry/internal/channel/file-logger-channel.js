/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var service_session_initializer_1 = require("../service-session-initializer");
var base_channel_1 = require("./base-channel");
var os = require("os");
var fsp = require("node-fs-promise");
var stringjs = require("string");
var FileLoggerChannel = (function (_super) {
    __extends(FileLoggerChannel, _super);
    /**
     * For fileLogger channel we need to know sessionId, because this is the
     * way how we construct log file content.
     * @param sessionId string current session identifier
     */
    function FileLoggerChannel(sessionId) {
        _super.call(this);
        this._isInitialized = false;
        this._firstEvent = true; // first event indicator
        this._basePath = FileLoggerChannel._buildPath();
        this._sessionId = sessionId;
        /**
         * By default this channel is disabled. To enable this channel it is necessary to create file:
         * $HOME/VSTelemetry/channels.json and add the following element
         * {
         * ...
         *  "fileLogger" : "enabled"
         * ...
         * }
         */
        this.setEnabled(false);
        // TODO: make this channel InternalOnly
        this.setProperties(service_session_initializer_1.ChannelProperties.Active);
    }
    FileLoggerChannel.prototype.id = function () {
        return "fileLogger";
    };
    FileLoggerChannel.prototype.start = function () {
        if (!this.isStarted()) {
            this._started = true;
        }
    };
    /**
     * Stringify event to the proper json representation and write to the log file.
     */
    FileLoggerChannel.prototype._postEvent = function (event) {
        this._enforceInitialized();
        var prefix = "";
        if (!this._firstEvent) {
            prefix = ",\n";
        }
        else {
            this._firstEvent = false;
        }
        this._write(prefix + JSON.stringify(event));
    };
    /**
     * Finalize work with the channel and return promise to wait for
     * write completion. Also append close parenthesis to close array and object.
     */
    FileLoggerChannel.prototype._dispose = function () {
        if (this._isInitialized) {
            this._write("\n]\n}");
            return this._chainOfPendingWrites;
        }
        return Promise.resolve(null);
    };
    FileLoggerChannel.prototype._enforceInitialized = function () {
        var _this = this;
        if (!this._isInitialized) {
            // start chain of the promises
            this._chainOfPendingWrites = FileLoggerChannel._ensureFolderIsCreated(this._basePath)
                .then(function (_) { return _this._sessionId; })
                .then(function (sId) {
                // build file name
                var date = new Date();
                _this._filePath = _this._basePath + "/" +
                    date.getFullYear().toString() +
                    stringjs(date.getMonth() + 1).padLeft(2, 0) +
                    stringjs(date.getDate()).padLeft(2, 0) +
                    "_" +
                    stringjs(date.getHours()).padLeft(2, 0) +
                    stringjs(date.getMinutes()).padLeft(2, 0) +
                    stringjs(date.getSeconds()).padLeft(2, 0) +
                    "_" +
                    sId +
                    "_" +
                    process.pid +
                    "_" +
                    FileLoggerChannel._fileSequence +
                    ".txt";
                FileLoggerChannel._fileSequence++;
                return _this._writeHeader(sId);
            });
            this._isInitialized = true;
        }
    };
    /**
     * Add new portion of string data to the promises queue to
     * append to the log file. Update promises chain.
     */
    FileLoggerChannel.prototype._write = function (data) {
        var _this = this;
        this._chainOfPendingWrites = this._chainOfPendingWrites.then(function (_) {
            return _this._writeToFile(data);
        });
    };
    /**
     * Build path to the log file folder. We use 'TEMP' environment variable.
     * In the case when 'TEMP' is not available we try to use 'TMP'.
     */
    FileLoggerChannel._buildPath = function () {
        // we use regular expression to remove any slashes at the end
        // [\\\/]+$ - means 1 or more back- or forward- slashes
        return os.tmpdir()
            .replace(/[\\\/]+$/, "") +
            "/VSTelemetryLog";
    };
    /**
     * Write to the file using Node.js file system.
     */
    FileLoggerChannel.prototype._writeToFile = function (data) {
        return fsp.appendFile(this._filePath, data);
    };
    /**
     * Write header to the log file. It consists of initial JSON structure.
     */
    FileLoggerChannel.prototype._writeHeader = function (sessionId) {
        return this._writeToFile("{\n\"session_id\": \"" + sessionId + "\",\n\"events\":[\n");
    };
    /**
     * Make sure that destination folder is created.
     */
    FileLoggerChannel._ensureFolderIsCreated = function (folder) {
        return fsp
            .lstat(folder)
            .then(function (stats) { return null; })
            .catch(function (_) { return fsp.mkdir(folder); });
    };
    FileLoggerChannel._fileSequence = 0;
    return FileLoggerChannel;
}(base_channel_1.BaseChannel));
exports.FileLoggerChannel = FileLoggerChannel;
