/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var stringjs = require("string");
var vs_telemetry_api_1 = require("vs-telemetry-api");
var index_1 = require("../index");
var timeout_scheduler_1 = require("./schedulers/timeout-scheduler");
var session_1 = require("./session");
var PostPropertyEntry = (function () {
    function PostPropertyEntry(key, value) {
        this.key = key;
        this.value = value;
    }
    return PostPropertyEntry;
}());
var ServiceContext = (function () {
    function ServiceContext(name, session, scheduler, overrideInit) {
        if (overrideInit === void 0) { overrideInit = false; }
        this._sharedProperties = {};
        this._postedProperties = [];
        this._contextStartInMs = Date.now();
        this._isDisposed = false;
        if (!ServiceContext._isContextNameValid(name)) {
            throw new index_1.ArgumentException("context name must be alphanumeric");
        }
        this._name = name;
        this._session = session;
        if (scheduler == null) {
            this._scheduler = new timeout_scheduler_1.TimeoutScheduler(ServiceContext._postTimeout);
        }
        else {
            this._scheduler = scheduler;
        }
        this._session.addContext(this);
        this._overrideInit = overrideInit;
        if (!this._overrideInit) {
            this._session.postValidatedEvent(this._buildStartEvent());
        }
    }
    /**
     * Gets the name of the Context.
     */
    ServiceContext.prototype.name = function () {
        return this._name;
    };
    /**
     * Posts a property to the context.
     */
    ServiceContext.prototype.postProperty = function (propertyName, propertyValue) {
        var _this = this;
        if (!this._isDisposed) {
            if (propertyName == null || stringjs(propertyName.trim()).isEmpty()) {
                throw new index_1.ArgumentException("propertyName cannot be null, empty, or all whitespace");
            }
            if (propertyValue == null) {
                throw new index_1.ArgumentException("propertyValue cannot be null");
            }
            this._postedProperties.push(new PostPropertyEntry(propertyName, propertyValue));
            if (!this._scheduler.isScheduled()) {
                this._scheduler.schedule(function () { return _this._flushPostedProperties(); });
            }
        }
    };
    /**
     * Gets a shared property. If property doesn't exist, returns null.
     */
    ServiceContext.prototype.getSharedProperty = function (propertyName) {
        if (this._sharedProperties.hasOwnProperty(propertyName)) {
            return Promise.resolve(this._sharedProperties[propertyName]);
        }
        return Promise.resolve(null);
    };
    /**
     * Sets a shared property that is added to each event until the context is closed.
     * Shared properties have prefix "Context.%ContextName%."
     */
    ServiceContext.prototype.setSharedProperty = function (propertyName, propertyValue) {
        this._sharedProperties[propertyName] = propertyValue;
    };
    /**
     * Removes a shared property from this context.
     */
    ServiceContext.prototype.removeSharedProperty = function (propertyName) {
        delete this._sharedProperties[propertyName];
    };
    /**
     * Disposes the context and closes it
     */
    ServiceContext.prototype.dispose = function () {
        var _this = this;
        if (!this._isDisposed) {
            this._isDisposed = true;
            this._disposePromise = this._scheduler.dispose()
                .then(function (_) {
                _this._flushPostedProperties();
                if (!_this._overrideInit) {
                    _this._session.postValidatedEvent(_this._buildCloseEvent());
                }
                _this._session.removeContext(_this);
            });
        }
        return this._disposePromise;
    };
    /**
     * Adds the context properties to the event. For internal use only.
     */
    ServiceContext.prototype.processEvent = function (event, overwriteExisting) {
        var _this = this;
        if (overwriteExisting === void 0) { overwriteExisting = true; }
        Object.keys(this._sharedProperties).forEach(function (key) {
            var propertyName = ServiceContext._contextPropertyPrefix + _this._name + "." + key;
            if (overwriteExisting || !event.properties.hasOwnProperty(propertyName)) {
                event.properties[propertyName] = _this._sharedProperties[key];
            }
        });
    };
    ServiceContext.validateEvent = function (event) {
        ServiceContext._validateEventName(event);
        ServiceContext._validateEventProperties(event);
    };
    ServiceContext.isPropertyNameReserved = function (propertyName) {
        return stringjs(propertyName).startsWith(ServiceContext._contextPropertyPrefix);
    };
    ServiceContext.prototype._flushPostedProperties = function () {
        if (this._postedProperties.length === 0) {
            return;
        }
        var telemetryEvent = new vs_telemetry_api_1.Event(ServiceContext._contextEventPrefix + "postproperty");
        this._postedProperties.forEach(function (postedProperty) {
            telemetryEvent.properties[postedProperty.key] = postedProperty.value;
        });
        this._postedProperties = [];
        session_1.ServiceSession.validateEvent(telemetryEvent);
        ServiceContext._validateEventProperties(telemetryEvent);
        this._addReservedPropertiesToTheEvent(telemetryEvent);
        this._session.postValidatedEvent(telemetryEvent);
    };
    ServiceContext.prototype._buildStartEvent = function () {
        var telemetryEvent = new vs_telemetry_api_1.Event(ServiceContext._contextEventPrefix + "create");
        this._addReservedPropertiesToTheEvent(telemetryEvent);
        return telemetryEvent;
    };
    ServiceContext.prototype._buildCloseEvent = function () {
        var telemetryEvent = new vs_telemetry_api_1.Event(ServiceContext._contextEventPrefix + "close");
        this._addReservedPropertiesToTheEvent(telemetryEvent);
        telemetryEvent.properties["Reserved.ContextDurationInMs"] = Date.now() - this._contextStartInMs;
        return telemetryEvent;
    };
    ServiceContext.prototype._addReservedPropertiesToTheEvent = function (telemetryEvent) {
        telemetryEvent.properties["Reserved.ContextName"] = this._name;
    };
    ServiceContext._isContextNameValid = function (contextName) {
        if (stringjs(contextName).isEmpty()) {
            return false;
        }
        return stringjs(contextName).isAlphaNumeric();
    };
    ServiceContext._validateEventName = function (event) {
        if (stringjs(event.name.toLowerCase()).startsWith(ServiceContext._contextEventPrefix.toLowerCase())) {
            throw new index_1.ArgumentException("event '" + event.name + "' has reserved prefix '" + ServiceContext._contextEventPrefix + "'");
        }
    };
    ServiceContext._validateEventProperties = function (event) {
        for (var propName in event.properties) {
            if (event.properties.hasOwnProperty(propName)) {
                ServiceContext._validatePropertyName(propName);
            }
        }
    };
    ServiceContext._validatePropertyName = function (propertyName) {
        if (ServiceContext.isPropertyNameReserved(propertyName)) {
            throw new index_1.ArgumentException("property '" + propertyName + "' has reserved prefix '" + ServiceContext._contextPropertyPrefix + "'");
        }
    };
    ServiceContext._contextPropertyPrefix = "Context.";
    ServiceContext._contextEventPrefix = "Context/";
    ServiceContext._postTimeout = 15 * 1000;
    return ServiceContext;
}());
exports.ServiceContext = ServiceContext;
