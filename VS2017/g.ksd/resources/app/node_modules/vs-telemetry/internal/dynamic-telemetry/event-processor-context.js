/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var EventProcessorContext = (function () {
    function EventProcessorContext(ev, telemetrySession, telemetryManifest) {
        this.isDropped = false;
        this.disabledChannels = {};
        this.routedTo = {};
        this.excludedProperties = {};
        this.event = ev;
        this.telemetrySession = telemetrySession;
        this.telemetryManifest = telemetryManifest;
    }
    /**
     * Disable specific channels for the particular event
     * @param channels array of channels
     */
    EventProcessorContext.prototype.disableChannels = function (channels) {
        var _this = this;
        channels.forEach(function (value) {
            _this.disabledChannels[value] = true;
        });
    };
    /**
     * Route event to the specific channels along with the default channels
     * @param channels array of channels
     */
    EventProcessorContext.prototype.routeTo = function (channels) {
        var _this = this;
        channels.forEach(function (value) {
            _this.routedTo[value] = true;
        });
    };
    /**
     * Remove property from the event and move it to the excluded properties list.
     */
    EventProcessorContext.prototype.excludePropertyFromEvent = function (propertyName) {
        if (this.event.properties.hasOwnProperty(propertyName)) {
            this.excludedProperties[propertyName] = this.event.properties[propertyName];
            delete this.event.properties[propertyName];
        }
    };
    /**
     * Move property from excluded properties list to the event
     */
    EventProcessorContext.prototype.includePropertyToEvent = function (propertyName) {
        if (this.excludedProperties.hasOwnProperty(propertyName)) {
            this.event.properties[propertyName] = this.excludedProperties[propertyName];
        }
    };
    return EventProcessorContext;
}());
exports.EventProcessorContext = EventProcessorContext;
