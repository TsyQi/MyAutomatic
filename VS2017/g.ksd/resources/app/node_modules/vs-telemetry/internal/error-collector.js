"use strict";
var vs_telemetry_api_1 = require("vs-telemetry-api");
var ErrorCollector = (function () {
    function ErrorCollector() {
    }
    ErrorCollector.prototype.setSession = function (session) {
        this._session = session;
    };
    /**
     * Collects the error
     * @param kind ErrorKind helps to easily group errors
     * @param location Name of method where error was thrown from
     * @param message toStringable object that specifies error details. Should not contain PII.
     *      (such as absolute path or user name)
     */
    ErrorCollector.prototype.collectError = function (kind, location, message) {
        if (this._session == null) {
            return Promise.resolve(null);
        }
        this._logError(kind, location, message);
        return Promise.resolve(null);
    };
    ErrorCollector.prototype.collectErrors = function (errorKind, errorLocation, errors) {
        var _this = this;
        if (this._session == null) {
            return Promise.resolve(null);
        }
        var errorCounts = {};
        errors.forEach(function (error, index) {
            if (errorCounts[error] === undefined) {
                errorCounts[error] = [index];
            }
            else {
                errorCounts[error].push(index);
            }
        });
        Object.keys(errorCounts).forEach(function (error) { return _this._logError(errorKind, errorLocation, error, errorCounts[error]); });
        return Promise.resolve(null);
    };
    ErrorCollector.prototype._logError = function (kind, location, message, sequence) {
        var event = new vs_telemetry_api_1.Event("VS/TelemetryApi/Internal/Error");
        event.properties["VS.TelemetryApi.Internal.Error.Kind"] = kind;
        event.properties["VS.Telemetryapi.Internal.Error.Location"] = location;
        if (message != null) {
            event.properties["VS.TelemetryApi.Internal.Error.Message"] = message.toString();
        }
        if (sequence != null) {
            event.properties["VS.TelemetryApi.Internal.Error.Count"] = sequence.length;
            event.properties["VS.TelemetryApi.Internal.Error.Sequence"] = sequence.toString();
        }
        this._session.postValidatedEvent(event);
    };
    return ErrorCollector;
}());
exports.ErrorCollector = ErrorCollector;
