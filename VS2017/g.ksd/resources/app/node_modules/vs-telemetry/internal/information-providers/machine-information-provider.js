/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var child_process = require("child_process");
var path = require("path");
var uuid = require("node-uuid");
var crypto = require("crypto");
var guidHelper = require("../helpers/guid-helper");
var getmac = require("getmac");
/**
 * Provides information about current machine.
 */
var MachineInformationProvider = (function () {
    function MachineInformationProvider(registryTools, storage, userInformation, errorCollector, retrier) {
        this._registryTools = registryTools;
        this._storage = storage;
        this._userInformation = userInformation;
        this._errorCollector = errorCollector;
        this._retrier = retrier;
    }
    /**
     * Provides a hash of the mac address in the same way that VS Code does.
     */
    MachineInformationProvider.prototype.getMacAddressHash = function () {
        var _this = this;
        if (this._macAddressHash === undefined) {
            this._macAddressHash = this._storage.getItem(MachineInformationProvider.macAddressKey).then(function (storedMacAddress) {
                if (storedMacAddress && typeof storedMacAddress === "string" && _this._isHexHash(storedMacAddress)) {
                    return storedMacAddress;
                }
                return _this._getMacAddressHashFromMachineAndSetStorage();
            }, function (error) {
                _this._errorCollector.collectError("MacAddress", "getMacAddressHash", error);
                return _this._getMacAddressHashFromMachineAndSetStorage();
            });
        }
        return this._macAddressHash;
    };
    /**
     * Provides the MachineId in a platform-specific way.
     * @return Promise on completion returns the MachineId
     */
    MachineInformationProvider.prototype.getMachineId = function () {
        var _this = this;
        if (this._machineId === undefined) {
            if (process.platform === "win32") {
                this._machineId = this._retrier.attemptTask(function () { return _this._registryTools.getStringFromHKLM(MachineInformationProvider.machineRegKey, MachineInformationProvider.machineRegName); }, function (errors) { return _this._errorCollector.collectErrors("MachineId", "getMachineId:Win", errors); })
                    .then(function (machineRegValue) {
                    var normalizedGuid = guidHelper.stripBrackets(machineRegValue);
                    if (guidHelper.isGuid(normalizedGuid)) {
                        return normalizedGuid;
                    }
                    else {
                        throw "found value in registry but wasn't a guid";
                    }
                }).catch(function (_) {
                    return _this._getMachineIdFromCachedMacAndSetRegistry();
                });
            }
            else if (process.platform === "darwin") {
                this._machineId = new Promise(function (resolve, reject) {
                    child_process.exec("ioreg -rd1 -c IOPlatformExpertDevice | awk '/IOPlatformUUID/ { split($0, line, \"\\\"\"); " +
                        "printf(\"%s\\n\", line[4]); }'", function (error, stdout, stderr) {
                        if (!error && !stderr) {
                            var machineId = stdout.toString().toLowerCase();
                            if (guidHelper.isGuid(machineId)) {
                                resolve(machineId);
                            }
                        }
                        _this._errorCollector.collectError("MachineId", "getMachineId:Darwin", error);
                        _this._getMachineIdFromCachedMac().then(function (machineId) {
                            resolve(machineId);
                        });
                    });
                });
            }
            else {
                this._machineId = this._getMachineIdFromCachedMac();
            }
        }
        return this._machineId;
    };
    /**
     * Gets the mac address from the machine and sets it in storage.
     */
    MachineInformationProvider.prototype._getMacAddressHashFromMachineAndSetStorage = function () {
        var _this = this;
        return this._getMacAddressAsHex().then(function (macAddress) {
            return _this._storage.setItem(MachineInformationProvider.macAddressKey, macAddress)
                .then(function (_) { return macAddress; });
        }).catch(function (error) {
            _this._errorCollector.collectError("MacAddress", "_getMacAddressHashFromMachineAndSetStorage", error);
            return MachineInformationProvider.zeroHash;
        });
    };
    /**
     * Gets the machineId from cached mac and attempt to set the registry with the returned value.
     */
    MachineInformationProvider.prototype._getMachineIdFromCachedMacAndSetRegistry = function () {
        var _this = this;
        return this.getMacAddressHash().then(function (macAddressHash) {
            if (macAddressHash === MachineInformationProvider.zeroHash) {
                var machineId_1 = uuid.v4();
                return _this._setMachineIdInRegistry(machineId_1)
                    .then(function () { return machineId_1; })
                    .catch(function (error) {
                    _this._errorCollector.collectError("MachineId", "_getMachineIdFromCachedMacAndSetRegistry", error);
                    /* istanbul ignore next */
                    return _this._userInformation.getUserId();
                });
            }
            var machineId = _this._hashToGuid(macAddressHash);
            // Try to set registry but it doesn't matter if it fails.
            return _this._setMachineIdInRegistry(machineId)
                .then(function () { return machineId; })
                .catch(function () { return machineId; });
        });
    };
    MachineInformationProvider.prototype._getMachineIdFromCachedMac = function () {
        var _this = this;
        return this.getMacAddressHash().then(function (macAddressHash) {
            if (macAddressHash === MachineInformationProvider.zeroHash) {
                return _this._userInformation.getUserId();
            }
            return _this._hashToGuid(macAddressHash);
        });
    };
    /**
     * Sets the machineId in the registry.
     */
    MachineInformationProvider.prototype._setMachineIdInRegistry = function (machineId) {
        return this._registryTools.setStringInHKLM(MachineInformationProvider.machineRegKey, MachineInformationProvider.machineRegName, guidHelper.addBrackets(machineId));
    };
    /**
     * Formats the Mac address as a hex string.
     */
    MachineInformationProvider.prototype._getMacAddressAsHex = function () {
        return this._getMacAddress().then(function (macAddress) {
            return macAddress.digest("hex");
        });
    };
    /**
     * Gets the Mac address from the getmac npm package
     */
    /* istanbul ignore next */
    MachineInformationProvider.prototype._getMacAddress = function () {
        if (process.platform === "win32") {
            // Add System32 to the path so it can find the getmac command
            var winDir = process.env["windir"];
            if (winDir !== undefined) {
                var existingPath = ";" + process.env["path"] || "";
                process.env["path"] = path.join(winDir, "system32") + existingPath;
            }
        }
        return new Promise(function (resolve, reject) {
            getmac.getMac(function (error, macAddress) {
                if (!error) {
                    // crypt mac address
                    resolve(crypto.createHash("sha256").update(macAddress, "utf8"));
                }
                else {
                    reject(error);
                }
            });
        });
    };
    MachineInformationProvider.prototype._isHexHash = function (input) {
        var hashReg = /[a-f0-9]{64}/;
        return hashReg.test(input);
    };
    MachineInformationProvider.prototype._hashToGuid = function (hash) {
        return uuid.unparse(uuid.parse(hash));
    };
    MachineInformationProvider.zeroHash = "0000000000000000000000000000000000000000000000000000000000000000";
    MachineInformationProvider.machineRegKey = "\\Software\\Microsoft\\SQMClient";
    MachineInformationProvider.machineRegName = "MachineId";
    MachineInformationProvider.macAddressKey = "vstelemetry.macAddress";
    return MachineInformationProvider;
}());
exports.MachineInformationProvider = MachineInformationProvider;
