/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var child_process = require("child_process");
var lazy_disposable_1 = require("lazy-disposable");
var win32Platform = "win32";
/**
 * Settings to help decide if a user is considered internal.
 */
var ServiceInternalSettings = (function () {
    function ServiceInternalSettings(registryTools, storage) {
        var _this = this;
        this._registryTools = registryTools;
        this._storage = storage;
        this._isForcedUserExternal = lazy_disposable_1.lazy(function () { return _this._calculateForcedUserExternal(); });
        this._getFullDomainName = lazy_disposable_1.lazy(function () { return _this._calculateFullDomainName(); });
        this._getUserNameOverride = lazy_disposable_1.lazy(function () { return _this._calculateUsernameOverride(); });
        this._getTelemetryCompletelyDisabled = lazy_disposable_1.lazy(function () { return _this._calculateIsTelemetryCompletelyDisabled(); });
    }
    /**
     * User can be forced to be external if a storage key is set.
     */
    ServiceInternalSettings.prototype.isForcedUserExternal = function () {
        return this._isForcedUserExternal();
    };
    /**
     * User can be coerced to internal if they provide a username override in storage.
     */
    ServiceInternalSettings.prototype.getUsernameOverride = function () {
        return this._getUserNameOverride();
    };
    /**
     * Check whether telemetry disabled completely. Do not send anything.
     */
    ServiceInternalSettings.prototype.isTelemetryDisabledCompletely = function () {
        return this._getTelemetryCompletelyDisabled();
    };
    /**
     * Gets the full domain name of the user.
     */
    ServiceInternalSettings.prototype.getFullDomainName = function () {
        return this._getFullDomainName();
    };
    ServiceInternalSettings.prototype._calculateIsTelemetryCompletelyDisabled = function () {
        if (process.platform === win32Platform) {
            // read from the registry
            return this._registryTools.getNumberFromHKCU(ServiceInternalSettings.telemetryUserRegKeyPath, ServiceInternalSettings.completelyDisabledTelemetryRegKeyName)
                .then(function (numberValue) { return numberValue === 1; })
                .catch(function (_) { return false; });
        }
        else {
            // read from the local storage
            return this
                ._storage.getItem(ServiceInternalSettings.killSwitchKey)
                .then(function (killSwitchValue) {
                return killSwitchValue.toString().toLowerCase() === ServiceInternalSettings.forcedKillSwitch;
            })
                .catch(function (_) { return false; });
        }
    };
    ServiceInternalSettings.prototype._calculateForcedUserExternal = function () {
        return this._storage.getItem(ServiceInternalSettings.forceExternalKey).then(function (forcedExternalValue) {
            return forcedExternalValue.toString().toLowerCase() === ServiceInternalSettings.forcedUserExternal;
        }).catch(function (_) { return false; });
    };
    ServiceInternalSettings.prototype._calculateUsernameOverride = function () {
        return this._storage.getItem(ServiceInternalSettings.setInternalKey).catch(function (_) { return null; });
    };
    ServiceInternalSettings.prototype._calculateFullDomainName = function () {
        if (process.platform === win32Platform) {
            if (process.env.userdnsdomain !== undefined) {
                return Promise.resolve(process.env.userdnsdomain);
            }
            return new Promise(function (resolve, reject) {
                try {
                    child_process.exec("wmic computersystem get domain", function (error, stdout, stderr) {
                        if (!error && !stderr) {
                            resolve(stdout.toString());
                        }
                        resolve(null);
                    });
                }
                catch (_) {
                    resolve(null);
                }
            });
        }
        else {
            return Promise.resolve(null);
        }
    };
    ServiceInternalSettings.forceExternalKey = "vstelemetry.force-external-user";
    ServiceInternalSettings.setInternalKey = "vstelemetry.set-internal-user";
    ServiceInternalSettings.killSwitchKey = "vstelemetry.force-disable-telemetry";
    ServiceInternalSettings.forcedUserExternal = "true";
    ServiceInternalSettings.forcedKillSwitch = "true";
    ServiceInternalSettings.telemetryUserRegKeyPath = "\\Software\\Microsoft\\VisualStudio\\Telemetry";
    ServiceInternalSettings.completelyDisabledTelemetryRegKeyName = "TurnOffSwitch";
    return ServiceInternalSettings;
}());
exports.ServiceInternalSettings = ServiceInternalSettings;
