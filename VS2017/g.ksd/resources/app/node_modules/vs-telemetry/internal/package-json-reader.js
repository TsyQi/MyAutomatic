/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var fsp = require("node-fs-promise");
var stringjs = require("string");
var path = require("path");
var lazy_disposable_1 = require("lazy-disposable");
var PackageJsonReader = (function () {
    function PackageJsonReader() {
        var _this = this;
        this._packageRead = lazy_disposable_1.lazy(function () { return _this._readPackage(); });
    }
    /**
     * Returns a PackageJson object on success. Returns null if failure.
     */
    PackageJsonReader.prototype.read = function () {
        return this._packageRead();
    };
    PackageJsonReader.prototype._readPackage = function () {
        return PackageJsonReader._buildPackageFileName()
            .then(function (packageFileName) { return fsp.readFile(packageFileName); })
            .then(function (content) {
            var packageObj = JSON.parse(content.toString());
            return {
                name: packageObj.name ? packageObj.name.trim() : null,
                version: packageObj.version ? packageObj.version.trim() : null,
            };
        })
            .catch(function (_) { return null; });
    };
    /* istanbul ignore next */
    PackageJsonReader._buildPackageFileName = function () {
        // If we have this, then this file exists in node_modules/vs-telemetry/internal
        if (stringjs(__dirname).contains(path.join("node_modules", "vs-telemetry"))) {
            return Promise.resolve(__dirname + "/../../../package.json");
        }
        // We have probably been webpacked or browserified,
        // so package.json of host could be at same level as this code.
        return PackageJsonReader._findPackageJson(0, __dirname);
    };
    PackageJsonReader._findPackageJson = function (level, directoryPath) {
        if (level === 3) {
            return null;
        }
        var filePath = path.join(directoryPath, "package.json");
        return fsp.lstat(filePath).then(function (_) { return filePath; }, function (_) { return PackageJsonReader._findPackageJson(level + 1, path.join(directoryPath, "..")); });
    };
    return PackageJsonReader;
}());
exports.PackageJsonReader = PackageJsonReader;
