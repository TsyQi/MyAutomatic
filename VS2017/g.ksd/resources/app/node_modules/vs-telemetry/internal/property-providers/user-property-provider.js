/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var type_converters_1 = require("../helpers/type-converters");
var os = require("os");
/**
 * Provides user properties on each event. This includes properties that are only
 * for "internal" users.
 */
var UserPropertyProvider = (function () {
    function UserPropertyProvider(userInformationProvider) {
        this._userInformationProvider = userInformationProvider;
    }
    /**
     * Add shared properties to the provided context.
     * @param context Context to add shared property
     */
    UserPropertyProvider.prototype.addSharedProperties = function (context) {
        var _this = this;
        return this._userInformationProvider.getUserId().then(function (userId) {
            context.setSharedProperty("VS.Core.User.Id", userId);
            return Promise.all([
                _this._userInformationProvider.canCollectPrivateInformation(),
                _this._userInformationProvider.isUserMicrosoftInternal(),
            ]).then(function (internalPromises) {
                context.setSharedProperty("VS.Core.User.IsMicrosoftInternal", type_converters_1.TypeConverters.boolToString(internalPromises[1]));
                var propertyNames = [];
                var propertyPromises = [];
                if (internalPromises[0]) {
                    propertyNames.push("VS.Core.Internal.UserName");
                    propertyPromises.push(_this._userInformationProvider.getUserName());
                    propertyNames.push("VS.Core.Internal.ComputerName");
                    // Capitalize to be consistent with Telemetry Library
                    propertyPromises.push(Promise.resolve(os.hostname().toUpperCase()));
                }
                if (internalPromises[1]) {
                    propertyNames.push("VS.Core.Internal.UserDomainName");
                    propertyPromises.push(_this._userInformationProvider.getDomainName().then(function (domainName) {
                        // Capitalize to be consistent with Telemetry Library
                        return domainName ? domainName.toUpperCase() : domainName;
                    }));
                }
                if (propertyPromises.length > 0) {
                    return Promise.all(propertyPromises).then(function (propertyValues) {
                        for (var i = 0; i < propertyNames.length; i++) {
                            context.setSharedProperty(propertyNames[i], propertyValues[i] ? propertyValues[i] : UserPropertyProvider.valueNotAvailable);
                        }
                    });
                }
            });
        });
    };
    /**
     * Posts properties to the provided context.
     * @param context Context to post property
     */
    UserPropertyProvider.prototype.postProperties = function (context) {
        return Promise.resolve(null);
    };
    UserPropertyProvider.valueNotAvailable = "Unknown";
    return UserPropertyProvider;
}());
exports.UserPropertyProvider = UserPropertyProvider;
