/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var index_1 = require("../index");
var serializationHelper = require("./helpers/serialization-helper");
var RegistryLocalStorage = (function () {
    function RegistryLocalStorage(location, registryTools) {
        this._location = RegistryLocalStorage.keyPath + location;
        this._registryTools = registryTools;
    }
    /**
     * Get all items from the storage location.
     * @return Promise on completion with the key value pairs
     */
    RegistryLocalStorage.prototype.getAllItems = function () {
        var result = {};
        return this._registryTools.getValuesFromHKCU(this._location).then(function (values) {
            for (var propName in values) {
                if (values.hasOwnProperty(propName)) {
                    result[propName] = serializationHelper.interpretSerializedValue(values[propName]);
                }
            }
            return result;
        }).catch(function (err) {
            if (err.code !== undefined) {
                // winreg sets a code parameter on the error object if winreg ran
                // we expect an error even if exit code is 1, because reg key might not simply exist
                result = {};
                return result;
            }
            else {
                return Promise.reject(new index_1.StorageException("cannot get all items", err));
            }
        });
    };
    /**
     * Get the specified item from storage.
     * @param key key of item to retrieve
     * @return Promise on completion with the stored string
     */
    RegistryLocalStorage.prototype.getItem = function (key) {
        if (!this._isValidKey(key)) {
            return Promise.reject(new index_1.ArgumentException("key cannot be null or empty"));
        }
        return this._registryTools.getStringFromHKCU(this._location, key).then(function (value) {
            return serializationHelper.interpretSerializedValue(value);
        }).catch(function (err) { return Promise.reject(new index_1.StorageException("cannot get item with key: " + key, err)); });
    };
    /**
     * Sets the specified item in storage.
     * @param key key of item to store
     * @param value string to store
     * @return Promise on completion
     */
    RegistryLocalStorage.prototype.setItem = function (key, value) {
        if (!this._isValidKey(key)) {
            return Promise.reject(new index_1.ArgumentException("key cannot be null or empty"));
        }
        return this._registryTools.setStringInHKCU(this._location, key, serializationHelper.prepareValue(value))
            .catch(function (err) { return Promise.reject(new index_1.StorageException("cannot set item with key: " + key, err)); });
    };
    /**
     * Removes the specified item from storage.
     * @param key key of item to removeItem
     * @return Promise on completion
     */
    RegistryLocalStorage.prototype.removeItem = function (key) {
        if (!this._isValidKey(key)) {
            return Promise.reject(new index_1.ArgumentException("key cannot be null or empty"));
        }
        return this._registryTools.removeValueFromHKCU(this._location, key)
            .catch(function (err) { return Promise.reject(new index_1.StorageException("cannot remove item with key: " + key, err)); });
    };
    RegistryLocalStorage.prototype._isValidKey = function (key) {
        if (!key || key === "") {
            return false;
        }
        return true;
    };
    RegistryLocalStorage.keyPath = "\\Software\\Microsoft\\VisualStudio\\Telemetry\\PersistentPropertyBag\\";
    return RegistryLocalStorage;
}());
exports.RegistryLocalStorage = RegistryLocalStorage;
