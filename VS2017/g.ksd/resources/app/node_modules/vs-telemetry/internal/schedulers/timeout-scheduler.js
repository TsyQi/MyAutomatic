/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
/**
 * Timeout scheduler schedules actions using setTimeout method
 */
var TimeoutScheduler = (function () {
    function TimeoutScheduler(delay) {
        this._isDisposed = false;
        this._isScheduled = false;
        this._delay = delay;
    }
    /**
     * Schedule action to execute after delay.
     * @param action Action to execute
     */
    TimeoutScheduler.prototype.schedule = function (action) {
        var _this = this;
        if (!this._isDisposed) {
            if (this._isScheduled) {
                throw new Error("can only schedule one thing at once");
            }
            this._timer = setTimeout(function () {
                _this._isScheduled = false;
                action();
            }, this._delay);
            this._isScheduled = true;
        }
    };
    /**
     * Indicates if action is currently scheduled.
     */
    TimeoutScheduler.prototype.isScheduled = function () {
        return this._isScheduled;
    };
    /**
     * Disposes setTimeout if any.
     * And do not accept new schedule events.
     */
    TimeoutScheduler.prototype.dispose = function () {
        this._isDisposed = true;
        if (this._isScheduled) {
            clearTimeout(this._timer);
        }
        return Promise.resolve(null);
    };
    return TimeoutScheduler;
}());
exports.TimeoutScheduler = TimeoutScheduler;
