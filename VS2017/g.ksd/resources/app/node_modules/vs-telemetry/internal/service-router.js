/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var service_session_initializer_1 = require("./service-session-initializer");
var action_1 = require("./actions/action");
/**
 * Route events to the channels.
 */
var ServiceRouter = (function () {
    /* istanbul ignore next: ignore default assignment coverage */
    function ServiceRouter(channels) {
        if (channels === void 0) { channels = []; }
        this._isDisposed = false;
        this.priority = action_1.ActionPriority.Router;
        this._channels = channels;
    }
    /**
     * Execute action on event.
     * @param context event processor context, which contains all necessary information to process the event
     * @return Event processed event or null, in the case when event is dropped (suppressed)
     */
    ServiceRouter.prototype.run = function (context) {
        if (!this._isDisposed && context.isDropped === false) {
            this._postToChannels(context.event, context.disabledChannels, context.routedTo);
        }
        return Promise.resolve(null);
    };
    /**
     * Dispose all channels and return promise on their completion.
     */
    ServiceRouter.prototype.dispose = function () {
        if (!this._isDisposed) {
            this._isDisposed = true;
            this._disposePromise = Promise
                .all(this._channels.map(function (channel) { return channel.dispose(); }))
                .then(function (_) { return null; });
        }
        return this._disposePromise;
    };
    /**
     * Post events to the channels.
     * @param event event to post
     * @param disabledChannels array of disabled channels
     * @param routedChannels array of channels to route to
     */
    ServiceRouter.prototype._postToChannels = function (event, disabledChannels, routedChannels) {
        /*
         * We post event in the channel when:
         * - channel is enabled and;
         * - during event processing the event was not excluded from this channel and;
         * - channel has Active property or event is explicitly routed to this channel.
         */
        /* tslint:disable:no-bitwise */
        var filteredChannels = this._channels
            .filter(function (channel) { return (channel.enabled() &&
            !disabledChannels.hasOwnProperty(channel.id()) &&
            (channel.properties() & service_session_initializer_1.ChannelProperties.Active ||
                routedChannels.hasOwnProperty(channel.id()))); });
        event.properties["Reserved.ChannelUsed"] = filteredChannels.map(function (channel) { return channel.id(); }).join(",");
        filteredChannels.forEach(function (channel) {
            if (!channel.isStarted()) {
                channel.start();
            }
            channel.postEvent(event);
        });
        /* tslint:enable:no-bitwise */
    };
    return ServiceRouter;
}());
exports.ServiceRouter = ServiceRouter;
