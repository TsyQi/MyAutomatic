/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var vs_telemetry_api_1 = require("vs-telemetry-api");
var service_router_1 = require("./service-router");
var ai_channel_1 = require("./channel/ai-channel");
var file_logger_channel_1 = require("./channel/file-logger-channel");
var developer_mode_validator_1 = require("./channel-validator/developer-mode-validator");
var user_property_provider_1 = require("./property-providers/user-property-provider");
var machine_property_provider_1 = require("./property-providers/machine-property-provider");
var persistent_shared_property_provider_1 = require("./property-providers/persistent-shared-property-provider");
var storage = require("./user-local-storage");
var registry_local_storage_1 = require("./registry-local-storage");
var registry_tools_1 = require("./registry-tools");
var version_property_provider_1 = require("./property-providers/version-property-provider");
var os_property_provider_1 = require("./property-providers/os-property-provider");
var host_property_provider_1 = require("./property-providers/host-property-provider");
var host_information_provider_1 = require("./information-providers/host-information-provider");
var user_information_provider_1 = require("./information-providers/user-information-provider");
var machine_information_provider_1 = require("./information-providers/machine-information-provider");
var service_internal_settings_1 = require("./information-providers/service-internal-settings");
var event_processor_1 = require("./event-processor");
var yield_io_scheduler_1 = require("./schedulers/yield-io-scheduler");
var timeout_scheduler_1 = require("./schedulers/timeout-scheduler");
var telemetry_manifest_1 = require("./telemetry-manifest/telemetry-manifest");
var telemetry_manifest_manager_1 = require("./telemetry-manifest/telemetry-manifest-manager");
var index_1 = require("../index");
var opt_out_action_1 = require("./actions/opt-out-action");
var pii_property_action_1 = require("./actions/pii-property-action");
var data_model_property_action_1 = require("./actions/data-model-property-action");
var client_side_throttling_action_1 = require("./actions/client-side-throttling-action");
var action_1 = require("./actions/action");
var error_collector_1 = require("./error-collector");
var vsoptin_status_reader_1 = require("./vsoptin-status-reader");
var task_retrier_1 = require("./task-retrier");
(function (ChannelProperties) {
    /**
     * Channel is not intended to send data to the backend
     */
    ChannelProperties[ChannelProperties["None"] = 1] = "None";
    /**
     * Channel is used by default to send data to the backend for all events.
     */
    ChannelProperties[ChannelProperties["Active"] = 2] = "Active";
})(exports.ChannelProperties || (exports.ChannelProperties = {}));
var ChannelProperties = exports.ChannelProperties;
/**
 * Special initializer class. Intend to initialize session object.
 */
var ServiceSessionInitializer = (function () {
    /* istanbul ignore next: since we create real objects */
    function ServiceSessionInitializer(sessionSettings) {
        var _this = this;
        if (sessionSettings === void 0) { sessionSettings = new ServiceSessionSettings(); }
        this.customActions = [];
        this.sessionSettings = sessionSettings;
        this.routerFactory = function (channels) { return new service_router_1.ServiceRouter(channels); };
        var channelFactories = [];
        if (this.sessionSettings.AppInsightsInstrumentationKey != null) {
            channelFactories.push(function (session) {
                return new ai_channel_1.AIChannel(ai_channel_1.ChannelType.AI, _this.sessionSettings.AppInsightsInstrumentationKey, ChannelProperties.None);
            });
        }
        if (this.sessionSettings.AsimovInstrumentationKey != null) {
            channelFactories.push(function (session) {
                return new ai_channel_1.AIChannel(ai_channel_1.ChannelType.Vortex, _this.sessionSettings.AsimovInstrumentationKey, ChannelProperties.Active);
            });
        }
        channelFactories.push(function (session) {
            return new file_logger_channel_1.FileLoggerChannel(session.sessionId());
        });
        this.channelFactories = channelFactories;
        this.channelValidators = [new developer_mode_validator_1.DeveloperModeValidator()];
        this.errorCollector = new error_collector_1.ErrorCollector();
        var registryTools = new registry_tools_1.RegistryTools(process.env.PROCESSOR_ARCHITEW6432 === "AMD64" ? registry_tools_1.RegistryArch.Force64 : registry_tools_1.RegistryArch.Default);
        // since Optin status is read from the 32-bit registry we need to explicitly provide
        // RegistryTools with 32-bit settings, so we don't need to add 'WOW6432Node' path part
        // to the Registry key path.
        this.optinStatusReader = new vsoptin_status_reader_1.VsOptinStatusReader(new registry_tools_1.RegistryTools(registry_tools_1.RegistryArch.Force32));
        var userStorage = storage.getDefaultUserStorage();
        this.internalSettings = new service_internal_settings_1.ServiceInternalSettings(registryTools, userStorage);
        this.retrier = new task_retrier_1.ProgressiveTaskRetrier(function (timeout) { return new timeout_scheduler_1.TimeoutScheduler(timeout); });
        this.userInformationProvider =
            new user_information_provider_1.UserInformationProvider(userStorage, registryTools, this.internalSettings, this.errorCollector, this.retrier);
        this.machineInformationProvider =
            new machine_information_provider_1.MachineInformationProvider(registryTools, userStorage, this.userInformationProvider, this.errorCollector, this.retrier);
        this.hostInformationProvider = new host_information_provider_1.HostInformationProvider();
        var optOutAction = new opt_out_action_1.OptOutAction();
        optOutAction.addOptOutFriendlyEventName("vs/telemetryapi/session/initialized");
        optOutAction.addOptOutFriendlyPropertiesList([
            "Context.Default.VS.Core.ExeName",
            "Context.Default.VS.Core.ExeVersion",
            "Context.Default.VS.Core.MacAddressHash",
            "Context.Default.VS.Core.Machine.Id",
            "Context.Default.VS.Core.OS.Type",
            "Context.Default.VS.Core.OS.Version",
            "Context.Default.VS.Core.TelemetryApi.ProductVersion",
            "Context.Default.VS.Core.User.Id",
            "Context.Default.VS.Core.User.IsMicrosoftInternal",
            "Context.Default.VS.Core.User.IsOptedIn",
            "Reserved.EventId",
            "Reserved.SessionId",
            "Reserved.TimeSinceSessionStart",
            "Reserved.DataModel.Source",
            "Reserved.DataModel.EntitySchemaVersion",
            "Reserved.DataModel.CorrelationId",
            "Reserved.DataModel.Severity",
            "Reserved.DataModel.ProductName",
            "Reserved.DataModel.FeatureName",
            "Reserved.DataModel.EntityName",
            "Reserved.DataModel.EntityType",
            "Reserved.DataModel.Action.Type",
            "Reserved.DataModel.Action.Result",
            "Reserved.DataModel.Action.StartTime",
            "Reserved.DataModel.Action.EndTime",
            "Reserved.DataModel.Action.DurationInMilliseconds",
        ]);
        this.customActions.push(optOutAction);
        // add Pii Action
        var piiAction = new pii_property_action_1.PiiPropertyAction(this.userInformationProvider);
        this.customActions.push(piiAction);
        // add DataModel Setting Property Action
        var settingAction = new data_model_property_action_1.DataModelPropertyAction(vs_telemetry_api_1.SettingProperty, action_1.ActionPriority.SettingPriority, ".DataModelSetting", "HasSettings", "SettingProperties");
        this.customActions.push(settingAction);
        // add DataModel Metric Property Action
        var metricAction = new data_model_property_action_1.DataModelPropertyAction(vs_telemetry_api_1.MetricProperty, action_1.ActionPriority.MetricPriority, ".DataModelMetric", "HasMetrics", "MetricProperties");
        this.customActions.push(metricAction);
        var clientSideThrottlingAction = new client_side_throttling_action_1.ClientSideThrottling([
            "context/create",
            "context/close",
            "context/postproperty",
            "vs/telemetryapi/session/initialized",
            "vs/telemetryapi/clientsidethrottling",
            "vs/telemetryapi/manifest/load",
            "vs/telemetryapi/piiproperties",
        ]);
        this.customActions.push(clientSideThrottlingAction);
        this.eventProcessorFactory = function (router, session) {
            return new event_processor_1.TelemetryEventProcessor(router, session, telemetry_manifest_1.TelemetryManifest.createDefault(), _this.customActions);
        };
        this.eventScheduler = new yield_io_scheduler_1.YieldIOScheduler();
        var persistentStorage = process.platform === "win32" &&
            new registry_local_storage_1.RegistryLocalStorage(ServiceSessionInitializer.persistentStorageName, registryTools) ||
            storage.createUserStorage(ServiceSessionInitializer.persistentStorageName, "keyValue");
        this.persistentSharedProperties = persistentStorage;
        this.propertyProviders = [
            new os_property_provider_1.OSPropertyProvider(),
            new user_property_provider_1.UserPropertyProvider(this.userInformationProvider),
            new machine_property_provider_1.MachinePropertyProvider(this.machineInformationProvider),
            new host_property_provider_1.HostPropertyProvider(this.hostInformationProvider),
            new version_property_provider_1.VersionPropertyProvider(),
            new persistent_shared_property_provider_1.PersistentSharedPropertyProvider(persistentStorage, this.errorCollector),
        ];
        this.manifestManagerFactory =
            function (callback, telemetrySession) {
                return new telemetry_manifest_manager_1.TelemetryManifestManager(callback, telemetrySession);
            };
    }
    ServiceSessionInitializer.persistentStorageName = "c57a9efce9b74de382d905a89852db71";
    return ServiceSessionInitializer;
}());
exports.ServiceSessionInitializer = ServiceSessionInitializer;
/**
 * Session settings.
 * Since we need to be compatible with .Net implementation some of the fields start with capital letters.
 */
var ServiceSessionSettings = (function () {
    /**
     * Create default settings or deserialize input object
     * @param input object to deserialize
     */
    function ServiceSessionSettings(input) {
        var _this = this;
        /* Please, do not change this fields. Set of the fields is compatible with .Net settings */
        /* tslint:disable:variable-name */
        this.Id = null;
        this.IsOptedIn = false;
        this.HostName = telemetry_manifest_1.TelemetryManifest.hostname;
        this.AppInsightsInstrumentationKey = "f144292e-e3b2-4011-ac90-20e5c03fbce5";
        this.AsimovInstrumentationKey = "aif-312cbd79-9dbb-4c48-a7da-3cc2a931cb70";
        this.ProcessStartTime = null;
        /* istanbul ignore else */
        if (input !== undefined) {
            ServiceSessionSettings._propertiesToSerialize.forEach(function (paramName) {
                if (!input.hasOwnProperty(paramName)) {
                    throw new index_1.ArgumentException("Could not deserialize, missing " + paramName + " property");
                }
                _this[paramName] = input[paramName];
            });
        }
    }
    /* istanbul ignore next */
    ServiceSessionSettings.propertiesToSerialize = function () {
        return ServiceSessionSettings._propertiesToSerialize;
    };
    ;
    ServiceSessionSettings._propertiesToSerialize = [
        "IsOptedIn",
        "Id",
        "HostName",
        "AppInsightsInstrumentationKey",
        "AsimovInstrumentationKey",
        "ProcessStartTime",
    ];
    return ServiceSessionSettings;
}());
exports.ServiceSessionSettings = ServiceSessionSettings;
