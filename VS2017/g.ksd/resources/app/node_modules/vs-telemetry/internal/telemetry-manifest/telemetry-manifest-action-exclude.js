/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var stringjs = require("string");
var action_1 = require("../actions/action");
var telemetry_manifest_1 = require("./telemetry-manifest");
var index_1 = require("../../index");
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestActionExclude = (function () {
    function ManifestActionExclude() {
        this._excludeForChannels = [];
        this._excludeAll = false;
        this.priority = action_1.ActionPriority.ManifestExcludePriority;
    }
    Object.defineProperty(ManifestActionExclude.prototype, "excludeForChannels", {
        get: function () {
            return this._excludeForChannels;
        },
        set: function (value) {
            if (value == null) {
                throw new index_1.ArgumentException("excludeForChannels cannot be null");
            }
            this._excludeForChannels = value;
            this._excludeAll = value.length === 1 && value[0] === "*";
        },
        enumerable: true,
        configurable: true
    });
    ManifestActionExclude.prototype.validate = function () {
        if (this.excludeForChannels.length === 0) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("excludeForChannels must have at least one channel");
        }
        this.excludeForChannels.forEach(function (channelId) {
            if (stringjs(channelId).isEmpty()) {
                throw new telemetry_manifest_1.TelemetryManifestValidationException("excludeForChannels must not contain empty/null channels");
            }
        });
    };
    ManifestActionExclude.prototype.run = function (context) {
        if (this._excludeAll) {
            context.isDropped = true;
        }
        context.disableChannels(this._excludeForChannels);
        return Promise.resolve(null);
    };
    return ManifestActionExclude;
}());
exports.ManifestActionExclude = ManifestActionExclude;
