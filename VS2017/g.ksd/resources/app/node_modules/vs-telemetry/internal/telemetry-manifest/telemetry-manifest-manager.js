/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var remote = require("remote-file");
var telemetry_manifest_parser_1 = require("./telemetry-manifest-parser");
var telemetry_manifest_1 = require("./telemetry-manifest");
var vs_telemetry_api_1 = require("vs-telemetry-api");
var type_converters_1 = require("../helpers/type-converters");
var index_1 = require("../../index");
var TelemetryManifestManager = (function () {
    function TelemetryManifestManager(callback, telemetrySession) {
        this._url = "https://az667904.vo.msecnd.net/pub/" +
            telemetry_manifest_1.TelemetryManifest.hostname +
            "/v" +
            telemetry_manifest_1.TelemetryManifest.formatVersion + "/dyntelconfig.json";
        this._ttl = 1000 * 60 * 30;
        this._hasStarted = false;
        if (callback == null) {
            throw new index_1.ArgumentException("callback cannot be null");
        }
        if (telemetrySession == null) {
            throw new index_1.ArgumentException("telemetrySession cannot be null");
        }
        this._callback = callback;
        this._telemetrySession = telemetrySession;
    }
    TelemetryManifestManager.prototype.start = function () {
        if (!this._hasStarted) {
            var subscription = remote.subscribeOnFileUpdate(this._url, this.loadManifest.bind(this), this._ttl);
            this._subscriptionDisposable = subscription.init();
            this._hasStarted = true;
        }
    };
    TelemetryManifestManager.prototype.dispose = function () {
        if (this._hasStarted) {
            return this._subscriptionDisposable.then(function (disposable) {
                return disposable.dispose();
            });
        }
        return Promise.resolve(null);
    };
    TelemetryManifestManager.prototype.loadManifest = function (buffer) {
        var errorMessage = null;
        var newManifest = null;
        if (buffer != null) {
            try {
                newManifest = telemetry_manifest_parser_1.ManifestParser.parse(buffer);
            }
            catch (err) {
                if (err instanceof telemetry_manifest_1.TelemetryManifestValidationException) {
                    errorMessage = "validation error: " + err.message;
                }
                else if (err instanceof telemetry_manifest_parser_1.TelemetryManifestParserException) {
                    errorMessage = "parser error: " + err.message;
                }
                else {
                    errorMessage = "Unexpected error";
                }
            }
        }
        else {
            errorMessage = "Buffer is null";
        }
        // We don't call callback if we didn't have an error, we've loaded the manifest at least once, and the
        // new manifest is either null or is the same version as the old manifest.
        if (errorMessage == null && this._currentManifest != null &&
            (newManifest == null ||
                this._currentManifest.version === newManifest.version)) {
            return;
        }
        if (newManifest != null) {
            this._currentManifest = newManifest;
        }
        this.instrumentLoad(newManifest, buffer ? buffer.length : 0, errorMessage);
        // We always call callback even if an error, the callback manifest argument will just be null.
        this._callback(newManifest);
        return Promise.resolve(null);
    };
    TelemetryManifestManager.prototype.instrumentLoad = function (telemetryManifest, bufferSize, message) {
        if (this._telemetrySession.isSessionCloned()) {
            return;
        }
        var manifestEvent = new vs_telemetry_api_1.Event("VS/TelemetryApi/Manifest/Load");
        var success = telemetryManifest != null;
        manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.HostName"] = telemetry_manifest_1.TelemetryManifest.hostname;
        manifestEvent.properties["VS.TelemetryApi.Manifest.Load.IsLoadSuccess"] = type_converters_1.TypeConverters.boolToString(success);
        if (bufferSize > 0) {
            manifestEvent.properties["VS.TelemetryApi.Manifest.Load.StreamSize"] = bufferSize;
        }
        if (success) {
            manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.Version"] = telemetryManifest.version;
            manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.FormatVersion"] =
                telemetry_manifest_1.TelemetryManifest.formatVersion;
            if (telemetryManifest.invalidRules.length > 0) {
                manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.UnrecognizedRules"] =
                    telemetryManifest.invalidRules.join(",");
            }
            manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.UnrecognizedRules.Count"] =
                telemetryManifest.invalidRules.length;
            manifestEvent.properties["VS.TelemetryApi.DynamicTelemetry.Manifest.UnrecognizedActions.Count"] =
                telemetryManifest.invalidActionCount;
        }
        else {
            manifestEvent.properties["VS.TelemetryApi.Manifest.Load.ErrorMessage"] = message;
        }
        this._telemetrySession.postValidatedEvent(manifestEvent);
    };
    return TelemetryManifestManager;
}());
exports.TelemetryManifestManager = TelemetryManifestManager;
