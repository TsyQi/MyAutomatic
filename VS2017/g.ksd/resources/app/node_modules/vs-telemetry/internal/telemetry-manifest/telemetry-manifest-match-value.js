/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var stringjs = require("string");
var telemetry_manifest_1 = require("./telemetry-manifest");
var index_1 = require("../../index");
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueEq = (function () {
    function ManifestMatchValueEq() {
    }
    Object.defineProperty(ManifestMatchValueEq.prototype, "eq", {
        get: function () {
            return this._eq;
        },
        set: function (value) {
            this._eq = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueEq.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        return this.eq === valueToCompare.toString().toLowerCase();
    };
    ManifestMatchValueEq.prototype.validate = function () {
        if (this.eq == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'eq' can't be null");
        }
    };
    return ManifestMatchValueEq;
}());
exports.ManifestMatchValueEq = ManifestMatchValueEq;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueLt = (function () {
    function ManifestMatchValueLt() {
    }
    Object.defineProperty(ManifestMatchValueLt.prototype, "lt", {
        get: function () {
            return this._lt;
        },
        set: function (value) {
            this._lt = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueLt.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        if (isNaN(valueToCompare)) {
            return false;
        }
        return Number(valueToCompare) < this.lt;
    };
    ManifestMatchValueLt.prototype.validate = function () {
        if (isNaN(this.lt) || this.lt === Number.NEGATIVE_INFINITY) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'lt' must be valid double value");
        }
    };
    return ManifestMatchValueLt;
}());
exports.ManifestMatchValueLt = ManifestMatchValueLt;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueGt = (function () {
    function ManifestMatchValueGt() {
    }
    Object.defineProperty(ManifestMatchValueGt.prototype, "gt", {
        get: function () {
            return this._gt;
        },
        set: function (value) {
            this._gt = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueGt.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        if (isNaN(valueToCompare)) {
            return false;
        }
        return Number(valueToCompare) > this.gt;
    };
    ManifestMatchValueGt.prototype.validate = function () {
        if (isNaN(this.gt) || this.gt === Infinity) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'gt' must be valid double value");
        }
    };
    return ManifestMatchValueGt;
}());
exports.ManifestMatchValueGt = ManifestMatchValueGt;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueExists = (function () {
    function ManifestMatchValueExists() {
    }
    Object.defineProperty(ManifestMatchValueExists.prototype, "exists", {
        get: function () {
            return this._exists;
        },
        set: function (value) {
            this._exists = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueExists.prototype.isMatch = function (valueToCompare) {
        return true;
    };
    ManifestMatchValueExists.prototype.validate = function () {
        if (this.exists === false) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("the only allowable value for 'exists' is true");
        }
    };
    return ManifestMatchValueExists;
}());
exports.ManifestMatchValueExists = ManifestMatchValueExists;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueStartsWith = (function () {
    function ManifestMatchValueStartsWith() {
    }
    Object.defineProperty(ManifestMatchValueStartsWith.prototype, "startsWith", {
        get: function () {
            return this._startsWith;
        },
        set: function (value) {
            if (value == null) {
                throw new index_1.ArgumentException("startsWith cannot be null");
            }
            this._startsWith = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueStartsWith.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        return stringjs(valueToCompare.toLowerCase()).startsWith(this.startsWith);
    };
    ManifestMatchValueStartsWith.prototype.validate = function () {
        if (stringjs(this.startsWith).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'startsWith' can't be null or empty");
        }
    };
    return ManifestMatchValueStartsWith;
}());
exports.ManifestMatchValueStartsWith = ManifestMatchValueStartsWith;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueEndsWith = (function () {
    function ManifestMatchValueEndsWith() {
    }
    Object.defineProperty(ManifestMatchValueEndsWith.prototype, "endsWith", {
        get: function () {
            return this._endsWith;
        },
        set: function (value) {
            if (value == null) {
                throw new index_1.ArgumentException("endsWith cannot be null");
            }
            this._endsWith = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueEndsWith.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        return stringjs(valueToCompare.toLowerCase()).endsWith(this.endsWith);
    };
    ManifestMatchValueEndsWith.prototype.validate = function () {
        if (stringjs(this.endsWith).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'endsWith' can't be null or empty");
        }
    };
    return ManifestMatchValueEndsWith;
}());
exports.ManifestMatchValueEndsWith = ManifestMatchValueEndsWith;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchValueContains = (function () {
    function ManifestMatchValueContains() {
    }
    Object.defineProperty(ManifestMatchValueContains.prototype, "contains", {
        get: function () {
            return this._contains;
        },
        set: function (value) {
            if (value == null) {
                throw new index_1.ArgumentException("contains cannot be null");
            }
            this._contains = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchValueContains.prototype.isMatch = function (valueToCompare) {
        if (valueToCompare == null) {
            return false;
        }
        return valueToCompare.toString().toLowerCase().indexOf(this.contains) !== -1;
    };
    ManifestMatchValueContains.prototype.validate = function () {
        if (stringjs(this.contains).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'contains' can't be null or empty");
        }
    };
    return ManifestMatchValueContains;
}());
exports.ManifestMatchValueContains = ManifestMatchValueContains;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestInvalidMatchValueItem = (function () {
    function ManifestInvalidMatchValueItem() {
    }
    ManifestInvalidMatchValueItem.prototype.isMatch = function (valueToCompare) {
        throw new Error("cannot call this method");
    };
    ManifestInvalidMatchValueItem.prototype.validate = function () {
        throw new telemetry_manifest_1.TelemetryManifestValidationException("invalid match value item");
    };
    return ManifestInvalidMatchValueItem;
}());
exports.ManifestInvalidMatchValueItem = ManifestInvalidMatchValueItem;
