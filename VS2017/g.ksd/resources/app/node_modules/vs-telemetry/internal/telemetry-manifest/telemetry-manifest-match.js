/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var stringjs = require("string");
var telemetry_manifest_1 = require("./telemetry-manifest");
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchEventName = (function () {
    function ManifestMatchEventName() {
    }
    Object.defineProperty(ManifestMatchEventName.prototype, "event", {
        get: function () {
            return this._event;
        },
        set: function (value) {
            var eventName = value.toLowerCase();
            if (stringjs(value).endsWith("*")) {
                this._isFullNameCheck = false;
                this._event = eventName.substring(0, eventName.length - 1);
            }
            else {
                this._isFullNameCheck = true;
                this._event = eventName;
            }
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchEventName.prototype.validateItself = function () {
        if (stringjs(this.event).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'event' name can't be null or empty");
        }
    };
    ManifestMatchEventName.prototype.isEventMatch = function (event) {
        var eventName = event.name.toLowerCase();
        if (this._isFullNameCheck) {
            return eventName === this.event;
        }
        return stringjs(eventName).startsWith(this.event);
    };
    ManifestMatchEventName.prototype.getChildren = function () {
        return [];
    };
    return ManifestMatchEventName;
}());
exports.ManifestMatchEventName = ManifestMatchEventName;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchPropertyValue = (function () {
    function ManifestMatchPropertyValue() {
    }
    Object.defineProperty(ManifestMatchPropertyValue.prototype, "property", {
        get: function () {
            return this._property;
        },
        set: function (value) {
            this._property = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ManifestMatchPropertyValue.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchPropertyValue.prototype.validateItself = function () {
        if (stringjs(this.property).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'value' can't be null");
        }
        if (this.value == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'value' can't be null");
        }
        this._value.validate();
    };
    ManifestMatchPropertyValue.prototype.isEventMatch = function (event) {
        for (var key in event.properties) {
            if (event.properties.hasOwnProperty(key) && key.toLowerCase() === this.property) {
                return this.value.isMatch(event.properties[key]);
            }
        }
        return false;
    };
    ManifestMatchPropertyValue.prototype.getChildren = function () {
        return [];
    };
    return ManifestMatchPropertyValue;
}());
exports.ManifestMatchPropertyValue = ManifestMatchPropertyValue;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchAnd = (function () {
    function ManifestMatchAnd() {
    }
    Object.defineProperty(ManifestMatchAnd.prototype, "and", {
        get: function () {
            return this._and;
        },
        set: function (value) {
            this._and = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchAnd.prototype.validateItself = function () {
        if (this.and == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'and' cannnot be null");
        }
        if (this.and.length === 0) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("there are no operands in the 'and' clause");
        }
    };
    ManifestMatchAnd.prototype.isEventMatch = function (event) {
        return this.and.every(function (condition) {
            return condition.isEventMatch(event);
        });
    };
    ManifestMatchAnd.prototype.getChildren = function () {
        return this.and;
    };
    return ManifestMatchAnd;
}());
exports.ManifestMatchAnd = ManifestMatchAnd;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchOr = (function () {
    function ManifestMatchOr() {
    }
    Object.defineProperty(ManifestMatchOr.prototype, "or", {
        get: function () {
            return this._or;
        },
        set: function (value) {
            this._or = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchOr.prototype.validateItself = function () {
        if (this.or == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'or' cannot be null");
        }
        if (this.or.length === 0) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("there are no operands in the 'or' clause");
        }
    };
    ManifestMatchOr.prototype.isEventMatch = function (event) {
        return this.or.some(function (condition) {
            return condition.isEventMatch(event);
        });
    };
    ManifestMatchOr.prototype.getChildren = function () {
        return this.or;
    };
    return ManifestMatchOr;
}());
exports.ManifestMatchOr = ManifestMatchOr;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestMatchNot = (function () {
    function ManifestMatchNot() {
    }
    Object.defineProperty(ManifestMatchNot.prototype, "not", {
        get: function () {
            return this._not;
        },
        set: function (value) {
            this._not = value;
        },
        enumerable: true,
        configurable: true
    });
    ManifestMatchNot.prototype.validateItself = function () {
        if (this.not == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'not' cannot be null");
        }
    };
    ManifestMatchNot.prototype.isEventMatch = function (event) {
        return !this.not.isEventMatch(event);
    };
    ManifestMatchNot.prototype.getChildren = function () {
        return [this.not];
    };
    return ManifestMatchNot;
}());
exports.ManifestMatchNot = ManifestMatchNot;
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var ManifestInvalidMatchItem = (function () {
    function ManifestInvalidMatchItem() {
    }
    ManifestInvalidMatchItem.prototype.validateItself = function () {
        throw new telemetry_manifest_1.TelemetryManifestValidationException("invalid matching item");
    };
    ManifestInvalidMatchItem.prototype.isEventMatch = function (event) {
        throw new Error("cannot call this method");
    };
    ManifestInvalidMatchItem.prototype.getChildren = function () {
        throw new Error("cannot call this method");
    };
    return ManifestInvalidMatchItem;
}());
exports.ManifestInvalidMatchItem = ManifestInvalidMatchItem;
