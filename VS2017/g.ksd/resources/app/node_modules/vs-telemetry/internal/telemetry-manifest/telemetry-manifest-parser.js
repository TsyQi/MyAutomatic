"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var telemetry_manifest_1 = require("./telemetry-manifest");
var telemetry_manifest_rule_1 = require("./telemetry-manifest-rule");
var telemetry_manifest_match_1 = require("./telemetry-manifest-match");
var telemetry_manifest_match_value_1 = require("./telemetry-manifest-match-value");
var telemetry_manifest_action_1 = require("./telemetry-manifest-action");
var telemetry_manifest_action_exclude_1 = require("./telemetry-manifest-action-exclude");
var telemetry_manifest_action_route_1 = require("./telemetry-manifest-action-route");
var telemetry_manifest_action_opt_out_events_1 = require("./telemetry-manifest-action-opt-out-events");
var telemetry_manifest_action_opt_out_properties_1 = require("./telemetry-manifest-action-opt-out-properties");
var telemetry_manifest_action_pii_1 = require("./telemetry-manifest-action-pii");
var ManifestParser = (function () {
    /* istanbul ignore next: to suppress empty constructor warning */
    function ManifestParser() {
        // intentionally blank
    }
    /**
     * Parses the manifest file. Can throw a TelemetryManifestValidationException or
     * TelemetryManifestParserException if manifest is not in correct format.
     */
    ManifestParser.parse = function (buffer) {
        try {
            var manifest = ManifestParser.hydrateManifest(JSON.parse(buffer.toString()));
            manifest.validate();
            return manifest;
        }
        catch (err) {
            if (err instanceof SyntaxError) {
                throw new TelemetryManifestParserException("syntax error in JSON: " + err.message);
            }
            else {
                throw (err);
            }
        }
    };
    /**
     * Hydrates manifest from JSON object like following:
     * {
     *      "version": 0,
     *       "throttlingThresholdPerWindow": 2000,
     *       "rules": [{ hydrateRule() }, { hydrateRule() }, ...]
     * }
     */
    ManifestParser.hydrateManifest = function (jsonManifest) {
        throwIfNull(jsonManifest, "telemetryManifest");
        var manifest = new telemetry_manifest_1.TelemetryManifest();
        if (jsonManifest.rules) {
            throwIfNotArray(jsonManifest.rules, "rules");
            manifest.rules = jsonManifest.rules.map(function (rule) { return ManifestParser.hydrateRule(rule); });
        }
        // Version comes as a number over the wire, but we want to store it as a string for compatibility
        // purposes so when we send to backend in load diag events it still is a string.
        manifest.version = getOrThrowIfNotNumber(jsonManifest.version, "version").toString();
        manifest.throttlingThresholdPerWindow = jsonManifest.throttlingThresholdPerWindow
            ? getOrThrowIfNotNumber(jsonManifest.throttlingThresholdPerWindow, "throttlingThresholdPerWindow")
            : null;
        manifest.throttlingTimerResetInSeconds = jsonManifest.throttlingTimerResetInSeconds
            ? getOrThrowIfNotNumber(jsonManifest.throttlingTimerResetInSeconds, "throttlingTimerResetInSeconds")
            : null;
        return manifest;
    };
    /**
     * Hydrates manifest rules from JSON object like following:
     * {
     *      "name": "SampleRule",
     *       "when" : { hydrateMatch() },
     *       "do": [ { hydrateManifestAction() }, { hydrateManifestAction() }]
     * }
     */
    ManifestParser.hydrateRule = function (jsonRule) {
        throwIfNull(jsonRule, "rule");
        var rule = new telemetry_manifest_rule_1.TelemetryManifestRule();
        rule.name = getOrThrowIfNotString(jsonRule.name, "name");
        throwIfNull(jsonRule.when, "when");
        rule.when = ManifestParser.hydrateMatch(jsonRule.when);
        throwIfNull(jsonRule.do, "do");
        throwIfNotArray(jsonRule.do, "do");
        rule.do = jsonRule.do.map(function (doItem) { return ManifestParser.hydrateManifestAction(doItem); });
        return rule;
    };
    /**
     * Hydrates manifest match from JSON object like following:
     * EX 1:
     * {
     *      "not": { hydrateMatch() }
     * }
     * EX 2:
     * {
     *      "event" : "vs/sample/event"
     * }
     * EX 3:
     * {
     *      "and" [ { hydrateMatch() }, { hydrateMatch() }]
     * }
     * EX 4:
     * {
     *      "property": "vs.sample.property",
     *      "value": { hydrateMatchValue() }
     * }
     */
    ManifestParser.hydrateMatch = function (manifestMatch) {
        throwIfNull(manifestMatch, "manifestMatch");
        if (manifestMatch.hasOwnProperty("event")) {
            var jsonMatchEventName = manifestMatch;
            var matchEventName = new telemetry_manifest_match_1.ManifestMatchEventName();
            matchEventName.event = getOrThrowIfNotString(jsonMatchEventName.event, "event");
            return matchEventName;
        }
        else if (manifestMatch.hasOwnProperty("property")) {
            var jsonMatchProperty = manifestMatch;
            var matchPropertyValue = new telemetry_manifest_match_1.ManifestMatchPropertyValue();
            matchPropertyValue.property = getOrThrowIfNotString(jsonMatchProperty.property, "property");
            matchPropertyValue.value = ManifestParser.hydrateMatchValue(jsonMatchProperty.value);
            return matchPropertyValue;
        }
        else if (manifestMatch.hasOwnProperty("and")) {
            var jsonMatchAnd = manifestMatch;
            var matchAnd = new telemetry_manifest_match_1.ManifestMatchAnd();
            throwIfNull(jsonMatchAnd.and, "and");
            throwIfNotArray(jsonMatchAnd.and, "and");
            matchAnd.and = jsonMatchAnd.and.map(function (and) { return ManifestParser.hydrateMatch(and); });
            return matchAnd;
        }
        else if (manifestMatch.hasOwnProperty("or")) {
            var jsonMatchOr = manifestMatch;
            var matchOr = new telemetry_manifest_match_1.ManifestMatchOr();
            throwIfNull(jsonMatchOr.or, "or");
            throwIfNotArray(jsonMatchOr.or, "or");
            matchOr.or = jsonMatchOr.or.map(function (or) { return ManifestParser.hydrateMatch(or); });
            return matchOr;
        }
        else if (manifestMatch.hasOwnProperty("not")) {
            var jsonMatchNot = manifestMatch;
            var matchNot = new telemetry_manifest_match_1.ManifestMatchNot();
            matchNot.not = ManifestParser.hydrateMatch(jsonMatchNot.not);
            return matchNot;
        }
        return new telemetry_manifest_match_1.ManifestInvalidMatchItem();
    };
    /**
     * Hydrates manifest match value from JSON object like following:
     * EX 1:
     * {
     *      "eq": "SampleValue"
     * }
     * EX 2:
     * {
     *      "lt" : 12345
     * }
     * EX 3:
     * {
     *      "startsWith": "prefix"
     * }
     * EX 4:
     * {
     *      "exists": true
     * }
     */
    ManifestParser.hydrateMatchValue = function (manifestMatchValue) {
        throwIfNull(manifestMatchValue, "manifestMatchValue");
        if (manifestMatchValue.hasOwnProperty("eq")) {
            var jsonEqMatchValue = manifestMatchValue;
            var manifestMatchValueEq = new telemetry_manifest_match_value_1.ManifestMatchValueEq();
            manifestMatchValueEq.eq = getOrThrowIfNotString(jsonEqMatchValue.eq, "eq");
            return manifestMatchValueEq;
        }
        else if (manifestMatchValue.hasOwnProperty("lt")) {
            var jsonLtMatchValue = manifestMatchValue;
            var manifestMatchValueLt = new telemetry_manifest_match_value_1.ManifestMatchValueLt();
            manifestMatchValueLt.lt = getOrThrowIfNotNumber(jsonLtMatchValue.lt, "lt");
            return manifestMatchValueLt;
        }
        else if (manifestMatchValue.hasOwnProperty("gt")) {
            var jsonGtMatchValue = manifestMatchValue;
            var manifestMatchValueGt = new telemetry_manifest_match_value_1.ManifestMatchValueGt();
            manifestMatchValueGt.gt = getOrThrowIfNotNumber(jsonGtMatchValue.gt, "gt");
            return manifestMatchValueGt;
        }
        else if (manifestMatchValue.hasOwnProperty("exists")) {
            var jsonExistsMatchValue = manifestMatchValue;
            var manifestMatchValueExists = new telemetry_manifest_match_value_1.ManifestMatchValueExists();
            manifestMatchValueExists.exists = getOrThrowIfNotBoolean(jsonExistsMatchValue.exists, "exists");
            return manifestMatchValueExists;
        }
        else if (manifestMatchValue.hasOwnProperty("startsWith")) {
            var jsonStartsWithMatchValue = manifestMatchValue;
            var manifestMatchValueStartsWith = new telemetry_manifest_match_value_1.ManifestMatchValueStartsWith();
            manifestMatchValueStartsWith.startsWith =
                getOrThrowIfNotString(jsonStartsWithMatchValue.startsWith, "startsWith");
            return manifestMatchValueStartsWith;
        }
        else if (manifestMatchValue.hasOwnProperty("endsWith")) {
            var jsonEndsWithMatchValue = manifestMatchValue;
            var manifestMatchValueEndsWith = new telemetry_manifest_match_value_1.ManifestMatchValueEndsWith();
            manifestMatchValueEndsWith.endsWith = getOrThrowIfNotString(jsonEndsWithMatchValue.endsWith, "endsWith");
            return manifestMatchValueEndsWith;
        }
        else if (manifestMatchValue.hasOwnProperty("contains")) {
            var jsonContainsMatchValue = manifestMatchValue;
            var manifestMatchValueContains = new telemetry_manifest_match_value_1.ManifestMatchValueContains();
            manifestMatchValueContains.contains = getOrThrowIfNotString(jsonContainsMatchValue.contains, "contains");
            return manifestMatchValueContains;
        }
        return new telemetry_manifest_match_value_1.ManifestInvalidMatchValueItem();
    };
    /**
     * Hydrates manifest action from JSON object like following:
     * Example 1: Exclude action for particular channels.
     * {
     *      "excludeForChannels": [ "channel1", "channel2" ]
     * }
     *
     * Example 2: Exclude action for all channels.
     * {
     *      "excludeForChannels": [ "*" ]
     * }
     *
     * Example 3: Route action.
     * {
     *   "route": [
     *     {
     *       "channel": "aivortex",
     *       "args": {
     *         "datapointId": 1,
     *         "dataType": 1,
     *         "parameterName": "dummy",
     *         "truncationRule": 0
     *       }
     *     },
     *     {
     *       "channel": "ai",
     *       "args": {
     *         "datapointId": 1,
     *         "dataType": 1,
     *         "parameterName": "dummy",
     *         "truncationRule": 0
     *       }
     *     }
     *   ]
     * }
     *
     * Example 4: Opt out action
     * {
     *      "optOutIncludeEvents": [
     *          "my/event/to/include"
     *      ]
     * }
     * {
     *      "optOutExcludeEvents": [
     *          "my/event/to/exclude"
     *      ]
     * }
     * {
     *      "optOutIncludeProperties": [
     *          "my.property.to.include"
     *      ]
     * }
     * {
     *      "optOutExcludeProperties": [
     *          "my.property.to.exclude"
     *      ]
     * }
     */
    ManifestParser.hydrateManifestAction = function (manifestAction) {
        throwIfNull(manifestAction, "manifestAction");
        if (manifestAction.hasOwnProperty("excludeForChannels")) {
            var jsonManifestActionExclude = manifestAction;
            var manifestActionExclude = new telemetry_manifest_action_exclude_1.ManifestActionExclude();
            throwIfNull(jsonManifestActionExclude.excludeForChannels, "excludeForChannels");
            throwIfNotArray(jsonManifestActionExclude.excludeForChannels, "excludeForChannels");
            jsonManifestActionExclude.excludeForChannels.forEach(function (item) {
                getOrThrowIfNotString(item, "channel in excludeForChannels");
            });
            manifestActionExclude.excludeForChannels = jsonManifestActionExclude.excludeForChannels;
            return manifestActionExclude;
        }
        else if (manifestAction.hasOwnProperty("route")) {
            var jsonAction = manifestAction;
            var manifestActionRoute = new telemetry_manifest_action_route_1.ManifestActionRoute();
            throwIfNull(jsonAction.route, "route");
            throwIfNotArray(jsonAction.route, "route");
            // when parsing json we avoid "args" property, since we don't need it for XPlat so far
            var channels = jsonAction.route.map(function (val) { return getOrThrowIfNotString(val.channel, "channel"); });
            manifestActionRoute.channels = channels;
            return manifestActionRoute;
        }
        else if (manifestAction.hasOwnProperty("optOutIncludeEvents")) {
            return new telemetry_manifest_action_opt_out_events_1.ManifestActionOptOutIncludeEvents();
        }
        else if (manifestAction.hasOwnProperty("optOutExcludeEvents")) {
            return new telemetry_manifest_action_opt_out_events_1.ManifestActionOptOutExcludeEvents();
        }
        else if (manifestAction.hasOwnProperty("optOutIncludeProperties")) {
            var manifestActionOptOutIncludeProperties = new telemetry_manifest_action_opt_out_properties_1.ManifestActionOptOutIncludeProperties();
            var jsonAction = manifestAction;
            throwIfNull(jsonAction.optOutIncludeProperties, "optOutIncludeProperties");
            throwIfNotArray(jsonAction.optOutIncludeProperties, "optOutIncludeProperties");
            var properties = jsonAction.optOutIncludeProperties.map(function (val) { return getOrThrowIfNotString(val, "property"); });
            manifestActionOptOutIncludeProperties.properties = properties;
            return manifestActionOptOutIncludeProperties;
        }
        else if (manifestAction.hasOwnProperty("optOutExcludeProperties")) {
            var manifestActionOptOutExcludeProperties = new telemetry_manifest_action_opt_out_properties_1.ManifestActionOptOutExcludeProperties();
            var jsonAction = manifestAction;
            throwIfNull(jsonAction.optOutExcludeProperties, "optOutExcludeProperties");
            throwIfNotArray(jsonAction.optOutExcludeProperties, "optOutExcludeProperties");
            var properties = jsonAction.optOutExcludeProperties.map(function (val) { return getOrThrowIfNotString(val, "property"); });
            manifestActionOptOutExcludeProperties.properties = properties;
            return manifestActionOptOutExcludeProperties;
        }
        else if (manifestAction.hasOwnProperty("piiProperties")) {
            var manifestActionPii = new telemetry_manifest_action_pii_1.ManifestActionPii();
            var jsonAction = manifestAction;
            throwIfNull(jsonAction.piiProperties, "piiProperties");
            throwIfNotArray(jsonAction.piiProperties, "piiProperties");
            var properties = jsonAction.piiProperties.map(function (val) { return getOrThrowIfNotString(val, "property"); });
            manifestActionPii.properties = properties;
            return manifestActionPii;
        }
        return new telemetry_manifest_action_1.ManifestInvalidAction();
    };
    return ManifestParser;
}());
exports.ManifestParser = ManifestParser;
function throwIfNotArray(obj, name) {
    if (!Array.isArray(obj)) {
        throw new TelemetryManifestParserException(name + " is not an array");
    }
}
function getOrThrowIfNotString(str, name) {
    if (typeof str !== "string") {
        throw new TelemetryManifestParserException(name + " is not a string");
    }
    return str;
}
function getOrThrowIfNotNumber(num, name) {
    if (isNaN(num)) {
        throw new TelemetryManifestParserException(name + " is not a number");
    }
    return num;
}
function getOrThrowIfNotBoolean(bool, name) {
    if (typeof (bool) !== "boolean") {
        throw new TelemetryManifestParserException(name + " is not a boolean");
    }
    return bool;
}
function throwIfNull(obj, name) {
    if (obj == null) {
        throw new TelemetryManifestParserException(name + " cannot be null");
    }
}
var TelemetryManifestParserException = (function (_super) {
    __extends(TelemetryManifestParserException, _super);
    function TelemetryManifestParserException(message) {
        _super.call(this, message);
        this.message = message;
    }
    return TelemetryManifestParserException;
}(Error));
exports.TelemetryManifestParserException = TelemetryManifestParserException;
