/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var stringjs = require("string");
var telemetry_manifest_1 = require("./telemetry-manifest");
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var TelemetryManifestRule = (function () {
    function TelemetryManifestRule() {
        this.do = [];
    }
    TelemetryManifestRule.prototype.validate = function () {
        var _this = this;
        this.invalidActionCount = 0;
        if (stringjs(this.name).isEmpty()) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'name' must be non-empty valid string");
        }
        if (this.when == null) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'when' must be non-null valid matching rule");
        }
        function childrenAndSelf(manifestMatch) {
            return [manifestMatch].concat(manifestMatch.getChildren() == null ? [] :
                manifestMatch.getChildren().filter(function (child) { return child != null; })
                    .map(function (child) { return childrenAndSelf(child); })
                    .reduce(function (a, b) { return a.concat(b); }, []));
        }
        childrenAndSelf(this.when).forEach(function (manifestMatch) { return manifestMatch.validateItself(); });
        this.do = this.do.filter(function (doItem) {
            try {
                doItem.validate();
                return true;
            }
            catch (err) {
                _this.invalidActionCount++;
            }
            return false;
        });
        if (this.do.length === 0) {
            throw new telemetry_manifest_1.TelemetryManifestValidationException("'do' must have at least 1 action");
        }
    };
    return TelemetryManifestRule;
}());
exports.TelemetryManifestRule = TelemetryManifestRule;
