/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var stringjs = require("string");
/**
 * If you change this type, do not forget to make appropriate changes in the telemetry-manifest-parser.ts
 */
var TelemetryManifest = (function () {
    function TelemetryManifest() {
        this.rules = [];
        this.invalidRules = [];
        this.invalidActionCount = 0;
    }
    TelemetryManifest.createDefault = function () {
        if (TelemetryManifest._defaultManifest === undefined) {
            // create default manifest
            var defaultManifest = new TelemetryManifest();
            defaultManifest.version = "default";
            TelemetryManifest._defaultManifest = defaultManifest;
        }
        return TelemetryManifest._defaultManifest;
    };
    TelemetryManifest.prototype.getActionsForEvent = function (event) {
        var actions = [];
        if (this.rules != null) {
            this.rules.forEach(function (rule) {
                if (rule.when.isEventMatch(event)) {
                    actions = actions.concat(rule.do);
                }
            });
        }
        return actions;
    };
    TelemetryManifest.prototype.validate = function () {
        var _this = this;
        this.invalidRules = [];
        this.invalidActionCount = 0;
        if (stringjs(this.version).isEmpty()) {
            throw new TelemetryManifestValidationException("version cannot be empty");
        }
        if (this.rules != null) {
            this.rules = this.rules.filter(function (rule) {
                try {
                    rule.validate();
                    return true;
                }
                catch (err) {
                    if (!stringjs(rule.name).isEmpty()) {
                        _this.invalidRules.push(rule.name);
                    }
                }
                finally {
                    _this.invalidActionCount += rule.invalidActionCount;
                }
                return false;
            });
        }
    };
    TelemetryManifest.hostname = "Dev14";
    TelemetryManifest.formatVersion = 2;
    return TelemetryManifest;
}());
exports.TelemetryManifest = TelemetryManifest;
var TelemetryManifestValidationException = (function (_super) {
    __extends(TelemetryManifestValidationException, _super);
    function TelemetryManifestValidationException(message) {
        _super.call(this, message);
        this.message = message;
        this.name = "TelemetryManifestValidationException";
    }
    return TelemetryManifestValidationException;
}(Error));
exports.TelemetryManifestValidationException = TelemetryManifestValidationException;
