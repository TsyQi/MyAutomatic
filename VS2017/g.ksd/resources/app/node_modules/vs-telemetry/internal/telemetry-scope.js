"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var vs_telemetry_api_1 = require("vs-telemetry-api");
var index_1 = require("../index");
/**
 * An enum to define the severity of the telemetry event.
 * It is used for any data consumer who wants to categorize data based on severity.
 */
(function (ActionType) {
    /**
     * indicates telemetry event with high value or require attention (e.g., fault).
     */
    ActionType[ActionType["Start"] = 0] = "Start";
    /**
     * indicates a regular telemetry event.
     */
    ActionType[ActionType["End"] = 1] = "End";
})(exports.ActionType || (exports.ActionType = {}));
var ActionType = exports.ActionType;
var ScopeOperationEvent = (function (_super) {
    __extends(ScopeOperationEvent, _super);
    function ScopeOperationEvent(eventName, result, resultSummary, actionType, settings) {
        _super.call(this, eventName, result, resultSummary, settings.startEventProperties, settings.severity);
        this.isOptOutFriendly = settings.isOptOutFriendly;
        this.correlate.apply(this, settings.correlations);
        TelemetryScopeEventHelper.setActionType(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, actionType);
    }
    ScopeOperationEvent.prototype.setResult = function (result, resultSummary) {
        TelemetryScopeEventHelper.setResult(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, result, resultSummary);
    };
    ScopeOperationEvent.prototype.getEvent = function () {
        return this;
    };
    ScopeOperationEvent.prototype.setDuration = function (startTime) {
        TelemetryScopeEventHelper.setDuration(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, startTime);
    };
    ScopeOperationEvent.prototype.setActionType = function (actionType) {
        TelemetryScopeEventHelper.setActionType(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, actionType);
    };
    return ScopeOperationEvent;
}(vs_telemetry_api_1.OperationEvent));
exports.ScopeOperationEvent = ScopeOperationEvent;
var ScopeUserTaskEvent = (function (_super) {
    __extends(ScopeUserTaskEvent, _super);
    function ScopeUserTaskEvent(eventName, result, resultSummary, actionType, settings) {
        _super.call(this, eventName, result, resultSummary, settings.startEventProperties, settings.severity);
        this.isOptOutFriendly = settings.isOptOutFriendly;
        this.correlate.apply(this, settings.correlations);
        TelemetryScopeEventHelper.setActionType(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, actionType);
    }
    ScopeUserTaskEvent.prototype.setResult = function (result, resultSummary) {
        TelemetryScopeEventHelper.setResult(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, result, resultSummary);
    };
    ScopeUserTaskEvent.prototype.getEvent = function () {
        return this;
    };
    ScopeUserTaskEvent.prototype.setDuration = function (startTime) {
        TelemetryScopeEventHelper.setDuration(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, startTime);
    };
    ScopeUserTaskEvent.prototype.setActionType = function (actionType) {
        TelemetryScopeEventHelper.setActionType(this.reservedProperties, vs_telemetry_api_1.Event.dataModelPropertyPrefix, actionType);
    };
    return ScopeUserTaskEvent;
}(vs_telemetry_api_1.UserTaskEvent));
exports.ScopeUserTaskEvent = ScopeUserTaskEvent;
var TelemetryScopeEventHelper = (function () {
    function TelemetryScopeEventHelper() {
    }
    TelemetryScopeEventHelper.setResult = function (reservedProperties, dataModelPropertyPrefix, result, resultSummary) {
        reservedProperties[dataModelPropertyPrefix + "Action.Result"] = vs_telemetry_api_1.TelemetryResult[result];
        if (resultSummary != null) {
            reservedProperties[dataModelPropertyPrefix + "Action.ResultSummary"] = resultSummary;
        }
    };
    TelemetryScopeEventHelper.setDuration = function (reservedProperties, dataModelPropertyPrefix, startTime) {
        var now = Date.now();
        reservedProperties[dataModelPropertyPrefix + "Action.StartTime"] = (new Date(startTime)).toISOString();
        reservedProperties[dataModelPropertyPrefix + "Action.EndTime"] = (new Date(now)).toISOString();
        reservedProperties[dataModelPropertyPrefix + "Action.DurationInMilliseconds"] = now - startTime;
    };
    TelemetryScopeEventHelper.setActionType = function (reservedProperties, dataModelPropertyPrefix, actionType) {
        reservedProperties[dataModelPropertyPrefix + "Action.Type"] = ActionType[actionType];
    };
    return TelemetryScopeEventHelper;
}());
var InternalTelemetryScope = (function () {
    function InternalTelemetryScope(eventType, session, eventName, scopeSettings) {
        this.isEnded = false;
        this._startTime = Date.now();
        this._session = session;
        if (scopeSettings == null) {
            scopeSettings = new vs_telemetry_api_1.TelemetryScopeSettings();
        }
        // create a start event and post it
        var _startEvent = new eventType(eventName, vs_telemetry_api_1.TelemetryResult.None, null, ActionType.Start, scopeSettings);
        var startEvent = _startEvent.getEvent();
        this._session.postEvent(startEvent);
        this.correlation = startEvent.correlation;
        // after start event is posted, reuse it as end event and update ActionType to End.
        // it ensures end event has all properties and correlations from start event.
        this._endEvent = _startEvent;
        this._endEvent.setActionType(ActionType.End);
        this.endEvent = this._endEvent.getEvent();
        this.isEnded = false;
    }
    InternalTelemetryScope.prototype.end = function (result, resultSummary) {
        if (this.isEnded) {
            throw new index_1.InvalidOperationException("TelemetryScope is already ended.");
        }
        this.isEnded = true;
        this._endEvent.setResult(result, resultSummary);
        this._endEvent.setDuration(this._startTime);
        this._session.postEvent(this.endEvent);
    };
    return InternalTelemetryScope;
}());
exports.InternalTelemetryScope = InternalTelemetryScope;
