"use strict";
var WER = require("./build/Release/WerAPIWin.node");
var fs = require("fs");
(function (WerReportType) {
    WerReportType[WerReportType["NonCritical"] = 0] = "NonCritical";
    WerReportType[WerReportType["Critical"] = 1] = "Critical";
    WerReportType[WerReportType["AppCrash"] = 2] = "AppCrash";
    WerReportType[WerReportType["AppHang"] = 3] = "AppHang";
    WerReportType[WerReportType["Invalid"] = 5] = "Invalid";
})(exports.WerReportType || (exports.WerReportType = {}));
var WerReportType = exports.WerReportType;
(function (WerFileType) {
    WerFileType[WerFileType["Other"] = 5] = "Other";
    WerFileType[WerFileType["UserDoc"] = 4] = "UserDoc";
})(exports.WerFileType || (exports.WerFileType = {}));
var WerFileType = exports.WerFileType;
(function (WerConsent) {
    WerConsent[WerConsent["WerConsentNotAsked"] = 1] = "WerConsentNotAsked";
    WerConsent[WerConsent["WerConsentApproved"] = 2] = "WerConsentApproved";
    WerConsent[WerConsent["WerConsentDenied"] = 3] = "WerConsentDenied";
    WerConsent[WerConsent["WerConsentAlwaysPrompt"] = 4] = "WerConsentAlwaysPrompt";
    WerConsent[WerConsent["WerConsentMax"] = 5] = "WerConsentMax";
})(exports.WerConsent || (exports.WerConsent = {}));
var WerConsent = exports.WerConsent;
(function (WerSubmitFlags) {
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_HONOR_RECOVERY"] = 1] = "WER_SUBMIT_HONOR_RECOVERY";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_HONOR_RESTART"] = 2] = "WER_SUBMIT_HONOR_RESTART";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_QUEUE"] = 4] = "WER_SUBMIT_QUEUE";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_SHOW_DEBUG"] = 8] = "WER_SUBMIT_SHOW_DEBUG";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_ADD_REGISTERED_DATA"] = 16] = "WER_SUBMIT_ADD_REGISTERED_DATA";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_OUTOFPROCESS"] = 32] = "WER_SUBMIT_OUTOFPROCESS";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_NO_CLOSE_UI"] = 64] = "WER_SUBMIT_NO_CLOSE_UI";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_NO_QUEUE"] = 128] = "WER_SUBMIT_NO_QUEUE";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_NO_ARCHIVE"] = 256] = "WER_SUBMIT_NO_ARCHIVE";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_START_MINIMIZED"] = 512] = "WER_SUBMIT_START_MINIMIZED";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_OUTOFPROCESS_ASYNC"] = 1024] = "WER_SUBMIT_OUTOFPROCESS_ASYNC";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_BYPASS_DATA_THROTTLING"] = 2048] = "WER_SUBMIT_BYPASS_DATA_THROTTLING";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_ARCHIVE_PARAMETERS_ONLY"] = 4096] = "WER_SUBMIT_ARCHIVE_PARAMETERS_ONLY";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_REPORT_MACHINE_ID"] = 8192] = "WER_SUBMIT_REPORT_MACHINE_ID";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_BYPASS_POWER_THROTTLING"] = 16384] = "WER_SUBMIT_BYPASS_POWER_THROTTLING";
    WerSubmitFlags[WerSubmitFlags["WER_SUBMIT_BYPASS_NETWORK_COST_THROTTLING"] = 32768] = "WER_SUBMIT_BYPASS_NETWORK_COST_THROTTLING";
})(exports.WerSubmitFlags || (exports.WerSubmitFlags = {}));
var WerSubmitFlags = exports.WerSubmitFlags;
function CreateWerReport(eventType, reportType, consent, submitFlags, files, params) {
    if (!files) {
        files = [];
    }
    if (!params) {
        params = [];
    }
    for (var i = 0; i < params.length; i++) {
        if (params[i].paramNumber > 9 || params[i].paramNumber < 0) {
            throw new RangeError("invalid Watson parameter number. Please use 0-9 inclusive.");
        }
        if (params[i].paramName.length > 255) {
            throw new Error("param name is too long");
        }
        if (params[i].paramValue.length > 255) {
            throw new Error("param value is too long");
        }
    }
    for (var i = 0; i < files.length; i++) {
        try {
            fs.accessSync(files[i].path, fs.R_OK);
        }
        catch (e) {
            files[i].path = "";
        }
    }
    if (eventType.length > 255) {
        throw new Error("event type is too long");
    }
    WER.createReport(eventType, reportType, files, params, consent, submitFlags);
}
exports.CreateWerReport = CreateWerReport;
