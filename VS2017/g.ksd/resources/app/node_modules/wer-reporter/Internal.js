/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var advanced_1 = require("report-errors/advanced");
var crypto_1 = require("crypto");
var path = require("path");
var fs = require("fs");
function writeFile(info, outputDir) {
    var input = info.getStructuredStack();
    var notActionableFrames = [];
    var actionableFrames = [];
    var actionable = false;
    input.Stack.forEach(function (frame) {
        if (!actionable) {
            actionable = isFrameActionable(frame);
        }
        if (actionable) {
            actionableFrames.push(frame);
        }
        else {
            notActionableFrames.push(frame);
        }
    });
    if (actionableFrames.length === 0) {
        actionableFrames = notActionableFrames;
        notActionableFrames = [];
    }
    var WLB = advanced_1.WATSON_LINE_BREAK;
    var extraFrames = "";
    for (var i = 0; i < notActionableFrames.length; i++) {
        extraFrames += "ExtraFrame" + i + "=" + frameToString(notActionableFrames[i]) + WLB;
    }
    var stackTrace = "" + firstFrameToString(actionableFrames[0]) + WLB;
    for (var i = 1; i < actionableFrames.length; i++) {
        stackTrace += "           ms-appx://" + frameToString(actionableFrames[i]) + WLB;
    }
    var stackHash = crypto_1.createHmac("md5", "")
        .update(stackTrace)
        .digest("hex");
    var fullStackTrace = ("ErrorTypeText=" + input.ErrorType + WLB) +
        ("ErrorDescription=" + input.ErrorMessage + WLB) +
        ("ErrorNumber=0" + WLB) +
        ("SourceFile=" + actionableFrames[0].Package.name + WLB) +
        ("PackageVersion=" + actionableFrames[0].Package.version + WLB) +
        ("Line=" + actionableFrames[0].line + WLB) +
        ("Character=" + actionableFrames[0].column + WLB) +
        extraFrames +
        ("StackTrace=" + stackTrace) +
        ("StackTraceHash=" + stackHash);
    if (info.errorType) {
        fullStackTrace += WLB + "ErrorContext=" + info.errorType;
    }
    if (info.packageInfo.branch) {
        fullStackTrace += WLB + "CodeBranch=" + info.packageInfo.branch;
    }
    var filePath = path.join(outputDir, "ErrorInfo." + stackHash + ".txt");
    fs.writeFileSync(filePath, fullStackTrace);
    return {
        reportFilePath: filePath,
        sourceFile: actionableFrames[0].RelativePath,
        line: actionableFrames[0].line,
        column: actionableFrames[0].column,
        stackHash: stackHash
    };
}
exports.writeFile = writeFile;
function isFrameActionable(frame) {
    if (frame.Package.name === "node") {
        return false;
    }
    if (frame.extra && (frame.extra.isEval || frame.extra.failedToParse)) {
        return false;
    }
    if (frame.RelativePath === "native" || frame.RelativePath === "unknown" || frame.Package.name === "UNKNOWN") {
        return false;
    }
    if (frame.RelativePath === "UNSUPPORTED") {
        return false;
    }
    return true;
}
function firstFrameToString(frame) {
    return "ms-appx://" + frame.RelativePath + ":0:0           " + frame.FunctionName;
}
function frameToString(frame) {
    var evalFrame = frame.extra && frame.extra.isEval;
    if (frame.Package) {
        return ("" + (evalFrame ? "eval" : frame.Package.name)) +
            ((evalFrame ? "" : "@" + frame.Package.version) + ":" + frame.line + ":" + frame.column + "           ") +
            (frame.RelativePath + "." + frame.FunctionName);
    }
    else {
        return frame.RelativePath + ":" + frame.line + ":" + frame.column + "           " + frame.FunctionName;
    }
}
function setParamsWWAJSE(knownParams, thisPackage, exe) {
    var params = [];
    var exeName = sanitizeForWatson(exe);
    var thisVersion = advanced_1.convertVersion(thisPackage.version);
    var p1Value = exeName.concat("_", thisVersion, "_x86__");
    var param1 = { paramNumber: 0, paramValue: p1Value, paramName: "Package Name" };
    var param2 = { paramNumber: 1, paramValue: thisPackage.name, paramName: "Application Name" };
    var param3 = {
        paramNumber: 2,
        paramValue: "0x" + knownParams.stackHash.substr(0, 4),
        paramName: "Stack Hash" };
    var param4 = { paramNumber: 3, paramValue: "0x00000000", paramName: "Error Type" };
    var param5 = { paramNumber: 4, paramValue: knownParams.sourceFile, paramName: "Source File URL" };
    var lineHexString = knownParams.line.toString(16);
    var colHexString = knownParams.column.toString(16);
    lineHexString = eightZeroFill(lineHexString);
    colHexString = eightZeroFill(colHexString);
    var param6 = {
        paramNumber: 5,
        paramValue: "0x" + lineHexString + colHexString,
        paramName: "Source Position"
    };
    params.push(param1, param2, param3, param4, param5, param6);
    return params;
}
exports.setParamsWWAJSE = setParamsWWAJSE;
var EIGHT_ZEROES = "00000000";
function eightZeroFill(input) {
    var stringInput = input.toString();
    if (stringInput.length >= EIGHT_ZEROES.length) {
        return stringInput;
    }
    return (EIGHT_ZEROES + stringInput).slice(-EIGHT_ZEROES.length);
}
function sanitizeForWatson(input) {
    return advanced_1.replaceAll(input, "_", "-");
}
