/*!---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var advanced_1 = require("report-errors/advanced");
var wer_api_windows_1 = require("wer-api-windows");
exports.WerConsent = wer_api_windows_1.WerConsent;
var Internal_1 = require("./Internal");
var WatsonReporter = (function (_super) {
    __extends(WatsonReporter, _super);
    function WatsonReporter(options) {
        if (options === void 0) { options = {}; }
        _super.call(this, true);
        this.consent = advanced_1.defaultValue(wer_api_windows_1.WerConsent.WerConsentNotAsked, options.consent);
        this.sendReport = advanced_1.defaultValue(true, options.sendReport);
        this.nonCritical = advanced_1.defaultValue(false, options.nonCritical);
        this.reportDirectory = advanced_1.defaultValue(process.env.TEMP, options.reportDirectory);
        this.keepFile = advanced_1.defaultValue(true, options.keepReportFile);
    }
    WatsonReporter.prototype.report = function (err) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var additionalFiles = [];
            var reportInfo = Internal_1.writeFile(err, _this.reportDirectory);
            var EVENT_TYPE = "WWAJSE";
            var params = Internal_1.setParamsWWAJSE(reportInfo, err.packageInfo, err.exeName);
            var files = null;
            if (additionalFiles) {
                files = additionalFiles;
            }
            else {
                files = [];
            }
            var file = {
                path: reportInfo.reportFilePath,
                fileType: wer_api_windows_1.WerFileType.Other,
                anonymousData: true,
                deleteWhenDone: _this.keepFile
            };
            files.push(file);
            var reportType;
            if (_this.nonCritical) {
                reportType = wer_api_windows_1.WerReportType.NonCritical;
            }
            else {
                reportType = wer_api_windows_1.WerReportType.Critical;
            }
            if (_this.sendReport) {
                wer_api_windows_1.CreateWerReport(EVENT_TYPE, reportType, _this.consent, 0, files, params);
            }
            else {
                console.log(EVENT_TYPE);
                console.log(_this.consent);
                console.log(files);
                console.log(params);
            }
            resolve(reportInfo.reportFilePath);
        });
    };
    return WatsonReporter;
}(advanced_1.ReportingChannel));
exports.WatsonReporter = WatsonReporter;
